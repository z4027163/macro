#define HZZ4LeptonsAnalysis_cxx
#include "HZZ4LeptonsAnalysis_llbb.h"
#include <TH2.h>
#include <TStyle.h>
//#include <TCanvas.h>
#include <TLorentzVector.h>
#include <TNtuple.h>
#include <TSpline.h>
#include <TRandom3.h>

#include <TMath.h>
#include <fstream>
#include <iostream>
#include <sstream>

#include <math.h>
#include <stdlib.h>
#include <iomanip>
#include <vector>
#include <string>
#include <cstdlib>
#include <stdio.h>
#include <libgen.h>

#include "ZZMatrixElement/MELA/src/computeAngles.h"
#include "ZZMatrixElement/MELA/src/computeAngles.cc"
#include "ZZMatrixElement/MEMCalculators/interface/MEMCalculators.h"
#include "CondFormats/JetMETObjects/interface/JetResolutionObject.h"
#include "JetMETCorrections/Modules/interface/JetResolution.h"

#include "RoccoR.cc"

using namespace std;
// using namespace RooFit;
// using namespace meMCFM;
using namespace MEMNames;
using namespace JME;

const double Zmass = 91.188; // nominal Z boson mass
const double mPI = 3.141592654; 

void HZZ4LeptonsAnalysis::Loop(Char_t *output)
{

   if (fChain == 0) return;

   RoccoR  rc("/uscms/home/zwang4/nobackup/WORKSPCACE/ntuple/CMSSW_8_0_24/src/HiggsAnalysis/HiggsToZZ4Leptons/test/macros/roccor/rcdata.2016.v3"); //directory path as input for now; initialize only once, contains all variations


   // Declare MEM class
   MEMs combinedMEM(13,125,"CTEQ6L");     
   
    // JME
   JME::JetParameters jetparameters;
   JME::JetResolution jetresolution;
   JME::JetResolutionScaleFactor jetresolution_sf;

   // BNN
   Char_t datasetChar[500],bnnOUT[500],eventsOUT[500];
  
   cout << "The output file is " << output << endl;
   TString out = output;
   TString datasetName=out.ReplaceAll(".root","");
   sprintf(datasetChar,"%s",datasetName.Data());
   sprintf(bnnOUT,"%s_bnn.txt",datasetName.Data());
   sprintf(eventsOUT,"%s_bnn.root",datasetName.Data());
   cout << "bnnOUT= " << bnnOUT << endl;
   bnn_file.open(bnnOUT);

   bnn_file << "weight int_weight lept1_pt lept1_eta lept1_phi lept1_charge lept1_pfx lept1_sip lept1_mvaid lept2_pt lept2_eta lept2_phi lept2_charge lept2_pfx lept2_sip lept2_mvaid lept3_pt lept3_eta lept3_phi lept3_charge lept3_pfx lept3_sip lept4_pt lept4_eta lept4_phi lept4_charge lept4_pfx lept4_sip iso_max sip_max Z1mass Z2mass angle_costhetastar angle_costheta1 angle_costheta2 angle_phi angle_phistar1 KD psKD gravKD pt4l mass4l pfmet jet1_pt jet1_eta jet1_phi jet1_et jet2_pt jet2_eta jet2_phi jet2_et deltaetajj massjj VD njets" << endl;
     
   // Book txt file for candidate events
   Char_t txtOUT[500];
   sprintf(txtOUT,"%s_txt.txt",datasetName.Data());
   cout << "Opening a txt file with candidate events " << txtOUT << endl;
   ofstream output_txt;
   output_txt.open(txtOUT);
   Char_t txtOUT_VBF[500];
   sprintf(txtOUT_VBF,"%s_txt_vbf.txt",datasetName.Data());
   cout << "Opening a txt file with candidate events " << txtOUT_VBF << endl;
   ofstream output_txt_vbf;
   output_txt_vbf.open(txtOUT_VBF);


   // isSignal DM
   TString signal="MZP";
   Bool_t isSignal=false;
   isSignal=(datasetName.Contains(signal));
   cout << "isSignal= " << isSignal << endl;

   TString ggH="GluGluToHToZZTo4L";
   Bool_t isggH=false;
   TString ggHnew="SMHiggsToZZTo4L";
   isggH=(datasetName.Contains(ggH) || datasetName.Contains(ggHnew));
   cout << "isggH " << isggH << endl;
   
   TString powheg15="powheg15";
   Bool_t ispowheg15=false;
   ispowheg15=datasetName.Contains(powheg15);
   cout << "ispowheg15= " << int(ispowheg15) << endl;

   TString vbf="VBF";
   Bool_t isvbf=false;
   isvbf=datasetName.Contains(vbf);
   cout << "isvbf= " << int(isvbf) << endl;

   char *basename(char *path);
   cout << "Basename " << basename(datasetChar) << endl;
   TString datasetBase=basename(datasetChar);

   TString mhstring=datasetBase.ReplaceAll("GluGluToHToZZTo4L_M-","");
   mhstring=mhstring.ReplaceAll("VBF_HToZZTo4L_M-","");
   mhstring=mhstring.ReplaceAll("SMHiggsToZZTo4L_M-","");
   mhstring=mhstring.ReplaceAll("_7TeV-powheg-pythia6","");
   mhstring=mhstring.ReplaceAll("_8TeV-powheg-pythia6","");
   mhstring=mhstring.ReplaceAll("_7TeV-powheg15-pythia6","");
   mhstring=mhstring.ReplaceAll("_8TeV-powheg15-pythia6","");
   mhstring=mhstring.ReplaceAll("_8TeV-powheg15-JHUgenV3-pythia6","");
   mhstring=mhstring.ReplaceAll("_7TeV-powheg15-JHUgenV3-pythia6","");
   mhstring=mhstring.ReplaceAll("output_","");
   cout << "mhstring=" << mhstring << endl;
  
   float mHgen=0.;
   mHgen=atof(mhstring.Data());
   cout << "mHgen= " << mHgen << endl;
   
   /////////////Line Shape Correction//////////
   bool useLineShape=false;
   if (isggH) useLineShape=true;
   cout << "useLineShape "<< useLineShape << endl;
   
   double LineShapeWeight=1.,LineShapeWeightP=1.,LineShapeWeightM=1.;
   std::vector<double> bincenters_;
   std::vector<double> weightLineShape_;
   std::vector<double> weightLineShapeP_;
   std::vector<double> weightLineShapeM_; 
   bincenters_.clear();
   weightLineShape_.clear();
   weightLineShapeP_.clear();
   weightLineShapeM_.clear();
   
   if (useLineShape){
     
     // Format: 
     // m4l ; S_orig(old Powheg shape) ;  CPS shape ; CPS -> Interference shape ; CPS_plus -> Interference shape ; CPS_minus -> Interference shape ; CPS -> Interference_plus shape ; CPS -> Interference_minus shape
     
     if (isggH && mHgen >=400.){
       
       float Ratio=0.;
       if(ispowheg15 && datasetBase.Contains("7TeV")){
	 if(mHgen==400.) Ratio=1.00685;
	 if(mHgen==450.) Ratio=1.00249;
	 if(mHgen==500.) Ratio=0.991165;
	 if(mHgen==550.) Ratio=0.975656;
	 if(mHgen==600.) Ratio=0.989691;
	 if(mHgen==650.) Ratio=0.963656;
	 if(mHgen==700.) Ratio=0.935981;
	 if(mHgen==800.) Ratio=0.862627;
	 if(mHgen==900.) Ratio=0.797436;
	 if(mHgen==1000.) Ratio=0.728721;
       }
       else if(ispowheg15 && datasetBase.Contains("8TeV")){
	 if(mHgen==400.) Ratio=1.00907;
	 if(mHgen==450.) Ratio=1.00611;
	 if(mHgen==500.) Ratio=0.998143;
	 if(mHgen==550.) Ratio=0.982971;
	 if(mHgen==600.) Ratio=0.997586;
	 if(mHgen==650.) Ratio=0.975372;
	 if(mHgen==700.) Ratio=0.950402;
	 if(mHgen==800.) Ratio=0.887968;
	 if(mHgen==900.) Ratio=0.831853;
	 if(mHgen==1000.) Ratio=0.771844;
       }
       
       
       double bincenter, initial, powcps, powcpsint, powpcpsint, powmcpsint, powcpsintp, powcpsintm;
       char st1[]="LineShapeNew/mZZ_Higgs";
       char st2[500];
       sprintf(st2,mhstring.Data());
       //char st3[]="_8TeV_Lineshape+Interference.txt";
       char st3[500];
       if (datasetBase.Contains("8TeV")) sprintf(st3,"_8TeV_Lineshape+Interference.txt");
       if (datasetBase.Contains("7TeV")) sprintf(st3,"_7TeV_Lineshape+Interference.txt");
       strcat(st2,st3);
       strcat(st1,st2);
       cout <<"Fileshape is " << st1 << endl;
       std::ifstream ifs(st1);
       
       while( ifs.good() ) {
	 ifs >> bincenter >> initial >> powcps >> powcpsint >> powpcpsint >>  powmcpsint >> powcpsintp >> powcpsintm;     
	 bincenters_.push_back(bincenter);
	 cout<<"bincenter===-==========-============-==============-=============-============ "<<bincenter<<endl;
	 
	 if (!ispowheg15 && initial > 0.) {
	   weightLineShape_.push_back(  TMath::Max(0.,powcpsint/initial) );
	   weightLineShapeP_.push_back(  TMath::Max(0.,powcpsintp/initial) );
	   weightLineShapeM_.push_back(  TMath::Max(0.,powcpsintm/initial) );
	 }
	 else if (ispowheg15 && powcps > 0.) {
	   weightLineShape_.push_back(  TMath::Max(0.,(powcpsint/powcps)*Ratio) );
	   weightLineShapeP_.push_back(  TMath::Max(0.,(powcpsintp/powcps)*Ratio) );
	   weightLineShapeM_.push_back(  TMath::Max(0.,(powcpsintm/powcps)*Ratio) );
	 }
	 else{//weights are not defined if initial distribution is 0 => set weight to 0
	   weightLineShape_.push_back( 1. );
	   weightLineShapeP_.push_back( 1. );
	   weightLineShapeM_.push_back( 1. );
	 }
       }           
     }
     else{//weights are not defined if initial distribution is 0 => set weight to 1
       cout << "No lineshape correction -> Setting the lineshape weights to 1" << endl;
       weightLineShape_.push_back( 1. );
       weightLineShapeP_.push_back( 1. );
       weightLineShapeM_.push_back( 1. );
     }
   }
   
   ////////////////////////////////////////////////////////
   ///////////// VBF Line Shape Correction//////////
   bool useVBFLineShape=false;
   if (isvbf) useVBFLineShape=true;
   
   double VBFLineShapeWeight=1.,VBFLineShapeWeightP=1.,VBFLineShapeWeightM=1.;
   //std::vector<double> bincenters_;
   //bincenters_.clear();
   std::vector<double> weightVBFLineShape_;
   std::vector<double> weightVBFLineShapeP_;
   std::vector<double> weightVBFLineShapeM_; 
   weightVBFLineShape_.clear();
   weightVBFLineShapeP_.clear();
   weightVBFLineShapeM_.clear();
   
   if (useVBFLineShape){
     if (isvbf && mHgen >=400.){    
       double bincenter, initial, powcps, powcpsint, powpcpsint, powmcpsint, powcpsintp, powcpsintm;
       char st1[]="VBFLineShape/VBF_ratio";
       char st2[500];
       sprintf(st2,"%s.txt",mhstring.Data());
       char st3[500];
       if (datasetBase.Contains("8TeV")) sprintf(st3,"_8TeV_");
       if (datasetBase.Contains("7TeV")) sprintf(st3,"_7TeV_");
       strcat(st3,st2);
       strcat(st1,st3);
       cout <<"VBF Fileshape is " << st1 << endl;
       std::ifstream ifs(st1);
       
       while( ifs.good() ) {
	 ifs >> bincenter >> initial >> powcps >> powcpsint >> powpcpsint >>  powmcpsint >> powcpsintp >> powcpsintm;     
	 cout<<"bincenter===-==========-============-==============-=============-============ "<<bincenter<<endl;
	 bincenters_.push_back(bincenter);
	 if(initial > 0){
	   weightVBFLineShape_.push_back(   TMath::Max(0.,powcpsint/initial) );
	   weightVBFLineShapeP_.push_back(  TMath::Max(0.,powcpsintp/initial) );
	   weightVBFLineShapeM_.push_back(  TMath::Max(0.,powcpsintm/initial) );
	 }else{//weights are not defined if initial distribution is 0 => set weight to 0
	   weightVBFLineShape_.push_back( 1. );
	   weightVBFLineShapeP_.push_back( 1. );
	   weightVBFLineShapeM_.push_back( 1. );
	 }
       } 
     }
     else{//weights are not defined if initial distribution is 0 => set weight to 1
       cout << "No VBF lineshape correction -> Setting the lineshape weights to 1" << endl;
       weightVBFLineShape_.push_back( 1. );
       weightVBFLineShapeP_.push_back( 1. );
       weightVBFLineShapeM_.push_back( 1. );
     }
   }
   ///////   

   
   // Pileup reweighting in 80x

   TFile *_filePU;
   _filePU= TFile::Open("pileup/pileup.root");     
   TH1D *puweight = (TH1D*)_filePU->Get("pileup_scale"); 

   /////////////Lepton Efficiency Scale Factrons/////////////
   // Load histograms
   //

//   TFile *ele_scale_factors_v3 = new TFile("egammaEffi.txt_EGM2D_noGap.root");
//   TH2F *ele_scale_factors2016 = (TH2F*)gDirectory->Get("EGamma_SF2D"); 
//   TFile *ele_scale_factors_v4 = new TFile("egammaEffi.txt_EGM2D_noGap.root");
//   TH2F *ele_scale_factors_gap2016 = (TH2F*)gDirectory->Get("EGamma_SF2D"); 
//   TFile *RSE_scale_factors_v1 = new TFile("RSE_scale_factors_v1.root");

   TFile *ele_scale_factors_v3 = new TFile("SF_ELE/egammaEffi_RECO_EGM2D.root");
   TH2F *ele_scale_factors_reco = (TH2F*)gDirectory->Get("EGamma_SF2D");
   TFile *ele_scale_factors_v4 = new TFile("SF_ELE/egammaEffi_WP90_EGM2D.root");
   TH2F *ele_scale_factors_wp90 = (TH2F*)gDirectory->Get("EGamma_SF2D");


  TFile *mu_scale_factors1_p2 = new TFile("SF_GH/IDSF_GH.root");
  TH2F *mu_scale_factors_id_p2 = (TH2F*)gDirectory->Get("MC_NUM_LooseID_DEN_genTracks_PAR_pt_eta/abseta_pt_ratio");

//  TFile *mu_scale_factors1_p2 = new TFile("SF_GH/IDSF_GH.root");
//  TH2F *mu_scale_factors_id_p2 = (TH2F*)gDirectory->Get("MC_NUM_MediumID_DEN_genTracks_PAR_pt_eta/abseta_pt_ratio");

  TFile *mu_scale_factors2_p2 = new TFile("SF_GH/ISOSF_GH.root");
  TH2F *mu_scale_factors_iso_p2 = (TH2F*)gDirectory->Get("LooseISO_LooseID_pt_eta/abseta_pt_ratio");

//  TFile *mu_scale_factors2_p2 = new TFile("SF_GH/ISOSF_GH.root");
//  TH2F *mu_scale_factors_iso_p2 = (TH2F*)gDirectory->Get("LooseISO_MediumID_pt_eta/abseta_pt_ratio");

  TFile *mu_scale_factors3_p2 = new TFile("SF_GH/SingleMuonSF_GH.root");
  TH2F *mu_scale_factors_hlt_p2 = (TH2F*)gDirectory->Get("IsoMu24_OR_IsoTkMu24_PtEtaBins/abseta_pt_ratio");

  TFile *mu_scale_factors1_p1 = new TFile("SF_GH/IDSF_BCDEF.root");
  TH2F *mu_scale_factors_id_p1 = (TH2F*)gDirectory->Get("MC_NUM_LooseID_DEN_genTracks_PAR_pt_eta/abseta_pt_ratio");

//  TFile *mu_scale_factors1_p1 = new TFile("SF_GH/IDSF_BCDEF.root");
//  TH2F *mu_scale_factors_id_p1 = (TH2F*)gDirectory->Get("MC_NUM_MediumID2016_DEN_genTracks_PAR_pt_eta/abseta_pt_ratio");

  TFile *mu_scale_factors2_p1 = new TFile("SF_GH/ISOSF_BCDEF.root");
  TH2F *mu_scale_factors_iso_p1 = (TH2F*)gDirectory->Get("LooseISO_LooseID_pt_eta/abseta_pt_ratio");

  TFile *mu_scale_factors3_p1 = new TFile("SF_GH/SingleMuonSF_BCDEF.root");
  TH2F *mu_scale_factors_hlt_p1 = (TH2F*)gDirectory->Get("IsoMu24_OR_IsoTkMu24_PtEtaBins/abseta_pt_ratio");

  TFile *mu_scale_factors4 = new TFile("SF_GH/track_BCDEFGH.root"); //just for GH
  TGraph *mu_scale_factors_tk = (TGraph*)gDirectory->Get("ratio_eff_vtx_dr030e030_corr");

/*   // correction to the error
   TFile *ebe_corr2012= new TFile("ebeOverallCorrections.Legacy2013.v0.root");
   TH2F *ebe_mu_reco53x= (TH2F*)gDirectory->Get("mu_reco53x");
   TH2F *ebe_mu_mc53x= (TH2F*)gDirectory->Get("mu_mc53x");

   TFile *ebe_corr2011= new TFile("ebeOverallCorrections.LegacyPaper.42x.root");
   TH2F *ebe_mu_reco42x= (TH2F*)gDirectory->Get("mu_reco42x");
   TH2F *ebe_mu_mc42x= (TH2F*)gDirectory->Get("mu_mc42x");
*/   
   // kfactor_ggZZ(float GENmassZZ, int finalState)     
   TString strSystTitle[9] ={
     "Nominal",
     "PDFScaleDn",
     "PDFScaleUp",
     "QCDScaleDn",
     "QCDScaleUp",
     "AsDn",
     "AsUp",
     "PDFReplicaDn",
     "PDFReplicaUp"
   };

   TFile* fin = TFile::Open("Kfactor_Collected_ggHZZ_2l2l_NNLO_NNPDF_NarrowWidth_13TeV.root");
   // Open the files
   TSpline3* ggZZ_kf[9]={NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL};
   for(int f=0;f<9;f++){
     ggZZ_kf[f] = (TSpline3*)fin->Get(Form("sp_kfactor_%s", strSystTitle[f].Data()));
   }   
   fin->Close();

   // Book root file (for output):
   TFile * theFile = new TFile(output,"RECREATE");

   //TString Vars("Weight:Run:Event:LumiSection:massZ1:massZ2:mass4l:Iso_max:Sip_max:MELA:FSR");
   //TNtuple * thePlots=new TNtuple("Candidates","Candidates",Vars);

    // Clone tree for Z1
   //TTree *z1tree = fChain->CloneTree(0);
   

   double DELTAPHI( double , double ) ; //call the function  
   double invmass (float M1, float PT1, float ETA1, float PHI1, float M2, float PT2, float ETA2, float PHI2 );
   
   // Book relevant variables -- counters:

   int N_0 = 0;	  // MC truth & acceptance
   int N_01 = 0;
   int N_02 = 0;

   int N_1 = 0;	  // Skim
   int N_2 = 0;

   int N_3a = 0;
   int N_3_FSR = 0;
   int N_3b = 0;

   int N_4a = 0;
   int N_4b = 0;
   int N_4c = 0;
   int N_4d = 0;

   int N_5 = 0;
   int N_6 = 0;
   int N_7 = 0;
   int N_7_PFMET = 0;
    
   int N_8 = 0;
   int N_8_a = 0;
   int N_8_PFMET = 0;
   int N_9 = 0;

   int N_9_1FSR = 0;
   int N_9_2FSR = 0;

   int N_9PS = 0;
   int N_9GRAV = 0;
   
   int N_9a_VBF = 0;
   int N_9b_VBF = 0;
   int N_9_PFMET = 0;

   int N_VBF = 0;
   int N_bjets = 0;
   int N_bjets_cut = 0;
   int N_njets_cut = 0;

   int N_10 = 0;

   // counter weighted
   double N_0_w = 0;	  // MC truth & acceptance
   double N_01_w = 0;
   double N_02_w = 0;

   double N_1_w = 0;	  // Skim
   double N_2_w = 0;

   double N_3a_w = 0;
   double N_3_FSR_w = 0;
   double N_3b_w = 0;

   double N_4a_w = 0;
   double N_4b_w = 0;
   double N_4c_w = 0;
   double N_4d_w = 0;

   double N_5_w = 0;
   double N_6_w = 0;
   double N_7_w = 0;
   double N_7_PFMET_w = 0;


   double N_8_w = 0;
   double N_8_a_w = 0;
   double N_8_PFMET_w = 0;
   double N_9_w = 0;

   double N_9_1FSR_w = 0;
   double N_9_2FSR_w = 0;

   double N_9PS_w = 0;
   double N_9GRAV_w = 0;
   
   double N_9a_VBF_w = 0;
   double N_9b_VBF_w = 0;
   double N_9_PFMET_w = 0;
     
   double N_VBF_w = 0;
   double N_bjets_w = 0;
   double N_bjets_cut_w = 0;
   double N_njets_cut_w = 0;

   int N_10_w = 0;
   //******* SENSITIVITY ON MET
   double min_cut_PFMET = 0.; //initialize the min value of RECO_PFMET
   double max_cut_PFMET = 300.;//initialize the max value of RECO_PFMET
   vector <double> cut_PFMET;//declaration of a vector in which the cut values could be stored
   vector <double> counter_cut_PFMET;
   vector <double> counter_cut_PFMET_w;
   
   int cut_n = 61;//number of cuts on PFMET
   double step = (max_cut_PFMET - min_cut_PFMET) / (cut_n - 1);// width between two next cuts
   
   double cut_var_PFMET=0.;
   
   while(cut_var_PFMET <= max_cut_PFMET){
     cut_PFMET.push_back(cut_var_PFMET);//filling the vector with cut's value 
     cut_var_PFMET = cut_var_PFMET + step;//cuts
     
   }
   
   cout << "The size of the vector cut_PFMET is: "<<cut_PFMET.size()<<endl;
   
   //DEBUG
   // for(int i=0; i< cut_PFMET.size(); i++){
   //   cout <<"The value of the cut_PFMET vector at index "<< i <<" is "<<cut_PFMET.at(i)<<endl;
   // }
   //END DEBUG
   
   
   for(int i = 0; i < cut_PFMET.size(); i++){//initialize the counter
     counter_cut_PFMET.push_back(0);
   }
   
   for(int i=0; i< cut_PFMET.size(); i++){
     cout <<"The value of the counter_cut_PFMET vector BEFORE THE LOOP at index "<< i <<" is "<<counter_cut_PFMET.at(i)<<endl;
   }
   
   for(int i = 0; i < cut_PFMET.size(); i++){//initialize the counter
     counter_cut_PFMET_w.push_back(0);
   }
   
   //////////// END OF SENSITIVITY ON MET



   // Book Histos ***
   TH1D *nEvent_4l_w = new TH1D("nEvent_4l_w", "nEventComplete Weighted", 16, 0., 16.);
   TH1D *nEvent_4l = new TH1D("nEvent_4l", "nEventComplete", 16, 0., 16.);

   //SENSITIVITY
   
   TH1D *nEvent_CUT_w = new TH1D("nEvent_CUT_w", "nEventCUT Weightd", 61, 0., 61.);
   TH1D *nEvent_CUT = new TH1D("nEvent_CUT", "nEventCUT", 61, 0., 61.);
   
   //

   TH1F *Gen_H_MASS              = new TH1F("Gen_H_MASS", "Gen_H_MASS",8000,0.,2000.);  
   TH1F *Gen_H_MASS_ReWeighted   = new TH1F("Gen_H_MASS_ReWeighted", "Gen_H_MASS_ReWeighted",8000,0.,2000.);  
   TH1F *Gen_H_MASS_ReWeightedP  = new TH1F("Gen_H_MASS_ReWeightedP", "Gen_H_MASS_ReWeightedP",8000,0.,2000.);  
   TH1F *Gen_H_MASS_ReWeightedM  = new TH1F("Gen_H_MASS_ReWeightedM", "Gen_H_MASS_ReWeightedM",8000,0.,2000.);  

   // Pileup reweighting
   TH1F *hPUvertices             = new TH1F("hPUvertices", "hPUvertices",70,0.,70.);  
   TH1F *hPUvertices_ReWeighted  = new TH1F("hPUvertices_ReWeighted", "hPUvertices_ReWeighted",70,0.,70.);  

   //step 3
   TH1F * hMZ_3 = new TH1F("hMZ_3", "Mass of Z after selection step 3", 200 , -0.5 , 199.5 );
   hMZ_3->SetXTitle("mass_Z  (GeV)");
   TH1F * hPtZ_3 = new TH1F("hPtZ_3", "Pt of Z after selection step 3", 200 , -0.5 , 199.5 );
   hPtZ_3->SetXTitle("pt_Z  (GeV)");
   TH1F * hYZ_3 = new TH1F("hYZ_3", "Y of Z after selection step 3", 500 , -5. , 5.);
   hYZ_3->SetXTitle("Y_Z");
   
   TH1F * hPtLep_3 = new TH1F("hPtLep_3", "Pt of Lep after selection step 3", 200 , -0.5 , 199.5 );
   hPtLep_3->SetXTitle("pt_Lep1  (GeV)");
   TH1F * hYLep_3 = new TH1F("hEtaLep_3", "Y of Lep after selection step 3", 500 , -5. , 5. );
   hYLep_3->SetXTitle("Y of Lep2");
   TH1F * hIsoLep_3 = new TH1F("hIsoLep_3", "Isolation of Lep after selection step 3", 2000 , -10., 10.);
   hIsoLep_3->SetXTitle("Iso");
   TH1F * hSipLep_3 = new TH1F("hSipLep_3", "Sip of Lep after selection step 3",  1000 , -20. , 40. );
   hSipLep_3->SetXTitle("Sip");
   TH1F * hIpLep_3 = new TH1F("hIpLep_3", "Ip of Lep after selection step 3",  1000 , -20. , 40. );
   hIpLep_3->SetXTitle("Ip");
   TH1F * hIpErLep_3 = new TH1F("hIpErLep_3", "IpEr of Lep after selection step 3",  1000 , 0. , 10. );
   hIpErLep_3->SetXTitle("IpEr");

   TH1F * hIso_3 = new TH1F("hIso_3", "Isolation maxima after selection step 3", 2000 , -10. , 10. );
   hIso_3->SetXTitle("Iso");
   TH1F * hSip_3 = new TH1F("hSip_3", "Sip maxima after selection step 3",  1000 , -20. , 40. );
   hSip_3->SetXTitle("Sip");
   TH1F * hIp_3 = new TH1F("hIp_3", "Ip maxima after selection step 3",  1000 , -20. , 40. );
   hIp_3->SetXTitle("Ip");

   TH1F * hDjj_3 = new TH1F("hDjj_3", "Delta jets vbf selection step 1", 200, -19.5, 19.5 );
   hDjj_3->SetXTitle("Delta jets");
   TH1F * hMjj_3 = new TH1F("hMjj_3", "Mass jets vbf selection step 1", 200, -0.5, 499.5 );
   hMjj_3->SetXTitle("Mass jets");
   TH1F * hVD_3 = new TH1F("hVD_3", "Discriminant vbf selection step 1", 200, -0.5, 9.5 );
   hMjj_3->SetXTitle("Discriminant");
   
   TH1F * hPFMET_3 = new TH1F("hPFMET_3", "PF MET after selection step 3", 1000 , 0., 1000.);
   hPFMET_3->SetXTitle("PF MET");
    

   //step 5
   TH1F * hM4l_5 = new TH1F("hM4l_5", "Mass of four leptons after selection step 5", 1200, 4.5,1204.5 );
   hM4l_5->SetXTitle("4 lepton mass  (GeV)");


   TH1F * hMZ1_5 = new TH1F("hMZ1_5", "Mass of Z1 after selection step 5", 200 , -0.5 , 199.5 );
   hMZ1_5->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_5 = new TH1F("hPtZ1_5", "Pt of Z1 after selection step 5", 200 , -0.5 , 199.5 );
   hPtZ1_5->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_5 = new TH1F("hYZ1_5", "Y of Z1 after selection step 5", 500 , -5. , 5.);
   hYZ1_5->SetXTitle("Y_Z1");

   TH1F * hMZ1_BB_5 = new TH1F("hMZ1_BB_5", "Mass of Z1 after selection step 5 BB", 200 , -0.5 , 199.5 );
   hMZ1_5->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_BB_5 = new TH1F("hPtZ1_BB_5", "Pt of Z1 after selection step 5 BB", 200 , -0.5 , 199.5 );
   hPtZ1_5->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_BB_5 = new TH1F("hYZ1_BB_5", "Y of Z1 after selection step 5 BB", 500 , -5. , 5.);
   hYZ1_5->SetXTitle("Y_Z1");

   TH1F * hMZ1_EB_5 = new TH1F("hMZ1_5_EB", "Mass of Z1 after selection step 5 EB", 200 , -0.5 , 199.5 );
   hMZ1_5->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_EB_5 = new TH1F("hPtZ1_EB_5", "Pt of Z1 after selection step 5 EB", 200 , -0.5 , 199.5 );
   hPtZ1_5->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_EB_5 = new TH1F("hYZ1_EB_5", "Y of Z1 after selection step 5 EB", 500 , -5. , 5.);
   hYZ1_5->SetXTitle("Y_Z1");

   TH1F * hMZ1_EE_5 = new TH1F("hMZ1_EE_5", "Mass of Z1 after selection step 5 EE", 200 , -0.5 , 199.5 );
   hMZ1_5->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_EE_5 = new TH1F("hPtZ1_EE_5", "Pt of Z1 after selection step 5 EE", 200 , -0.5 , 199.5 );
   hPtZ1_5->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_EE_5 = new TH1F("hYZ1_EE_5", "Y of Z1 after selection step 5 EE", 500 , -5. , 5.);
   hYZ1_5->SetXTitle("Y_Z1");

   TH1F * hMZ2_5 = new TH1F("hMZ2_5", "Mass of Z2 after selection step 5", 200 , -0.5 , 199.5 );
   hMZ2_5->SetXTitle("mass_Z2  (GeV)");
   TH1F * hPtZ2_5 = new TH1F("hPtZ2_5", "Pt of Z2 after selection step 5", 200 , -0.5 , 199.5 );
   hPtZ2_5->SetXTitle("pt_Z2  (GeV)");
   TH1F * hYZ2_5 = new TH1F("hYZ2_5", "Y of Z2 after selection step 5", 500 , -5. , 5. );
   hYZ2_5->SetXTitle("Y_Z2");

   TH1F * hPtLep1_5 = new TH1F("hPtLep1_5", "Pt of Lep1 after selection step 5", 200 , -0.5 , 199.5 );
   hPtLep1_5->SetXTitle("pt_Lep1  (GeV)");
   TH1F * hYLep1_5 = new TH1F("hEtaLep1_5", "Y of Lep1 after selection step 5", 500 , -5. , 5. );
   hYLep1_5->SetXTitle("Y of Lep2");
   TH1F * hIsoLep1_5 = new TH1F("hIsoLep1_5", "Isolation of Lep1 after selection step 5", 2000 , -10. , 10. );
   hIsoLep1_5->SetXTitle("Iso");
   TH1F * hSipLep1_5 = new TH1F("hSipLep1_5", "Sip of Lep1 after selection step 5",  1000 , -20. , 40. );
   hSipLep1_5->SetXTitle("Sip");
   TH1F * hIpLep1_5 = new TH1F("hIpLep1_5", "Ip of Lep1 after selection step 5",  1000 , -20. , 40. );
   hIpLep1_5->SetXTitle("Ip");
   TH1F * hIpErLep1_5 = new TH1F("hIpErLep1_5", "IpEr of Lep1 after selection step 5",  1000 , 0. , 10. );
   hIpErLep1_5->SetXTitle("IpEr");

   TH1F * hPtLep2_5 = new TH1F("hPtLep2_5", "Pt of Lep2 after selection step 5", 200 , -0.5 , 199.5 );
   hPtLep2_5->SetXTitle("pt_Lep2  (GeV)");
   TH1F * hYLep2_5 = new TH1F("hEtaLep2_5", "Y of Lep2 after selection step 5", 500 , -5. , 5. );
   hYLep2_5->SetXTitle("Y of Lep2");
   TH1F * hIsoLep2_5 = new TH1F("hIsoLep2_5", "Isolation of Lep2 after selection step 5", 2000 , -10. , 10. );
   hIsoLep2_5->SetXTitle("Iso");
   TH1F * hSipLep2_5 = new TH1F("hSipLep2_5", "Sip of Lep2 after selection step 5",  1000 , -20. , 40. );
   hSipLep2_5->SetXTitle("Sip");
   TH1F * hIpLep2_5 = new TH1F("hIpLep2_5", "Ip of Lep2 after selection step 5",  1000 , -20. , 40. );
   hIpLep2_5->SetXTitle("Ip");
   TH1F * hIpErLep2_5 = new TH1F("hIpErLep2_5", "IpEr of Lep2 after selection step 5",  1000 , 0. , 10. );
   hIpErLep2_5->SetXTitle("IpEr");
   
   TH1F * hPtLep3_5 = new TH1F("hPtLep3_5", "Pt of Lep3 after selection step 5", 200 , -0.5 , 199.5 );
   hPtLep3_5->SetXTitle("pt_Lep3  (GeV)");
   TH1F * hYLep3_5 = new TH1F("hEtaLep3_5", "Y of Lep3 after selection step 5", 500 , -5. , 5. );
   hYLep3_5->SetXTitle("Y of Lep2");
   TH1F * hIsoLep3_5 = new TH1F("hIsoLep3_5", "Isolation of Lep3 after selection step 5", 2000 , -10. , 10. );
   hIsoLep3_5->SetXTitle("Iso");
   TH1F * hSipLep3_5 = new TH1F("hSipLep3_5", "Sip of Lep3 after selection step 5",  1000 , -20. , 40. );
   hSipLep3_5->SetXTitle("Sip");
   TH1F * hIpLep3_5 = new TH1F("hIpLep3_5", "Ip of Lep3 after selection step 5",  1000 , -20. , 40. );
   hIpLep3_5->SetXTitle("Ip");
   TH1F * hIpErLep3_5 = new TH1F("hIpErLep3_5", "IpEr of Lep3 after selection step 5",  1000 , 0. , 10. );
   hIpErLep3_5->SetXTitle("IpEr");

   TH1F * hPtLep4_5 = new TH1F("hPtLep4_5", "Pt of Lep4 after selection step 5", 200 , -0.5 , 199.5 );
   hPtLep4_5->SetXTitle("pt_Lep4  (GeV)");
   TH1F * hYLep4_5 = new TH1F("hEtaLep4_5", "Y of Lep4 after selection step 5", 50 , -5. , 5. );
   hYLep4_5->SetXTitle("Y of Lep2");
   TH1F * hIsoLep4_5 = new TH1F("hIsoLep4_5", "Isolation of Lep4 after selection step 5", 2000 , -10. , 10. );
   hIsoLep4_5->SetXTitle("Iso");
   TH1F * hSipLep4_5 = new TH1F("hSipLep4_5", "Sip of Lep4 after selection step 5",  1000 , -20. , 40. );
   hSipLep4_5->SetXTitle("Sip");
   TH1F * hIpLep4_5 = new TH1F("hIpLep4_5", "Ip of Lep4 after selection step 5",  1000 , -20. , 40. );
   hIpLep4_5->SetXTitle("Ip");
   TH1F * hIpErLep4_5 = new TH1F("hIpErLep4_5", "IpEr of Lep4 after selection step 5",  1000 , 0. , 10. );
   hIpErLep4_5->SetXTitle("IpEr");


   TH1F * hIso_5 = new TH1F("hIso_5", "Isolation maxima after selection step 5", 2000 , -10. , 10. );
   hIso_5->SetXTitle("Iso");
   TH1F * hSip_5 = new TH1F("hSip_5", "Sip maxima after selection step 5",  1000 , -20. , 40. );
   hSip_5->SetXTitle("Sip");
   TH1F * hIp_5 = new TH1F("hIp_5", "Ip maxima after selection step 5",  1000 , -20. , 40. );
   hIp_5->SetXTitle("Ip");
   

   //step 6
   
   TH1F * hminMll_6 = new TH1F("hminMll_6", "minMll at selection step 6", 400 , 0. , 200.);
   hminMll_6->SetXTitle("minMll  (GeV)");

   TH1F * hMZ1 = new TH1F("hMZ1", "Mass of Z1 after Z1 selection", 200 , -0.5 , 199.5 );
   hMZ1->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1 = new TH1F("hPtZ1_6", "Pt of Z1 after Z1 selection", 200 , -0.5 , 199.5 );
   hPtZ1->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1 = new TH1F("hYZ1_6", "Y of Z1 after Z1 selection", 500 , -5. , 5.);
   hYZ1->SetXTitle("Y_Z1");
   

   //step 7
   TH1F * hM4l_7 = new TH1F("hM4l_7", "Mass of four leptons after selection step 7", 1200, 4.5,1204.5 );
   hM4l_7->SetXTitle("4 lepton mass  (GeV)");

   TH1F * hMZ1_7 = new TH1F("hMZ1_7", "Mass of Z1 after selection step 7", 200 , -0.5 , 199.5);
   hMZ1_7->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_7 = new TH1F("hPtZ1_7", "Pt of Z1 after selection step 7", 200 , -0.5 , 199.5);
   hPtZ1_7->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_7 = new TH1F("hYZ1_7", "Y of Z1 after selection step 7", 500 , -5. , 5.);
   hYZ1_7->SetXTitle("Y_Z1");

   TH1F * hMZ2_7 = new TH1F("hMZ2_7", "Mass of Z2 after selection step 7", 200 , -0.5 , 199.5);
   hMZ2_7->SetXTitle("mass_Z2  (GeV)");
   TH1F * hPtZ2_7 = new TH1F("hPtZ2_7", "Pt of Z2 after selection step 7", 200 , -0.5 , 199.5);
   hPtZ2_7->SetXTitle("pt_Z2  (GeV)");
   TH1F * hYZ2_7 = new TH1F("hYZ2_7", "Y of Z2 after selection step 7", 500 , -5. , 5.);
   hYZ2_7->SetXTitle("Y_Z2");

   TH1F * hPtLep1_7 = new TH1F("hPtLep1_7", "Pt of Lep1 after selection step 7", 200 , -0.5 , 199.5 );
   hPtLep1_7->SetXTitle("pt_Lep1  (GeV)");
   TH1F * hYLep1_7 = new TH1F("hEtaLep1_7", "Y of Lep1 after selection step 7", 500 , -5. , 5. );
   hYLep1_7->SetXTitle("Y of Lep1");
   TH1F * hPhiLep1_7 = new TH1F("hPhiLep1_7", "Phi of Lep1 after selection step 7", 100 , 0. , 4. );
   hPhiLep1_7->SetXTitle("Phi of Lep1");
   TH1F * hIsoLep1_7 = new TH1F("hIsoLep1_7", "Isolation of Lep1 after selection step 7", 2000 , -10. , 10. );
   hIsoLep1_7->SetXTitle("Iso");
   TH1F * hSipLep1_7 = new TH1F("hSipLep1_7", "Sip of Lep1 after selection step 7",  1000 , -20. , 40. );
   hSipLep1_7->SetXTitle("Sip");
   TH1F * hIpLep1_7 = new TH1F("hIpLep1_7", "Ip of Lep1 after selection step 7",  1000 , -20. , 40. );
   hIpLep1_7->SetXTitle("Ip");
   TH1F * hIpErLep1_7 = new TH1F("hIpErLep1_7", "IpEr of Lep1 after selection step 7",  1000 , 0. , 10. );
   hIpErLep1_7->SetXTitle("IpEr");


   TH1F * hPtLep2_7 = new TH1F("hPtLep2_7", "Pt of Lep2 after selection step 7", 200 , -0.5 , 199.5 );
   hPtLep2_7->SetXTitle("pt_Lep2  (GeV)");
   TH1F * hYLep2_7 = new TH1F("hEtaLep2_7", "Y of Lep2 after selection step 7", 500 , -5. , 5. );
   hYLep2_7->SetXTitle("Y of Lep2");
   TH1F * hIsoLep2_7 = new TH1F("hIsoLep2_7", "Isolation of Lep2 after selection step 7", 2000 , -10. , 10. );
   hIsoLep2_7->SetXTitle("Iso");
   TH1F * hPhiLep2_7 = new TH1F("hPhiLep2_7", "Phi of Lep1 after selection step 7", 100 , 0. , 4. );
   hPhiLep2_7->SetXTitle("Phi of Lep2");
   TH1F * hSipLep2_7 = new TH1F("hSipLep2_7", "Sip of Lep2 after selection step 7",  1000 , -20. , 40. );
   hSipLep2_7->SetXTitle("Sip");
   TH1F * hIpLep2_7 = new TH1F("hIpLep2_7", "Ip of Lep2 after selection step 7",  1000 , -20. , 40. );
   hIpLep2_7->SetXTitle("Ip");
   TH1F * hIpErLep2_7 = new TH1F("hIpErLep2_7", "IpEr of Lep2 after selection step 7",  1000 , 0. , 10. );
   hIpErLep2_7->SetXTitle("IpEr");

   TH1F * hPtLep3_7 = new TH1F("hPtLep3_7", "Pt of Lep3 after selection step 7", 200 , -0.5 , 199.5 );
   hPtLep3_7->SetXTitle("pt_Lep3  (GeV)");
   TH1F * hYLep3_7 = new TH1F("hEtaLep3_7", "Y of Lep3 after selection step 7", 500 , -5. , 5. );
   hYLep3_7->SetXTitle("Y of Lep2");
   TH1F * hIsoLep3_7 = new TH1F("hIsoLep3_7", "Isolation of Lep3 after selection step 7", 2000 , -10. , 10. );
   hIsoLep3_7->SetXTitle("Iso");
   TH1F * hSipLep3_7 = new TH1F("hSipLep3_7", "Sip of Lep3 after selection step 7",  1000 , -20. , 40. );
   hSipLep3_7->SetXTitle("Sip");
   TH1F * hIpLep3_7 = new TH1F("hIpLep3_7", "Ip of Lep3 after selection step 7",  1000 , -20. , 40. );
   hIpLep3_7->SetXTitle("Ip");
   TH1F * hIpErLep3_7 = new TH1F("hIpErLep3_7", "IpEr of Lep3 after selection step 7",  1000 , 0. , 10. );
   hIpErLep3_7->SetXTitle("IpEr");

   TH1F * hPtLep4_7 = new TH1F("hPtLep4_7", "Pt of Lep4 after selection step 7", 200 , -0.5 , 199.5 );
   hPtLep4_7->SetXTitle("pt_Lep4  (GeV)");
   TH1F * hYLep4_7 = new TH1F("hEtaLep4_7", "Y of Lep4 after selection step 7", 500 , -5. , 5. );
   hYLep4_7->SetXTitle("Y of Lep2");
   TH1F * hIsoLep4_7 = new TH1F("hIsoLep4_7", "Isolation of Lep4 after selection step 7", 2000 , -10. , 10. );
   hIsoLep4_7->SetXTitle("Iso");
   TH1F * hSipLep4_7 = new TH1F("hSipLep4_7", "Sip of Lep4 after selection step 7",  1000 , -20. , 40. );
   hSipLep4_7->SetXTitle("Sip");
   TH1F * hIpLep4_7 = new TH1F("hIpLep4_7", "Ip of Lep4 after selection step 7",  1000 , -20. , 40. );
   hIpLep4_7->SetXTitle("Ip");
   TH1F * hIpErLep4_7 = new TH1F("hIpErLep4_7", "IpEr of Lep4 after selection step 7",  1000 , 0. , 10. );
   hIpErLep4_7->SetXTitle("IpEr");

   TH1F * hIso_7 = new TH1F("hIso_7", "Isolation maxima after selection step 7", 2000 , -10. , 10. );
   hIso_7->SetXTitle("Iso");
   TH1F * hSip_7 = new TH1F("hSip_7", "Sip maxima after selection step 7",  1000 , -20. , 40. );
   hSip_7->SetXTitle("Sip");
   TH1F * hIp_7 = new TH1F("hIp_7", "Ip maxima after selection step 7",  1000 , -20. , 40. );
   hIp_7->SetXTitle("Ip");
   TH1F * hPFMET_7 = new TH1F("hPFMET_7", "PF MET after selection step 7", 1000 , 0., 1000.);
   hPFMET_7->SetXTitle("PF MET (GeV)"); 

   TH1F * hPFMET_u1_5 = new TH1F("hPFMET_u1_5", "PF MET u1 after selection step 5", 1000 , 0., 1000.);
   hPFMET_u1_5->SetXTitle("u1 (GeV)");
   TH1F * hPFMET_u2_5 = new TH1F("hPFMET_u2_7", "PF MET u2 after selection step 5", 1000 , 0., 1000.);
   hPFMET_u2_5->SetXTitle("u2 (GeV)");

   TH1F * hDPHI_7 = new TH1F("DPHI_7", "polar angle between 4l and E_{T,miss}", 1000, 0., 5. );
   hDPHI_7->SetXTitle("#DELTA#phi(4l,E_{T,miss})");


   //step 8
   TH1F * hM4l_8 = new TH1F("hM4l_8", "Mass of four leptons after selection step 8", 1200, 4.5, 1204.5 );
   hM4l_8->SetXTitle("4 lepton mass  (GeV)");
   TH1F * hM4l_8_100_800 = new TH1F("hM4l_8_100_800", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8_100_800->SetXTitle("4 lepton mass  (GeV)");


   // correct for lineshape
   TH1F * hM4l_8weight = new TH1F("hM4l_8weight", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8weight->SetXTitle("4 lepton mass  (GeV)");
   TH1F * hM4l_8_100_800weight = new TH1F("hM4l_8_100_800weight", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8_100_800weight->SetXTitle("4 lepton mass  (GeV)");

   // correct for lineshape
   TH1F * hM4l_8weightP = new TH1F("hM4l_8weightP", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8weightP->SetXTitle("4 lepton mass  (GeV)");
   TH1F * hM4l_8_100_800weightP = new TH1F("hM4l_8_100_800weightP", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8_100_800weightP->SetXTitle("4 lepton mass  (GeV)");

   // correct for lineshape
   TH1F * hM4l_8weightM = new TH1F("hM4l_8weightM", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8weightM->SetXTitle("4 lepton mass  (GeV)");
   TH1F * hM4l_8_100_800weightM = new TH1F("hM4l_8_100_800weightM", "Mass of four leptons after selection step 8", 1200, 4.5,1204.5 );
   hM4l_8_100_800weightM->SetXTitle("4 lepton mass  (GeV)");

   
   TH1F * hMZ1_8 = new TH1F("hMZ1_8", "Mass of Z1 after selection step 8", 200 , -0.5 , 199.5 );
   hMZ1_8->SetXTitle("mass_Z1  (GeV)");
   TH1F * hPtZ1_8 = new TH1F("hPtZ1_8", "Pt of Z1 after selection step 8", 200 , -0.5 , 199.5 );
   hPtZ1_8->SetXTitle("pt_Z1  (GeV)");
   TH1F * hYZ1_8 = new TH1F("hYZ1_8", "Y of Z1 after selection step 8", 500 , -5. , 5.);
   hYZ1_8->SetXTitle("Y_Z1");

   TH1F * hMZ2_8 = new TH1F("hMZ2_8", "Mass of Z2 after selection step 8", 200 , -0.5 , 199.5 );
   hMZ2_8->SetXTitle("mass_Z2  (GeV)");
   TH1F * hPtZ2_8 = new TH1F("hPtZ2_8", "Pt of Z2 after selection step 8", 200 , -0.5 , 199.5 );
   hPtZ2_8->SetXTitle("pt_Z2  (GeV)");
   TH1F * hYZ2_8 = new TH1F("hYZ2_8", "Y of Z2 after selection step 8", 500 , -5. , 5. );
   hYZ2_8->SetXTitle("Y_Z2");

   TH1F * hPtLep1_8 = new TH1F("hPtLep1_8", "Pt of Lep1 after selection step 8", 200 , -0.5 , 199.5 );
   hPtLep1_8->SetXTitle("pt_Lep1  (GeV)");
   TH1F * hYLep1_8 = new TH1F("hEtaLep1_8", "Y of Lep1 after selection step 8", 500 , -5. , 5. );
   hYLep1_8->SetXTitle("Y of Lep2");
   TH1F * hIsoLep1_8 = new TH1F("hIsoLep1_8", "Isolation of Lep1 after selection step 8", 2000 , -10. , 10. );
   hIsoLep1_8->SetXTitle("Iso");
   TH1F * hSipLep1_8 = new TH1F("hSipLep1_8", "Sip of Lep1 after selection step 8",  1000 , -20. , 40. );
   hSipLep1_8->SetXTitle("Sip");
   TH1F * hIpLep1_8 = new TH1F("hIpLep1_8", "Ip of Lep1 after selection step 8",  1000 , -20. , 40. );
   hIpLep1_8->SetXTitle("Ip");
   TH1F * hIpErLep1_8 = new TH1F("hIpErLep1_8", "IpEr of Lep1 after selection step 8",  1000 , 0. , 10. );
   hIpErLep1_8->SetXTitle("IpEr");

   
   TH1F * hPtLep2_8 = new TH1F("hPtLep2_8", "Pt of Lep2 after selection step 8", 200 , -0.5 , 199.5 );
   hPtLep2_8->SetXTitle("pt_Lep2  (GeV)");
   TH1F * hYLep2_8 = new TH1F("hEtaLep2_8", "Y of Lep2 after selection step 8", 500 , -5. , 5. );
   hYLep2_8->SetXTitle("Y of Lep2");
   TH1F * hIsoLep2_8 = new TH1F("hIsoLep2_8", "Isolation of Lep2 after selection step 8", 2000 , -10. , 10. );
   hIsoLep2_8->SetXTitle("Iso");
   TH1F * hSipLep2_8 = new TH1F("hSipLep2_8", "Sip of Lep2 after selection step 8",  1000 , -20. , 40. );
   hSipLep2_8->SetXTitle("Sip");
   TH1F * hIpLep2_8 = new TH1F("hIpLep2_8", "Ip of Lep2 after selection step 8",  1000 , -20. , 40. );
   hIpLep2_8->SetXTitle("Ip");
   TH1F * hIpErLep2_8 = new TH1F("hIpErLep2_8", "IpEr of Lep2 after selection step 8",  1000 , 0. , 10. );
   hIpErLep2_8->SetXTitle("IpEr");

   TH1F * hPtLep3_8 = new TH1F("hPtLep3_8", "Pt of Lep3 after selection step 8", 200 , -0.5 , 199.5 );
   hPtLep3_8->SetXTitle("pt_Lep3  (GeV)");
   TH1F * hYLep3_8 = new TH1F("hEtaLep3_8", "Y of Lep3 after selection step 8", 500 , -5. , 5. );
   hYLep3_8->SetXTitle("Y of Lep2");
   TH1F * hIsoLep3_8 = new TH1F("hIsoLep3_8", "Isolation of Lep3 after selection step 8", 2000 , -10. , 10. );
   hIsoLep3_8->SetXTitle("Iso");
   TH1F * hSipLep3_8 = new TH1F("hSipLep3_8", "Sip of Lep3 after selection step 8",  1000 , -20. , 40. );
   hSipLep3_8->SetXTitle("Sip");
   TH1F * hIpLep3_8 = new TH1F("hIpLep3_8", "Ip of Lep3 after selection step 8",  1000 , -20. , 40. );
   hIpLep3_8->SetXTitle("Ip");
   TH1F * hIpErLep3_8 = new TH1F("hIpErLep3_8", "IpEr of Lep3 after selection step 8",  1000 , 0. , 10. );
   hIpErLep3_8->SetXTitle("IpEr");

   TH1F * hPtLep4_8 = new TH1F("hPtLep4_8", "Pt of Lep4 after selection step 8", 200 , -0.5 , 199.5 );
   hPtLep4_8->SetXTitle("pt_Lep4  (GeV)");
   TH1F * hYLep4_8 = new TH1F("hEtaLep4_8", "Y of Lep4 after selection step 8", 500 , -5. , 5. );
   hYLep4_8->SetXTitle("Y of Lep2");
   TH1F * hIsoLep4_8 = new TH1F("hIsoLep4_8", "Isolation of Lep4 after selection step 8", 2000 , -10. , 10. );
   hIsoLep4_8->SetXTitle("Iso");
   TH1F * hSipLep4_8 = new TH1F("hSipLep4_8", "Sip of Lep4 after selection step 8",  1000 , -20. , 40. );
   hSipLep4_8->SetXTitle("Sip");
   TH1F * hIpLep4_8 = new TH1F("hIpLep4_8", "Ip of Lep4 after selection step 8",  1000 , -20. , 40. );
   hIpLep4_8->SetXTitle("Ip");
   TH1F * hIpErLep4_8 = new TH1F("hIpErLep4_8", "IpEr of Lep4 after selection step 8",  1000 , 0. , 10. );
   hIpErLep4_8->SetXTitle("IpEr");
   

   TH1F * hIso_8 = new TH1F("hIso_8", "Isolation maxima after selection step 8", 2000 , -10. , 10. );
   hIso_8->SetXTitle("Iso");
   TH1F * hSip_8 = new TH1F("hSip_8", "Sip maxima after selection step 8",  1000 , -20. , 40. );
   hSip_8->SetXTitle("Sip");
   TH1F * hIp_8 = new TH1F("hIp_8", "Ip maxima after selection step 8",  1000 , -20. , 40. );
   hIp_8->SetXTitle("Ip");
   
   TH1F * hDjj_8 = new TH1F("hDjj_8", "Delta jets vbf selection step 8", 200, -19.5, 19.5 );
   hDjj_8->SetXTitle("Delta jets");
   TH1F * hMjj_8 = new TH1F("hMjj_8", "Mass jets vbf selection step 8", 200, -0.5, 499.5 );
   hMjj_8->SetXTitle("Mass jets");
   TH1F * hVD_8 = new TH1F("hVD_8", "Discriminant vbf selection step 8", 200, -0.5, 9.5 );
   hMjj_8->SetXTitle("Discriminant");
   TH2F * hMjj_Djj_8 = new TH2F("hMjj_Djj_8", "Mjj vs Djj selection step 8", 200, -0.5,499.5,200,-19.5, 19.5 );
   hMjj_Djj_8->SetXTitle("Mjj_vs_Djj");

   //no FSR   
   TH1F * hMZ1_noFSR_8 = new TH1F("hMZ1_noFSR_8", "Mass of Z1 after selection step 8 _noFSR", 200 , -0.5 , 199.5 );
   hMZ1_8->SetXTitle("mass_Z1  (GeV)");
   TH1F * hMZ2_noFSR_8 = new TH1F("hMZ2_noFSR_8", "Mass of Z2 after selection step 8 _noFSR", 200 , -0.5 , 199.5 );
   hMZ2_8->SetXTitle("mass_Z2  (GeV)");
   
   TH1F * hPFMET_8 = new TH1F("hPFMET_8", "PF MET after selection step 8", 1000 , 0., 1000.);
   hPFMET_8->SetXTitle("PF MET");
   
   TH1F * hM4l_T_8 = new TH1F("hM4l_T_8", "Transverse Mass of four leptons after full selection + MET", 1200, 4.5, 1204.5 );
   hM4l_T_8->SetXTitle("m_{T} + PF MET (GeV)");
   
   TH1F * hDPHI_4l_8 = new TH1F("DPHI_4l_8", "polar angle between 4l and E_{T,miss}", 3150, 0., 3.15 );
   hDPHI_4l_8->SetXTitle("#Delta#phi(4l,E_{T,miss})");

 TH1F * hDPHI_JET_MET_8 = new TH1F("hDPHI_JET_MET_8", "polar angle between jet and E_{T,miss}", 3150, 0., 3.15 );
   hDPHI_JET_MET_8->SetXTitle("#Delta#phi(jet,E_{T,miss})");

   TH1F * hDPHI_MAX_JET_MET_8 = new TH1F("hDPHI_MAX_JET_MET_8", "MAX polar angle between jet and E_{T,miss}", 3150, 0., 3.15 );
   hDPHI_MAX_JET_MET_8->SetXTitle("max(#Delta#phi(jet,E_{T,miss}))");

   TH1F * hDPHI_MIN_JET_MET_8 = new TH1F("hDPHI_MIN_JET_MET_8", "MIN polar angle between jet and E_{T,miss}", 3150, 0., 3.15 );
   hDPHI_MIN_JET_MET_8->SetXTitle("min(#Delta#phi(jet,E_{T,miss}))");

   TH1D * hNgood_8 = new TH1D("hNgood", "Number of good leptons", 10, -0.5, 9.5);
   hNgood_8->SetXTitle("# good leptons");

   TH1D * hNbjets_8 = new TH1D("hNbjets", "Number of b jets", 10, -0.5, 9.5);
   hNbjets_8->SetXTitle("# b-jets");

   TH1D * h_Nbjets_8 = new TH1D("h_Nbjets_8", "Number of b jets", 10, -0.5, 9.5);
   h_Nbjets_8->SetXTitle("# b-jets");

   TH1D * hNjets_8 = new TH1D("hNjets_8", "Number of jets passing VBF", 10, -0.5, 9.5);
   hNjets_8->SetXTitle("# n-jets");

   TH1F * hPtJet_7 = new TH1F("hPtJet_7", "Pt of (no ID)jet after selection step 5", 300 ,  0 , 600 );
   hPtJet_7->SetXTitle("pt_jet  (GeV)");

   TH1F * hYJet_7 = new TH1F("hEtaJet_7", "Y of (no ID)jet after selection step 5", 500 , -5. , 5. );
   hYJet_7->SetXTitle("Y of jet7");

   TH1F * hPtJet_8 = new TH1F("hPtJet_8", "Pt of jet after selection step 5", 300 ,  0 , 600 );
   hPtJet_8->SetXTitle("pt_jet  (GeV)");

   TH1F * hYJet_8 = new TH1F("hEtaJet_8", "Y of jet after selection step 5", 500 , -5. , 5. );
   hYJet_8->SetXTitle("Y of Jet8");

   TH1F * hNjetsVBF_8 = new TH1F("hNjetsVBF_8", "Number of VBF-tagged jets", 10, -0.5, 9.5);
   hNjetsVBF_8->SetXTitle("VBF-tagged jets");
   
   TH1F * hNMatchbjets_8 = new TH1F("hNMatchbjets_8", "Number of VH hadronic-tagged jets", 10, -0.5, 9.5 );
   hNMatchbjets_8->SetXTitle("VH hadronic-tagged jets");

   TH1F * hNjetsVH_8 = new TH1F("hNjetsVH_8", "Number of jets for VH category", 10, -0.5, 9.5 );
   hNjetsVH_8->SetXTitle("VH jets");

   
   // Step 9 with PFMET cut
   TH1F * hM4l_9 = new TH1F("hM4l_9", "Mass of four leptons after selection step 9", 1200, 4.5, 1204.5 );
   hM4l_9->SetXTitle("4 lepton mass  (GeV)");
   
   TH1F * hPFMET_9 = new TH1F("hPFMET_9", "PF MET after selection step 9", 1000 , 0., 1000.);
   hPFMET_9->SetXTitle("PF MET (GeV)");   
   
   TH1F * hM4l_T_9 = new TH1F("hM4l_T_9", "Transverse Mass of four leptons after full selection + MET", 1200, 4.5, 1204.5 );
   hM4l_T_9->SetXTitle("m_{T} + PF MET (GeV)");
   
   TH1F * hDPHI_4l_9 = new TH1F("DPHI_4l_9", "polar angle between 4l and E_{T,miss}", 3150, 0., 3.15 );
   hDPHI_4l_9->SetXTitle("#Delta#phi(4l,E_{T,miss})");

   TH1F * hCVSBTag_PT_9 = new TH1F("hCVSBTag_PT_9", "...", 900, 0., 300.);
   TH1F * hCVSBTag_DISCR_9 = new TH1F("hCVSBTag_DISCR_9", "...", 500, 0., 1.);

   // Step 10 with signal region cuts
   TH1F * hPFMET_10 = new TH1F("hPFMET_10", "PF MET after selection step 10", 1000 , 0., 1000.);
   hPFMET_10->SetXTitle("PF MET (GeV)");  
   
   TH1F * hM4l_T_10 = new TH1F("hM4l_T_10", "Transverse Mass of four leptons + MET after step 10", 1200, 4.5, 1204.5 );
   hM4l_T_10->SetXTitle("m_{T} + PF MET (GeV)");
   
   TH1F * hDPHI_4l_10 = new TH1F("DPHI_4l_10", "polar angle between 4l and E_{T,miss} after step 10", 3150, 0., 3.15 );
   hDPHI_4l_10->SetXTitle("#DELTA#phi(4l,E_{T,miss})");


   
   TH1F * hN_loose_mu = new TH1F("hN_loose_mu", "N_loose_mu", 30 , 0. , 30. );
   hN_loose_mu->SetXTitle("N_loose_mu");
   TH1F * hN_loose_e = new TH1F("hN_loose_e", "N_loose_e", 30 , 0. , 30. );
   hN_loose_e->SetXTitle("N_loose_e");

   TH1F * hIso_loose_mu = new TH1F("hIso_loose_mu", "Isolation maxima after loose selection ", 2000 , -10. , 10. );
   hIso_loose_mu->SetXTitle("Iso");
   TH1F * hSip_loose_mu = new TH1F("hSip_loose_mu", "Sip maxima after loose selection ",  1000 , -20. , 40. );
   hSip_loose_mu->SetXTitle("Sip");
   TH1F * hIp_loose_mu = new TH1F("hIp_loose_mu", "Ip maxima after loose selection ",  1000 , -20. , 40. );
   hIp_loose_mu->SetXTitle("Ip");

   TH1F * hIso_loose_e = new TH1F("hIso_loose_e", "Isolation maxima after loose selection ", 2000 , -10. , 10. );
   hIso_loose_e->SetXTitle("Iso");
   TH1F * hSip_loose_e = new TH1F("hSip_loose_e", "Sip maxima after loose selection ",  1000 , -20. , 40. );
   hSip_loose_e->SetXTitle("Sip");
   TH1F * hIp_loose_e = new TH1F("hIp_loose_e", "Ip maxima after loose selection ",  1000 , -20. , 40. );
   hIp_loose_e->SetXTitle("Ip");


   TH1F * hN_good_lep = new TH1F("hN_good_lep", "N_good_lep", 30 , 0. , 30. );
   hN_good_lep->SetXTitle("N_good_lep");

   TH1F * hN_good_mu = new TH1F("hN_good_mu", "N_good_mu", 30 , 0. , 30. );
   hN_good_mu->SetXTitle("N_good_mu");
   TH1F * hN_good_ele = new TH1F("hN_good_ele", "N_good_ele", 30 , 0. , 30. );
   hN_good_ele->SetXTitle("N_good_ele");
   TH1F * hN_good_phot = new TH1F("hN_good_phot", "N_good_phot", 30 , 0. , 30. );
   hN_good_phot->SetXTitle("N_good_phot");

   TH1F * hMELA_8 = new TH1F("hMELA_8", "MELA after selection step 8", 300,-0.00166,1.00166 );
   hMELA_8->SetXTitle("MELA discriminant (4mu)");
   TH2F * hMELA_vs_M4l_8 = new TH2F("hMELA_vs_M4l_8", "MELA after selection step 8",1200, 4.5,1204.5,300,-0.00166,1.00166 );
   hMELA_vs_M4l_8->SetXTitle("MELA discriminant (4mu)");

   TH1F * hMELA_9 = new TH1F("hMELA_9", "MELA after selection step 9", 300,-0.00166,1.00166 );
   hMELA_9->SetXTitle("MELA discriminant (4mu)");
   TH2F * hMELA_vs_M4l_9 = new TH2F("hMELA_vs_M4l_9", "MELA after selection step 9",1200, 4.5,1204.5,300,-0.00166,1.00166 );
   hMELA_vs_M4l_9->SetXTitle("MELA discriminant (4mu)");
   
   TH1I * hVBF_PUID = new TH1I("hVBF_PUID", "PUID after step 8", 6,-1,4);
   hVBF_PUID->SetXTitle("PUID VBF");

   TH1F * dR_l_mu = new TH1F("dR_l_mu", "dR of loose mu to closest jet", 100 , 0. , 5. );
   dR_l_mu->SetXTitle("dR");

   TH1F * dR_l_e = new TH1F("dR_l_e", "dR of loose ele to closest jet", 100 , 0. , 5. );
   dR_l_mu->SetXTitle("dR");


   //PFJET Plots
/*    TH1I * hN_PFJET_6 = new TH1I("hN_PFJET_6", "Number of PFJets after step 6", 102, 0, 102);
   hN_PFJET_6->SetXTitle("Number of Jets");
   TH1F * hChg_PFJET_6 = new TH1F("hChg_PFJET_6", "Charge of PFJets after step 6", 50, -10., 10.);
   hChg_PFJET_6->SetXTitle("Charge");
   TH1F * hEt_PFJET_6 = new TH1F("hEt_PFJET_6", "Et of PFJets after step 6", 201, -0.5, 400.5 );
   hEt_PFJET_6->SetXTitle("Et_PFJET (GeV)");
   TH1F * hPt_PFJET_6 = new TH1F("hPt_PFJET_6", "Pt of PFJets after step 6", 201, -0.5, 400.5 );
   hPt_PFJET_6->SetXTitle("pt_PFJET (GeV)");
   TH1F * hEta_PFJET_6 = new TH1F("hEta_PFJET_6", "Eta of PFJets after step 6", 50, -10., 10.);
   hEta_PFJET_6->SetXTitle("eta_PFJET");
   TH1F * hPhi_PFJET_6 = new TH1F("hPhi_PFJET_6", "Phi of PFJets after step 6", 50, -10., 10.);
   hPhi_PFJET_6->SetXTitle("phi_PFJET");

   TH1I * hN_PFJET_8 = new TH1I("hN_PFJET_8", "Number of PFJets after step 8", 102, 0, 102);
   hN_PFJET_8->SetXTitle("Number of Jets");
   TH1F * hChg_PFJET_8 = new TH1F("hChg_PFJET_8", "Charge of PFJets after step 8", 50, -10., 10.);
   hChg_PFJET_8->SetXTitle("Charge");
   TH1F * hEt_PFJET_8 = new TH1F("hEt_PFJET_8", "Et of PFJets after step 8", 201, -0.5, 400.5 );
   hEt_PFJET_8->SetXTitle("Et_PFJET (GeV)");
   TH1F * hPt_PFJET_8 = new TH1F("hPt_PFJET_8", "Pt of PFJets after step 8", 201, -0.5, 400.5 );
   hPt_PFJET_8->SetXTitle("pt_PFJET (GeV)");
   TH1F * hEta_PFJET_8 = new TH1F("hEta_PFJET_8", "Eta of PFJets after step 8", 50, -10., 10.);
   hEta_PFJET_8->SetXTitle("eta_PFJET");
   TH1F * hPhi_PFJET_8 = new TH1F("hPhi_PFJET_8", "Phi of PFJets after step 8", 50, -10., 10.);
   hPhi_PFJET_8->SetXTitle("phi_PFJET");

   TH1I * hN_PFJET_VBF = new TH1I("hN_PFJET_VBF", "Number of PFJets after VBF selection", 102, 0, 102);
   hN_PFJET_VBF->SetXTitle("Number of Jets");
   TH1F * hChg_PFJET_VBF = new TH1F("hChg_PFJET_VBF", "Charge of PFJets after VBF selection", 50, -10., 10.);
   hChg_PFJET_VBF->SetXTitle("Charge");
   TH1F * hEt_PFJET_VBF = new TH1F("hEt_PFJET_VBF", "Et of PFJets after step VBF selection", 201, -0.5, 400.5 );
   hEt_PFJET_VBF->SetXTitle("Et_PFJET (GeV)");
   TH1F * hPt_PFJET_VBF = new TH1F("hPt_PFJET_VBF", "Pt of PFJets after step VBF selection", 201, -0.5, 400.5 );
   hPt_PFJET_VBF->SetXTitle("pt_PFJET (GeV)");
   TH1F * hEta_PFJET_VBF = new TH1F("hEta_PFJET_VBF", "Eta of PFJets after step VBF selection", 50, -10., 10.);
   hEta_PFJET_VBF->SetXTitle("eta_PFJET");
   TH1F * hPhi_PFJET_VBF = new TH1F("hPhi_PFJET_VBF", "Phi of PFJets after step VBF selection", 50, -10., 10.);
   hPhi_PFJET_VBF->SetXTitle("phi_PFJET");
*/   

//Bottom plot
    TH1I * hN_PFJET_6 = new TH1I("hN_PFJET_6", "Number of PFJets after step 6", 102, 0, 102);
   hN_PFJET_6->SetXTitle("Number of Jets");
   TH1F * hChg_PFJET_6 = new TH1F("hChg_PFJET_6", "Charge of PFJets after step 6", 50, -10., 10.);
   hChg_PFJET_6->SetXTitle("Charge");
   TH1F * hEt_PFJET_6 = new TH1F("hEt_PFJET_6", "Et of PFJets after step 6", 201, -0.5, 400.5 );
   hEt_PFJET_6->SetXTitle("Et_PFJET (GeV)");
   TH1F * hPt_PFJET_6 = new TH1F("hPt_PFJET_6", "Pt of PFJets after step 6", 201, -0.5, 400.5 );
   hPt_PFJET_6->SetXTitle("pt_PFJET (GeV)");
   TH1F * hEta_PFJET_6 = new TH1F("hEta_PFJET_6", "Eta of PFJets after step 6", 50, -10., 10.);
   hEta_PFJET_6->SetXTitle("eta_PFJET");
   TH1F * hPhi_PFJET_6 = new TH1F("hPhi_PFJET_6", "Phi of PFJets after step 6", 50, -10., 10.);
   hPhi_PFJET_6->SetXTitle("phi_PFJET");

   TH1F * Mbb_6 = new TH1F("Mbb_6","invariant mass of bottom pair after step 6",50,20,420);
   Mbb_6->SetXTitle("M_{bb} (GeV)");
   TH1F * ptbb_6 = new TH1F("ptbb_6","pt of bottom pair after step 6",50,20,420);
   ptbb_6->SetXTitle("pt_{bb} (GeV)");
   TH1F * bdiscr_5_lead = new TH1F("bdiscr_5_lead","b-tag discr of leading jet after step 5",20,0,1);
   bdiscr_5_lead->SetXTitle("CSV");
   TH1F * bdiscr_5_sub = new TH1F("bdiscr_5_sub","b-tag discr of sub leading jet after step 5",20,0,1);
   bdiscr_5_sub->SetXTitle("CSV");

   TH1F * Mjj_6 = new TH1F("Mjj_6","invariant mass of jet pair after step 6",50,20,420);
   Mjj_6->SetXTitle("M_{jj} (GeV)");  

   TH1F * hN_loose_e_4 = new TH1F("hN_loose_e_4", "N_loose_e_4", 30 , 0. , 30. );
   hN_loose_e_4->SetXTitle("hN_loose_e_4");

   TH1F *mva_ele = new TH1F("mva_ele","mva_ele",200,-1.,1.);
   mva_ele->SetXTitle("mva_ele");
   // end book histo ***
      
   TTree *newtree = new TTree("HZZ4LeptonsAnalysisReduced", "reduced ttree");
   TTree *mettree = new TTree("METRecoil","reduced met tree");
  
   // Add branches to output rootuple 
   Float_t f_weight, f_int_weight, f_pu_weight, f_eff_weight, f_lept1_pt, f_lept1_eta, f_lept1_phi, f_lept1_charge, f_lept1_pfx, f_lept1_sip, f_lept1_mvaid, f_lept2_pt, f_lept2_eta, f_lept2_phi, f_lept2_charge, f_lept2_pfx, f_lept2_sip, f_lept2_mvaid, f_lept3_pt, f_lept3_eta, f_lept3_phi, f_lept3_charge, f_lept3_pfx, f_lept3_sip, f_lept3_mvaid, f_lept4_pt, f_lept4_eta, f_lept4_phi, f_lept4_charge, f_lept4_pfx, f_lept4_sip, f_lept4_mvaid, f_iso_max, f_sip_max, f_Z1mass, f_Z2mass, f_angle_costhetastar, f_angle_costheta1, f_angle_costheta2, f_angle_phi, f_angle_phistar1, f_eta4l, f_pt4l, f_mass4l, f_mass4lErr, f_njets_pass, f_deltajj, f_massjj, f_D_jet, f_jet1_pt, f_jet1_eta, f_jet1_phi, f_jet1_e, f_jet2_pt, f_jet2_eta, f_jet2_phi, f_jet2_e;
   Float_t f_D_bkg_kin,f_D_bkg,f_D_gg,f_D_g4,f_Djet_VAJHU; 
   Float_t f_genmet, f_pfmet,f_mT,f_dphi,f_min_dphi_jet_met,f_max_dphi_jet_met,f_dphi_jet_met;
   Int_t f_lept1_pdgid,f_lept2_pdgid,f_lept3_pdgid,f_lept4_pdgid;
   Int_t f_category,f_Ngood,f_Nbjets,f_Njets,f_NVBFjets,f_NMatchbjets,f_NVHjets;
   Int_t f_run, f_lumi, f_event;
   Float_t f_u1,f_u2,f_z1_pt,ff_weight;
   
   TBranch *b_run= newtree->Branch("f_run", &f_run,"f_run/I");
   TBranch *b_lumi= newtree->Branch("f_lumi", &f_lumi,"f_lumi/I");    
   TBranch *b_event= newtree->Branch("f_event", &f_event,"f_event/I");    
   
   TBranch *b_weight= newtree->Branch("f_weight", &f_weight,"f_weight/F");
   TBranch *b_int_weight= newtree->Branch("f_int_weight", &f_int_weight,"f_int_weight/F");
   TBranch *b_pu_weight= newtree->Branch("f_pu_weight", &f_pu_weight,"f_pu_weight/F");
   TBranch *b_eff_weight= newtree->Branch("f_eff_weight", &f_eff_weight,"f_eff_weight/F");
   TBranch *b_lept1_pt= newtree->Branch("f_lept1_pt", &f_lept1_pt,"f_lept1_pt/F");
   TBranch *b_lept1_eta= newtree->Branch("f_lept1_eta", &f_lept1_eta,"f_lept1_eta/F");
   TBranch *b_lept1_phi= newtree->Branch("f_lept1_phi", &f_lept1_phi,"f_lept1_phi/F");
   TBranch *b_lept1_charge= newtree->Branch("f_lept1_charge", &f_lept1_charge,"f_lept1_charge/F");
   TBranch *b_lept1_pfx= newtree->Branch("f_lept1_pfx", &f_lept1_pfx,"f_lept1_pfx/F");
   TBranch *b_lept1_sip= newtree->Branch("f_lept1_sip", &f_lept1_sip,"f_lept1_sip/F");
   TBranch *b_lept1_pdgid= newtree->Branch("f_lept1_pdgid", &f_lept1_pdgid,"f_lept1_pdgid/I");
   TBranch *b_lept2_pt= newtree->Branch("f_lept2_pt", &f_lept2_pt,"f_lept2_pt/F");
   TBranch *b_lept2_eta= newtree->Branch("f_lept2_eta", &f_lept2_eta,"f_lept2_eta/F");
   TBranch *b_lept2_phi= newtree->Branch("f_lept2_phi", &f_lept2_phi,"f_lept2_phi/F");
   TBranch *b_lept2_charge= newtree->Branch("f_lept2_charge", &f_lept2_charge,"f_lept2_charge/F");
   TBranch *b_lept2_pfx= newtree->Branch("f_lept2_pfx", &f_lept2_pfx,"f_lept2_pfx/F");
   TBranch *b_lept2_sip= newtree->Branch("f_lept2_sip", &f_lept2_sip,"f_lept2_sip/F");
   TBranch *b_lept2_pdgid= newtree->Branch("f_lept2_pdgid", &f_lept2_pdgid,"f_lept2_pdgid/I");
   TBranch *b_lept3_pt= newtree->Branch("f_lept3_pt", &f_lept3_pt,"f_lept3_pt/F");
   TBranch *b_lept3_eta= newtree->Branch("f_lept3_eta", &f_lept3_eta,"f_lept3_eta/F");
   TBranch *b_lept3_phi= newtree->Branch("f_lept3_phi", &f_lept3_phi,"f_lept3_phi/F");
   TBranch *b_lept3_charge= newtree->Branch("f_lept3_charge", &f_lept3_charge,"f_lept3_charge/F");
   TBranch *b_lept3_pfx= newtree->Branch("f_lept3_pfx", &f_lept3_pfx,"f_lept3_pfx/F");
   TBranch *b_lept3_sip= newtree->Branch("f_lept3_sip", &f_lept3_sip,"f_lept3_sip/F");
   TBranch *b_lept3_pdgid= newtree->Branch("f_lept3_pdgid", &f_lept3_pdgid,"f_lept3_pdgid/I");
   TBranch *b_lept4_pt= newtree->Branch("f_lept4_pt", &f_lept4_pt,"f_lept4_pt/F");
   TBranch *b_lept4_eta= newtree->Branch("f_lept4_eta", &f_lept4_eta,"f_lept4_eta/F");
   TBranch *b_lept4_phi= newtree->Branch("f_lept4_phi", &f_lept4_phi,"f_lept4_phi/F");
   TBranch *b_lept4_charge= newtree->Branch("f_lept4_charge", &f_lept4_charge,"f_lept4_charge/F");
   TBranch *b_lept4_pfx= newtree->Branch("f_lept4_pfx", &f_lept4_pfx,"f_lept4_pfx/F");
   TBranch *b_lept4_sip= newtree->Branch("f_lept4_sip", &f_lept4_sip,"f_lept4_sip/F");
   TBranch *b_lept4_pdgid= newtree->Branch("f_lept4_pdgid", &f_lept4_pdgid,"f_lept4_pdgid/I");
   TBranch *b_iso_max= newtree->Branch("f_iso_max", &f_iso_max,"f_iso_max/F");
   TBranch *b_sip_max= newtree->Branch("f_sip_max", &f_sip_max,"f_sip_max/F");
   TBranch *b_Z1mass= newtree->Branch("f_Z1mass", &f_Z1mass,"f_Z1mass/F");
   TBranch *b_Z2mass= newtree->Branch("f_Z2mass", &f_Z2mass,"f_Z2mass/F");
   TBranch *b_angle_costhetastar= newtree->Branch("f_angle_costhetastar", &f_angle_costhetastar,"f_angle_costhetastar/F");
   TBranch *b_angle_costheta1= newtree->Branch("f_angle_costheta1", &f_angle_costheta1,"f_angle_costheta1/F");
   TBranch *b_angle_costheta2= newtree->Branch("f_angle_costheta2", &f_angle_costheta2,"f_angle_costheta2/F");
   TBranch *b_angle_phi= newtree->Branch("f_angle_phi", &f_angle_phi,"f_angle_phi/F");
   TBranch *b_angle_phistar1= newtree->Branch("f_angle_phistar1", &f_angle_phistar1,"f_angle_phistar1/F");
   TBranch *b_pt4l= newtree->Branch("f_pt4l", &f_pt4l,"f_pt4l/F");
   TBranch *b_eta4l= newtree->Branch("f_eta4l", &f_eta4l,"f_eta4l/F");
   TBranch *b_mass4l= newtree->Branch("f_mass4l", &f_mass4l,"f_mass4l/F");
   TBranch *b_mass4lErr= newtree->Branch("f_mass4lErr", &f_mass4lErr,"f_mass4lErr/F");
   TBranch *b_njets_pass= newtree->Branch("f_njets_pass", &f_njets_pass,"f_njets_pass/F");
   TBranch *b_deltajj= newtree->Branch("f_deltajj", &f_deltajj,"f_deltajj/F");
   TBranch *b_massjj= newtree->Branch("f_massjj", &f_massjj,"f_massjj/F");
   TBranch *b_D_jet= newtree->Branch("f_D_jet", &f_D_jet,"f_D_jet/F");
   TBranch *b_jet1_pt= newtree->Branch("f_jet1_pt", &f_jet1_pt,"f_jet1_pt/F");
   TBranch *b_jet1_eta= newtree->Branch("f_jet1_eta", &f_jet1_eta,"f_jet1_eta/F");
   TBranch *b_jet1_phi= newtree->Branch("f_jet1_phi", &f_jet1_phi,"f_jet1_phi/F");
   TBranch *b_jet1_e= newtree->Branch("f_jet1_e", &f_jet1_e,"f_jet1_e/F");
   TBranch *b_jet2_pt= newtree->Branch("f_jet2_pt", &f_jet2_pt,"f_jet2_pt/F");
   TBranch *b_jet2_eta= newtree->Branch("f_jet2_eta", &f_jet2_eta,"f_jet2_eta/F");
   TBranch *b_jet2_phi= newtree->Branch("f_jet2_phi", &f_jet2_phi,"f_jet2_phi/F");
   TBranch *b_jet2_e= newtree->Branch("f_jet2_e", &f_jet2_e,"f_jet2_e/F");
   TBranch *b_D_bkg_kin= newtree->Branch("f_D_bkg_kin", &f_D_bkg_kin,"f_D_bkg_kin/F");
   TBranch *b_D_bkg= newtree->Branch("f_D_bkg", &f_D_bkg,"f_D_bkg/F");
   TBranch *b_D_gg= newtree->Branch("f_D_gg", &f_D_gg,"f_D_gg/F");
   TBranch *b_D_g4= newtree->Branch("f_D_g4", &f_D_g4,"f_D_g4/F");
   TBranch *b_Djet_VAJHU= newtree->Branch("f_Djet_VAJHU", &f_Djet_VAJHU,"f_Djet_VAJHU/F");
   TBranch *b_pfmet= newtree->Branch("f_pfmet", &f_pfmet,"f_pfmet/F");
   TBranch *b_genmet= newtree->Branch("f_genmet", &f_genmet,"f_genmet/F");
   TBranch *b_f_mT= newtree->Branch("f_mT", &f_mT,"f_mT/F");
   TBranch *b_f_dphi= newtree->Branch("f_dphi", &f_dphi,"f_dphi/F");
   TBranch *b_f_category=newtree->Branch("f_category", &f_category, "f_category/I");
   TBranch *b_f_Ngood=newtree->Branch("f_Ngood", &f_Ngood, "f_Ngood/I");
   TBranch *b_f_Nbjets=newtree->Branch("f_Nbjets", &f_Nbjets, "f_Nbjets/I");
   TBranch *b_f_Njets=newtree->Branch("f_Njets", &f_Njets, "f_Njets/I");
   TBranch *b_f_NVBFjets=newtree->Branch("f_NVBFjets", &f_NVBFjets, "f_NVBFjets/I");
   TBranch *b_f_NMatchbjets=newtree->Branch("f_NMatchbjets", &f_NMatchbjets, "f_NMatchbjets/I");
   TBranch *b_f_dphi_jet_met= newtree->Branch("f_dphi_jet_met", &f_dphi_jet_met,"f_dphi_jet_met/F");
   TBranch *b_f_min_dphi_jet_met= newtree->Branch("f_min_dphi_jet_met", &f_min_dphi_jet_met,"f_min_dphi_jet_met/F");
   TBranch *b_f_max_dphi_jet_met= newtree->Branch("f_max_dphi_jet_met", &f_max_dphi_jet_met,"f_max_dphi_jet_met/F");

   TBranch *b_f_u1 = mettree->Branch("f_u1",&f_u1,"f_u1/F");
   TBranch *b_f_u2 = mettree->Branch("f_u2",&f_u2,"f_u2/F");
   TBranch *b_z1_pt = mettree->Branch("f_z1_pt",&f_z1_pt,"f_z1_pt/F");
   TBranch *b_ff_Njets = mettree->Branch("f_Njets",&f_Njets,"f_Njets/F");
   TBranch *b_ff_weight= mettree->Branch("f_weight", &ff_weight,"f_weight/F");

   float newweight=1.;
   
   // New tree with clone of events passing the final selection
   TFile *skimfile = new TFile(eventsOUT,"recreate");
   // Clone tree for final events
//   TTree *finaltree = fChain->CloneTree(0);

   // loop on entries
   
   Long64_t nentries = fChain->GetEntries();

   cout << "\n****************************"  <<endl;
   cout << "Analyzing " << nentries << " entries"  <<endl;     

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;

 // Initialize reduced tree variables
      f_weight=1., f_int_weight=1., f_pu_weight=1., f_eff_weight=1., f_lept1_pt=-999., f_lept1_eta=-999., f_lept1_phi=-999., f_lept1_charge=-999., f_lept1_pfx=-999., f_lept1_sip=-999., f_lept1_mvaid=-999., f_lept2_pt=-999., f_lept2_eta=-999., f_lept2_phi=-999., f_lept2_charge=-999., f_lept2_pfx=-999., f_lept2_sip=-999., f_lept2_mvaid=-999., f_lept3_pt=-999., f_lept3_eta=-999., f_lept3_phi=-999., f_lept3_charge=-999., f_lept3_pfx=-999., f_lept3_sip=-999., f_lept3_mvaid=-999., f_lept4_pt=-999., f_lept4_eta=-999., f_lept4_phi=-999., f_lept4_charge=-999., f_lept4_pfx=-999., f_lept4_sip=-999., f_lept4_mvaid=-999., f_iso_max=-999., f_sip_max=-999., f_Z1mass=-999., f_Z2mass=-999., f_angle_costhetastar=-999., f_angle_costheta1=-999., f_angle_costheta2=-999., f_angle_phi=-999., f_angle_phistar1=-999., f_eta4l=-999., f_pt4l=-999., f_mass4l=-999., f_mass4lErr=-999., f_njets_pass=-999., f_deltajj=-999., f_massjj=-999., f_D_jet=-999., f_jet1_pt=-999., f_jet1_eta=-999., f_jet1_phi=-999., f_jet1_e=-999., f_jet2_pt=-999., f_jet2_eta=-999., f_jet2_phi=-999., f_jet2_e=-999.,f_D_bkg_kin=-999.,f_D_bkg=-999.,f_D_gg=-999.,f_D_g4=-999.,f_Djet_VAJHU=-999.,f_genmet=-999.,f_pfmet=-999.,f_mT=-999.,f_dphi=-999.,f_lept1_pdgid=-999,f_lept2_pdgid=-999,f_lept3_pdgid=-999,f_lept4_pdgid=-999,f_run=-999, f_lumi=-999, f_event=-999, f_category=-999, f_Ngood=-999, f_Nbjets=-999, f_NVBFjets=-999,f_NMatchbjets=-999,f_NVHjets=-999,f_dphi_jet_met=-999., f_min_dphi_jet_met=-999., f_max_dphi_jet_met=-999.; 
      f_u1=-999, f_u2=-999;
      //if (!(Run==1 && LumiSection==2536 && Event==486622)) continue;

      if(jentry%1 == 5000) cout << "Analyzing entry: " << jentry << endl;
      

      if( RECO_NMU > 100 ) RECO_NMU = 100;
      if( RECO_NELE > 100 ) RECO_NELE = 100;
      if( RECO_NPFPHOT > 20 ) RECO_NPFPHOT = 20;
      
      bool debug=false;  //debug flag  -- default false
   
      bool zptweight=false;
      newweight=weight;
      cout << "Starting weight= " << newweight << endl;

      // pileup reweighting 2012 and 2011
      if (DATA_type=="NO" && num_PU_vertices < 0) continue;                                                                                                                                              
      // pileup reweighting 2015
      hPUvertices->Fill(num_PU_vertices,weight);

      double pu_weight=1.;
      if (MC_type == "Spring16"||MC_type == "Summer16"){
	Int_t binx = puweight->GetXaxis()->FindBin(num_PU_vertices);
	if(debug) cout << " bin x= " << binx << " " << puweight->GetBinContent(binx) << endl;	
	pu_weight=double(puweight->GetBinContent(binx));
	
      }      
       
      hPUvertices_ReWeighted->Fill(num_PU_vertices,weight*pu_weight);
      if(debug) cout << "Pileup interations and weight is= " << num_PU_vertices << " " << " and weight= " << pu_weight << endl;  
      
      //if (num_PU_vertices < 0) continue;

      // Changing the weight for pileup
      newweight=weight*pu_weight;
      cout << "Starting weight + pileup = " << newweight << endl;
           
      

      // Weight for MCNLO samples                                                                                      
      if( datasetName.Contains("amcatnlo")) {
        cout << "Reweighting sample of amcatnlo with weight= " << MC_weighting << endl;
        newweight=weight*pu_weight*MC_weighting;
      }

      
      float pFill[11];for(int pf=0;pf<11;pf++)pFill[11]=-999.;

      // ** Step 0:
      // simply number of entries...
      if( debug ) cout << "\n** Step 0: \nAnalyzing entry: " << jentry << " Run: " << Run << " Event: " << Event << " LumiSection: " << LumiSection << endl ;
      ++N_0 ;  // fill counter
      N_0_w=N_0_w+newweight;
      
      // ** Step 0.1:
      // number of 4L (4mu)...
      
     
      bool is2e2mu=false;

      if( isSignal && debug ) cout << "\n ** Step 0.1 (MC truth): "
				   << "\nMC_PDGID[0] " << MC_PDGID[0]
				   << "\nMC_PDGID[1] " << MC_PDGID[1]	
				   << "\nMC_PDGID[2] " << MC_PDGID[2]	
				   << "\nMC_PDGID[3] " << MC_PDGID[3]	
				   << "\nMC_PDGID[4] " << MC_PDGID[4]	
				   << "\nMC_PDGID[5] " << MC_PDGID[5]	
				   << "\nMC_PDGID[6] " << MC_PDGID[6]	
				   << endl ;
/*      
//teleport 1      
      //////////// (VBF) Line Shape Correction///////////
      if ( (isggH || isvbf) && mHgen >=400. && (useLineShape==true || useVBFLineShape==true) ){
	cout << "Applying lineshape correction for masses= " << mHgen << " " << MC_MASS[0] << endl;
	//cout << bincenters_.front() << " " <<  bincenters_.back() << endl;
	if( MC_MASS[0] < bincenters_.front() || MC_MASS[0] >  bincenters_.back() ){ // set weights to 0 if out of range
	  cout << " out of range " << endl;
	  LineShapeWeight = 0.;
	  LineShapeWeightP = 0.;
	  LineShapeWeightM = 0.;
	}
	
	std::vector<double>::iterator low;
	low=lower_bound( bincenters_.begin(), bincenters_.end(),MC_MASS[0] ); 
	int lowindex=(low-  bincenters_.begin());
	//cout << "low " << bincenters_.begin() << endl;
	if(MC_MASS[0] == *low ){//exact match
	  cout << "Exact match " << endl;
	  if (useLineShape==true) (LineShapeWeight) = weightLineShape_[lowindex];
	  if (useVBFLineShape==true) (LineShapeWeight) = weightVBFLineShape_[lowindex]; 
	}
	else{//linear interpolation
	  lowindex--; // lower_bound finds the first element not smaller than X
	  if (useLineShape==true){ 
	    cout << "use LineShape" << endl;
	    LineShapeWeight = weightLineShape_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightLineShape_[lowindex+1]-weightLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	    cout << "LineShape weight= " << LineShapeWeight << endl;
	    LineShapeWeightP = weightLineShapeP_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightLineShapeP_[lowindex+1]-weightLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	    LineShapeWeightM = weightLineShapeM_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightLineShapeM_[lowindex+1]-weightLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	  }
	  if (useVBFLineShape==true){
	    cout << "use VBF LineShape" << endl;
	    LineShapeWeight = weightVBFLineShape_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightVBFLineShape_[lowindex+1]-weightVBFLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	    cout << "VBF LineShape weight= " << LineShapeWeight << endl;
	    LineShapeWeightP = weightVBFLineShapeP_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightVBFLineShapeP_[lowindex+1]-weightVBFLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	    LineShapeWeightM = weightVBFLineShapeM_[lowindex] +(MC_MASS[0]  - bincenters_[lowindex] )*(weightVBFLineShapeM_[lowindex+1]-weightVBFLineShape_[lowindex])/(bincenters_[lowindex+1]-bincenters_[lowindex]);
	  }
	}

	if (useLineShape==true){ 
	  cout<<"Higgs Mass==== "<< MC_MASS[0]  <<" LineShapeWeight==== "<<LineShapeWeight<<endl;       
	  Gen_H_MASS->Fill(MC_MASS[0]);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeighted->Fill(MC_MASS[0],LineShapeWeight);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeightedP->Fill(MC_MASS[0],LineShapeWeightP);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeightedM->Fill(MC_MASS[0],LineShapeWeightM);
	}
	if (useVBFLineShape==true){ 
	  cout<<"Higgs Mass==== "<< MC_MASS[0]  <<" VBFLineShapeWeight==== "<<LineShapeWeight<<endl;       
	  Gen_H_MASS->Fill(MC_MASS[0]);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeighted->Fill(MC_MASS[0],LineShapeWeight);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeightedP->Fill(MC_MASS[0],LineShapeWeightP);
	  if(MC_MASS[0]>10.)Gen_H_MASS_ReWeightedM->Fill(MC_MASS[0],LineShapeWeightM);
	}	

	// Changing the weight for pileup and LineShape
	newweight=weight*pu_weight*LineShapeWeight;
	cout << "Starting weight + pileup + LineShape= " << newweight << endl;
      }
      //teleport1
*/
/*
      if (isSignal){
        if( ( MC_PDGID[3] == 13 && MC_PDGID[4] == -13  &&  MC_PDGID[5] == 11 && MC_PDGID[6] == -11 )
            || ( MC_PDGID[3] == 11 && MC_PDGID[4] == -11  &&  MC_PDGID[5] == 13 && MC_PDGID[6] == -13 )){
          is2e2mu=true;
          ++N_01 ;  // fill counter                                                                                                                                             
          N_01_w=N_01_w+newweight;
        }
        else continue;
	
	
	// ** Step 0.2:
	// events in the ACCEPTANCE:
	// variables contributing: eta & pt
	// NEW only eta cut
	bool isInAcceptance = 1;
	
	for( int i = 3; i  < 7; ++i){
	  
	  if( debug ) cout << "\n ** Step 0.2 (acceptance): "
			   << "\n fabs(MC_ETA[i])" << fabs(MC_ETA[i])	
			   << "\n MC_PT[i]" << MC_PT[i]	
			   << endl ;
	  
          if( fabs(MC_PDGID[i]) == 13 && ( fabs(MC_ETA[i]) >= 2.4) ){
            isInAcceptance = 0;
            break;        
          }
          if( fabs(MC_PDGID[i]) == 11 && ( fabs(MC_ETA[i]) >= 2.5) ){
	    
	    isInAcceptance = 0;
	    break;        
	  }
	  
	}// end for leptons
	
	if( is2e2mu && isInAcceptance )       {
	  ++N_02 ;  // fill counter
	  N_02_w=N_02_w+newweight;
	}
	else continue;	
      }
    */ 
      ++N_1 ;  // fill counter
      N_1_w=N_1_w+newweight;
      
      
      // Effective AREA
      bool tag_2011=false;
      if (DATA_type=="2010" || DATA_type=="2011" || MC_type=="Fall11"){
        tag_2011=true;
      }
      
      
      // Loose lepton identification
      
      int N_loose_mu = 0;
      int N_loose_e = 0;
      double max_Iso_loose_mu = -1 ;
      double max_Sip_loose_mu = -1 ;
      double max_Ip_loose_mu = -1 ;
      double max_Iso_loose_e = -1 ;
      double max_Sip_loose_e = -1 ;
      double max_Ip_loose_e = -1 ;
      
      int* arraysize_mu = new int[1];
      arraysize_mu[0] = RECO_NMU;
      int iL_loose_mu[arraysize_mu[0]];
      delete [] arraysize_mu;

      for( int i = 0; i < RECO_NMU; ++i ){
	iL_loose_mu[i]=-999.;
      }

     //trigger requirement (qier)
     bool dm_trigger = false;
     for( int i = 0; i < 100 ; i++){
        if(RECOMU_dm_MuHLTMatch[i]) dm_trigger = true;
     }
     if(!dm_trigger) continue;

 
      for( int i = 0; i < RECO_NMU; ++i ){

        if( debug ) cout << "\n Lepton i="<< i <<" properties: "
			 << "\nRECOMU_isGlobalMu[i] " << int(RECOMU_isGlobalMu[i])
			 << "\nRECOMU_isTrackerMu[i] " << int(RECOMU_isTrackerMu[i])
			 << "\nRECOMU_PT[i] " << RECOMU_PT[i]
			 << "\nfabs(RECOMU_ETA[i]) " << fabs(RECOMU_ETA[i])
			 << "\nfabs( RECOMU_mubestrkDxy[i] ) " << fabs( RECOMU_mubesttrkDxy[i] )
			 << "\nfabs( RECOMU_mubesttrkDz[i] ) " << fabs( RECOMU_mubesttrkDz[i] )
			 << endl ;
       	
 	if(/* ( RECOMU_isGlobalMu[i] || (RECOMU_isTrackerMu[i] && RECOMU_numberOfMatches[i]>0) )
	    && RECOMU_mubesttrkType[i]!=2
	    && RECOMU_PT[i] > 5. 
	    && fabs(RECOMU_ETA[i]) < 2.4 
	    && fabs(RECOMU_mubesttrkDxy[i]) < .5 && fabs(RECOMU_mubesttrkDz[i]) < 1.*/
              ( RECOMU_isGlobalMu[i] || RECOMU_isTrackerMu[i] ) && RECOMU_isPFMu[i]
              && RECOMU_PT[i] > 5.
              && fabs(RECOMU_ETA[i]) < 2.4
              && fabs(RECOMU_mubesttrkDxy[i]) < .5 && fabs(RECOMU_mubesttrkDz[i]) < 1. //loose muon (qier)
	    ){ 
	  iL_loose_mu[N_loose_mu]=i;
	  ++N_loose_mu ;
	  if( RECOMU_PFX_dB[i] > max_Iso_loose_mu ) max_Iso_loose_mu = RECOMU_PFX_dB[i] ;
	  if( fabs( RECOMU_SIP[i] ) > max_Sip_loose_mu ) max_Sip_loose_mu = fabs( RECOMU_SIP[i] ) ;
	  if( fabs( RECOMU_IP[i] ) > max_Ip_loose_mu ) max_Ip_loose_mu = fabs( RECOMU_IP[i] ) ;

       //test(qier) mark dR to closest jet
        double drmin = 10;
        for(int j=0;j<RECO_PFJET_N;j++){

             if(RECO_PFJET_PT[j]<-100) continue;

             bool goodjet = RECO_PFJET_NHF[j] < 0.99 &&
                      RECO_PFJET_NEF[j] < 0.99 &&
                      RECO_PFJET_CHF[j] < 0.99 &&
                      RECO_PFJET_CEF[j] < 0.99 &&
                      RECO_PFJET_nconstituents[j] > 1 &&
                      RECO_PFJET_NCH[j] > 0;


       if(RECO_PFJET_PT[j]>30. && fabs(RECO_PFJET_ETA[j])<2.4 && goodjet==1){
          double deltaR = sqrt( pow( DELTAPHI( RECO_PFJET_PHI[j] , RECOMU_PHI[i] ),2) + pow(RECO_PFJET_ETA[j] - RECOMU_ETA[i],2) );
         if(deltaR<drmin) drmin=deltaR;
       }
     }
      dR_l_mu->Fill(drmin,newweight);
     //end of test

	}
	
      } // end loop on muons

      
      int* arraysize_e = new int[1];
      arraysize_e[0] = RECO_NELE;
      int iL_loose_e[arraysize_e[0]];
      delete [] arraysize_e;

      for( int i = 0; i < RECO_NELE; ++i ){
	iL_loose_e[i]=-999.;
      }

      for( int i = 0; i < RECO_NELE; ++i ){
	
        if( debug ) cout << "\n Lepton i="<< i <<" properties: "
			 << "\nRECOELE_PT[i] " << RECOELE_PT[i]
			 << "\nfabs(RECOELE_ETA[i]) " << fabs(RECOELE_ETA[i])
			 << "\nfabs( RECOELE_gsftrack_dxy[i] ) " << fabs( RECOELE_gsftrack_dxy[i] )
			 << "\nfabs( RECOELE_gsftrack_dz[i] ) " << fabs( RECOELE_gsftrack_dz[i] )
			 << endl ;
       	
 	if( RECOELE_PT[i] > 10. 
	    && fabs(RECOELE_ETA[i]) < 2.5 
	    // && RECOELE_gsftrack_expected_inner_hits[i]<=1  not used anymore
	    && fabs(RECOELE_gsftrack_dxy[i]) < .5 
	    && fabs(RECOELE_gsftrack_dz[i]) < 1. 
	    ) {	  
	  iL_loose_e[N_loose_e]=i;
	  ++N_loose_e ;
	  if( RECOELE_PFX_rho[i] > max_Iso_loose_e ) max_Iso_loose_e = RECOELE_PFX_rho[i] ;
	  if( fabs( RECOELE_SIP[i] ) > max_Sip_loose_e ) max_Sip_loose_e = fabs( RECOELE_SIP[i] ) ;
	  if( fabs( RECOELE_IP[i] ) > max_Ip_loose_e ) max_Ip_loose_e = fabs( RECOELE_IP[i] ) ;

       //test(qier) mark dR to closest jet
        double drmin = 10;
        for(int j=0;j<RECO_PFJET_N;j++){

             if(RECO_PFJET_PT[j]<-100) continue;

             bool goodjet = RECO_PFJET_NHF[j] < 0.99 &&
                      RECO_PFJET_NEF[j] < 0.99 &&
                      RECO_PFJET_CHF[j] < 0.99 &&
                      RECO_PFJET_CEF[j] < 0.99 &&
                      RECO_PFJET_nconstituents[j] > 1 &&
                      RECO_PFJET_NCH[j] > 0;


       if(RECO_PFJET_PT[j]>30. && fabs(RECO_PFJET_ETA[j])<2.4 && goodjet==1){
          double deltaR = sqrt( pow( DELTAPHI( RECO_PFJET_PHI[j] , RECOELE_PHI[i] ),2) + pow(RECO_PFJET_ETA[j] - RECOELE_ETA[i],2) );
         if(deltaR<drmin) drmin=deltaR;
       }
     }
      dR_l_e->Fill(drmin,newweight);
     //end of test

	}
	
      }// end loop on electrons
      
      hN_loose_mu->Fill( N_loose_mu,newweight );
      hN_loose_e->Fill( N_loose_e,newweight );
      hIso_loose_mu->Fill( max_Iso_loose_mu,newweight);
      hSip_loose_mu->Fill( max_Sip_loose_mu,newweight );
      hIp_loose_mu->Fill( max_Ip_loose_mu,newweight );
      hIso_loose_e->Fill( max_Iso_loose_e,newweight );
      hSip_loose_e->Fill( max_Sip_loose_e,newweight );
      hIp_loose_e->Fill( max_Ip_loose_e,newweight );
      
      // Electron Cross Cleaning  -- eles separated from muons (deltaR > 0.05)
      
      for(int e = 0; e < RECO_NELE; ++e)
      	for(int mu = 0; mu < RECO_NMU; ++mu){
	  
	  if(/*(RECOMU_isPFMu[mu] || (RECOMU_isTrackerHighPtMu[mu] && RECOMU_PT[mu] > 200.))
	      && (RECOMU_isGlobalMu[mu] || (RECOMU_isTrackerMu[mu] && RECOMU_numberOfMatches[mu]>0))
	      && RECOMU_mubesttrkType[mu]!=2
	      && RECOMU_PT[mu] > 5. 
	      && fabs(RECOMU_ETA[mu]) < 2.4 
	      && fabs(RECOMU_mubesttrkDxy[mu]) < .5 && fabs(RECOMU_mubesttrkDz[mu]) < 1. 
	      && fabs(RECOMU_SIP[mu])<4. // TightID + SIP cut*/
 //              RECOMU_isMedium[mu] &&//mediumID(qier) 
              ( RECOMU_isGlobalMu[mu] || RECOMU_isTrackerMu[mu] ) && RECOMU_isPFMu[mu] 
              && RECOMU_PT[mu] > 5. 
              && fabs(RECOMU_ETA[mu]) < 2.4 
              && fabs(RECOMU_mubesttrkDxy[mu]) < .5 && fabs(RECOMU_mubesttrkDz[mu]) < 1. //loose muon (qier)
	      );
	  else continue;
	  
	  double deltaR = sqrt( pow( DELTAPHI( RECOMU_PHI[mu] , RECOELE_PHI[e] ),2) + pow(RECOMU_ETA[mu] - RECOELE_ETA[e],2) );
	  
	  if( deltaR <= 0.05 ){
	    
	    if( debug )cout << "Electrom not passing the cross cleaning" << endl;
	    
	    RECOELE_PT[e]  = -0.01;
	    RECOELE_ETA[e] = -99.;
	    RECOELE_PHI[e] = -99.;
	    RECOELE_SIP[e] = -99.;
	  }
	}
      
                  
      // Lepton identification -- no iso
      
      int iL[8]= { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1};
      
      int N_good = 0 ;
      
      for( int i = 0; i < RECO_NMU; ++i ){
	
        if( debug ) cout << "\n Lepton i="<< i <<" properties: "
			 << "\nRECOMU_isPFMu[i] " << int(RECOMU_isPFMu[i])
			 << "\nRECOMU_isGlobalMu[i] " << int(RECOMU_isGlobalMu[i])
			 << "\nRECOMU_isTrackerMu[i] " << int(RECOMU_isTrackerMu[i])
			 << "\nRECOMU_PT[i] " << RECOMU_PT[i]
			 << "\nfabs(RECOMU_ETA[i]) " << fabs(RECOMU_ETA[i])
			 << "\nRECOMU_PFX_dB[i] " << RECOMU_PFX_dB[i]
			 << "\nfabs( RECOMU_SIP[i] ) " << fabs( RECOMU_SIP[i] )
			 << "\nfabs( RECOMU_mubesttrkDxy[i] ) " << fabs( RECOMU_mubesttrkDxy[i] )
			 << "\nfabs( RECOMU_mubesttrkDz[i] ) " << fabs( RECOMU_mubesttrkDz[i] )
			 << endl ;
	
       	// Tight muons
 	if( /*(RECOMU_isPFMu[i] || (RECOMU_isTrackerHighPtMu[i] && RECOMU_PT[i] > 200.))
	    && ( RECOMU_isGlobalMu[i] || (RECOMU_isTrackerMu[i] && RECOMU_numberOfMatches[i]>0))
	    && RECOMU_mubesttrkType[i]!=2	 
	    && RECOMU_PT[i] > 5. 
	    && fabs(RECOMU_ETA[i]) < 2.4 
	    && fabs(RECOMU_mubesttrkDxy[i]) < .5 && fabs(RECOMU_mubesttrkDz[i]) < 1.//tight muon */
 //             RECOMU_isMedium[i] &&//mediumID(qier)
              ( RECOMU_isGlobalMu[i] || RECOMU_isTrackerMu[i] ) && RECOMU_isPFMu[i]
              && RECOMU_PT[i] > 5.
              && fabs(RECOMU_ETA[i]) < 2.4
              && fabs(RECOMU_mubesttrkDxy[i]) < .5 && fabs(RECOMU_mubesttrkDz[i]) < 1. //loose muon (qier)
        
	    ){

          Double_t Pt = RECOMU_PT[i];
          Double_t Eta = RECOMU_ETA[i];
          Int_t Q = int(RECOMU_CHARGE[i]);
          Double_t Phi = RECOMU_PHI[i];
          Double_t nl = RECOMU_mutrktrackerLayersWithMeasurement[i];
          if(debug) cout << "Q=" << Q << " Pt=" << Pt << " Eta=" << Eta << " Phi=" << Phi << " nl=" << nl << endl;
          if( MC_type == "Spring16" && DATA_type == "NO"){	 
          double u1 = gRandom->Rndm();
          double u2 = gRandom->Rndm();
          double mcSF = rc.kScaleAndSmearMC(Q,Pt,Eta,Phi,nl,u1,u2);          
          if(debug) cout << "calibration weight = " << mcSF << endl;
          RECOMU_PT[i]=RECOMU_PT[i]*mcSF;
          }
        if( MC_type == "NO" && DATA_type == "2016"){
          double dataSF = rc.kScaleDT(Q,Pt,Eta,Phi);
          RECOMU_PT[i]=RECOMU_PT[i]*dataSF;
          if(debug) cout << "calibration weight = " << dataSF << endl;
        }

 
	  iL[ N_good ] = i ;
	  ++N_good ;	  
	}
      } // end loop on muons
      
      hN_good_mu->Fill( N_good,newweight );
      
      if( debug ) cout << "\nLeptons' indeces: "
		       << "\niL[0]: " << iL[0]
		       << "\niL[1]: " << iL[1]
		       << "\niL[2]: " << iL[2]
		       << "\niL[3]: " << iL[3]
		       << "\niL[4]: " << iL[4]
		       << "\niL[5]: " << iL[5]
		       << "\niL[6]: " << iL[6]
		       << "\niL[7]: " << iL[7]
		       << "\nNumber of good muons: " << N_good
		       << endl ;
      

    
      
      /// *** FSR
      // Photon identification & cleaning
      // ele identification is also needed
      
      //FSR photon identifications, will be used with MELA later
      int FSR_Z1_photid=-1;
      int FSR_Z2_photid=-1;
      int FSR_Z1_lepid=-1;
      int FSR_Z2_lepid=-1;

      //electrons:
      
      int Ne_good = 0 ;
      int iLe[8]= { -1 , -1 , -1 , -1 , -1 , -1 , -1 , -1}; //electrons
     //test qier 
      int Ne_loose_4=0;


      for( int i = 0; i < RECO_NELE; ++i ){

        if( debug ) cout << "\n Electron i="<< i <<" properties: "
      		  << "\nRECOELE_PT[i] " << RECOELE_PT[i]
      		  << "\nfabs(RECOELE_ETA[i]) " << fabs(RECOELE_ETA[i])
		  << "\nfabs(RECOELE_scl_Eta[i]) " << fabs(RECOELE_scl_Eta[i])
      		  << "\nRECOELE_PFX_rho[i] " << RECOELE_PFX_rho[i]
      		  << "\nfabs( RECOELE_SIP[i] ) " << fabs( RECOELE_SIP[i] )
      		  << "\nRECOELE_mvaNonTrigV0[i] " << RECOELE_mvaNonTrigV0[i]
		  << "\nfabs( RECOELE_gsftrack_dxy[i] ) " << fabs( RECOELE_gsftrack_dxy[i] )
      		  << "\nfabs( RECOELE_gsftrack_dz[i] ) " << fabs( RECOELE_gsftrack_dz[i] )
		  << endl ;
       	
 	if( RECOELE_PT[i] > 10. && fabs(RECOELE_ETA[i]) < 2.5 );
	  // && RECOELE_gsftrack_expected_inner_hits[i]<=1 ) /* ok */ ;
	else continue ;

       //test qier	
        Ne_loose_4++;
        mva_ele->Fill(RECOELE_mvaNonTrigV0[i],newweight);

	bool BDT_ok = 0; // Spring16 with CMSSW_8_0_x
/*
	if( RECOELE_PT[i] > 7. &&  RECOELE_PT[i] <= 10. ){
		if( fabs(RECOELE_scl_Eta[i]) < .8 && RECOELE_mvaNonTrigV0[i] > -0.211 ) BDT_ok = 1 ;
		if( ( fabs(RECOELE_scl_Eta[i]) >= .8 && fabs(RECOELE_scl_Eta[i]) < 1.479 )
						 && RECOELE_mvaNonTrigV0[i] > -0.396 ) BDT_ok = 1 ;
		if( fabs(RECOELE_scl_Eta[i]) >= 1.479 && RECOELE_mvaNonTrigV0[i] > -0.215 ) BDT_ok = 1 ;
	}
	else { 
		if( fabs(RECOELE_scl_Eta[i]) < .8 && RECOELE_mvaNonTrigV0[i] > -0.870 ) BDT_ok = 1 ;
		if( ( fabs(RECOELE_scl_Eta[i]) >= .8 && fabs(RECOELE_scl_Eta[i]) <= 1.479 )
						 && RECOELE_mvaNonTrigV0[i] > -0.838 ) BDT_ok = 1 ;
		if( fabs(RECOELE_scl_Eta[i]) > 1.479 && RECOELE_mvaNonTrigV0[i] > -0.763 ) BDT_ok = 1 ;
	}	
*/
        //qier chenge to wp90
        if( fabs(RECOELE_scl_Eta[i]) < .8 && RECOELE_mvaTrigV0[i] > 0.837 ) BDT_ok = 1 ;
        if( fabs(RECOELE_scl_Eta[i]) > .8 && RECOELE_mvaTrigV0[i] > 0.715 ) BDT_ok = 1 ;
	if( !BDT_ok ) continue ;
	
	if( fabs(RECOELE_gsftrack_dxy[i]) < .5 
	 && fabs(RECOELE_gsftrack_dz[i])  < 1. ) /* ok */ ;
	else continue ; 
		
	iLe[ Ne_good ] = i ;
	++Ne_good ;

      }// end loop on electrons
      //test qier
      hN_loose_e_4->Fill(Ne_loose_4,newweight);

      hN_good_ele->Fill( Ne_good,newweight );
      hN_good_lep->Fill( N_good + Ne_good,newweight );


      if( debug ) cout << "\n Electrons' indeces: "
 		  << "\niLe[0]: " << iLe[0]
  		  << "\niLe[1]: " << iLe[1]
 		  << "\niLe[2]: " << iLe[2]
		  << "\niLe[3]: " << iLe[3]
 		  << "\niLe[4]: " << iLe[4]
  		  << "\niLe[5]: " << iLe[5]
 		  << "\niLe[6]: " << iLe[6]
		  << "\niLe[7]: " << iLe[7]
		  << "\nNumber of good eles: " << Ne_good
		  << endl ;
            
      // Define a new isolation array to allocate the contribution of photons
      // float RECOMU_PFX_dB_new[100],RECOELE_PFX_rho_new[100];
      for (int i=0;i<100;i++){
	RECOMU_PFX_dB_new[i]=RECOMU_PFX_dB[i];
	RECOELE_PFX_rho_new[i]=RECOELE_PFX_rho[i];	
      }
      //


      // photon definition & cleaning:
      int iLp[30];
      	for( int i = 0 ; i < 30 ; ++i )iLp[i] = -1;
      
      int Nphotons = 0;

      for( int i = 0; i < RECO_NPFPHOT; ++i ){
	
        if( debug ) cout << "\n Photon i="<< i <<" properties: "
			 << "\n RECOPFPHOT_PT[i] " << RECOPFPHOT_PT[i]
			 << "\n fabs(RECOPFPHOT_ETA[i]) " << fabs(RECOPFPHOT_ETA[i])
			 << "\n RECOPFPHOT_PHI[i] " << RECOPFPHOT_PHI[i]
			 << "\n RECOPFPHOT_PFX_rho[i] " << RECOPFPHOT_PFX_rho[i]
			 << endl ;
	
	if ( RECOPFPHOT_PT[i] > 2. && fabs(RECOPFPHOT_ETA[i]) < 2.4 && RECOPFPHOT_PFX_rho[i]<1.8) {
	  
	  bool is_clean = 1;
	  
	  // cleaning
	  for(int e = 0; e < N_loose_e; ++e){
  	    if (fabs( RECOELE_SIP[iL_loose_e[e]])>=4.) continue;  // loose ID + SIP cut	    
	    double deltaPhi = DELTAPHI( RECOPFPHOT_PHI[i] , RECOELE_scl_Phi[iL_loose_e[e]] ) ;
	    double deltaEta = fabs( RECOPFPHOT_ETA[i] - RECOELE_scl_Eta[iL_loose_e[e]] );
	    double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[i] , RECOELE_scl_Phi[iL_loose_e[e]] ),2) + pow(RECOPFPHOT_ETA[i] - RECOELE_scl_Eta[iL_loose_e[e]],2) );
	    cout << "debug: " << RECOELE_PT[iL_loose_e[e]] << " " << deltaPhi << " " << deltaEta << " " << deltaR << endl;
	    if( ( fabs(deltaPhi) < 2 && fabs(deltaEta) < 0.05 ) || deltaR <= 0.15 ){		  
	      if( debug )cout << "Photon not passing the electron cleaning" << endl;	
	      is_clean = 0;	  
	      
	    }
	  } // end loop on eles		             	
	  
	  if( !is_clean ) continue ;
	  
	  
	  iLp[ Nphotons ] = i ;
	  ++Nphotons ;
	  
	}
      }// end loop on photons
      
      hN_good_phot->Fill( Nphotons,newweight );
      
      if( debug ) cout << "Photons' indeces: "
		       << "\niLp[0]: " << iLp[0]
		       << "\niLp[1]: " << iLp[1]
		       << "\niLp[2]: " << iLp[2]
		       << "\niLp[3]: " << iLp[3]
		       << "\niLp[4]: " << iLp[4]
		       << "\niLp[5]: " << iLp[5]
		       << "\niLp[6]: " << iLp[6]
		       << "\niLp[7]: " << iLp[7]
		       << "\nNumber of good photons: " << Nphotons
		       << endl ;
      
      
      // assign to each photon the closest lepton
      int iLp_l[30];
      for( int i = 0 ; i < 30 ; ++i )iLp_l[i] = -1;
      int iLp_tagEM[30];
      for( int i = 0 ; i < 30 ; ++i )iLp_tagEM[i] = -1;  // tag  0: mu  1: ele
      
      float RECOPFPHOT_DR[30];
      for( int i = 0 ; i < 30 ; ++i ) RECOPFPHOT_DR[i] = -999; 

      for( int i = 0; i < Nphotons; ++i ){
	
	double min_deltaR = 1000;
	int  l_min_deltaR = -1;
	int  tag_min_deltaR = -1;   // 0: mu  1: ele
	
	for(int l = 0; l < N_loose_mu; ++l){ // loop on muons
	  if (fabs(RECOMU_SIP[iL_loose_mu[l]])>=4.) continue;  //loose ID + SIP cut
	  double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[i]] , RECOMU_PHI[iL_loose_mu[l]] ),2) + pow(RECOPFPHOT_ETA[iLp[i]] - RECOMU_ETA[iL_loose_mu[l]],2) );
	  cout << "DeltaR= " << deltaR << " " <<  deltaR/pow(RECOPFPHOT_PT[iLp[i]],2) << endl;
	  if(!(deltaR < 0.5 && deltaR/pow(RECOPFPHOT_PT[iLp[i]],2)<0.012) ) continue;
	  if( deltaR<min_deltaR) { // the closest lepton
	    cout << "Possible candidate of photon with pT= " << RECOPFPHOT_PT[iLp[i]] << " associated to a muon with pT= " << RECOMU_PT[iL_loose_mu[l]]<< endl;
	    min_deltaR = deltaR;
	    l_min_deltaR = l;
	    tag_min_deltaR = 0;
	  }
	  
	}//end loop on muons  
	
	for(int l = 0; l < N_loose_e; ++l){ // loop on electrons
	  if (fabs(RECOELE_SIP[iL_loose_e[l]])>=4.) continue;  //loose ID + SIP cut
	  double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[i]] , RECOELE_PHI[iL_loose_e[l]] ),2) + pow(RECOPFPHOT_ETA[iLp[i]] - RECOELE_ETA[iL_loose_e[l]],2) );
	  cout << "DeltaR= " << deltaR << " " <<  deltaR/pow(RECOPFPHOT_PT[iLp[i]],2) << endl;
	  if(!(deltaR < 0.5 && deltaR/pow(RECOPFPHOT_PT[iLp[i]],2)<0.012) ) continue;
	  if( deltaR<min_deltaR) { // the closest lepton
	    cout << "Possible candidate of photon with pT= " << RECOPFPHOT_PT[iLp[i]] << " associated to an electron with pT= " << RECOELE_PT[iL_loose_e[l]]<< endl;
	    min_deltaR = deltaR;
	    l_min_deltaR = l;
	    tag_min_deltaR = 1;
	  }
	  
	}//end loop on electrons  

	
	if( min_deltaR < 0.5 ){
	  if (tag_min_deltaR==0) iLp_l[ i ] = iL_loose_mu[l_min_deltaR];
	  if (tag_min_deltaR==1) iLp_l[ i ] = iL_loose_e[l_min_deltaR];
	  iLp_tagEM[ i ] = tag_min_deltaR;
	  RECOPFPHOT_DR[iLp[i]]=min_deltaR; 	
	}

      }
      
      if( debug ) cout << "Indeces of loose leptons associated to photons: "
		       << "\niLp_l[0]: " << iLp_l[0]
		       << "\niLp_l[1]: " << iLp_l[1]
		       << "\niLp_l[2]: " << iLp_l[2]
		       << "\niLp_l[3]: " << iLp_l[3]
		       << "\niLp_l[4]: " << iLp_l[4]
		       << "\niLp_l[5]: " << iLp_l[5]
		       << "\niLp_l[6]: " << iLp_l[6]
		       << "\niLp_l[7]: " << iLp_l[7]
		       << endl ;
      
      if( debug ) cout << "Tag of leptons associated to photons: (0: mu , 1:ele)"
 		  << "\niLp_tagEM[0]: " << iLp_tagEM[0]
  		  << "\niLp_tagEM[1]: " << iLp_tagEM[1]
 		  << "\niLp_tagEM[2]: " << iLp_tagEM[2]
		  << "\niLp_tagEM[3]: " << iLp_tagEM[3]
 		  << "\niLp_tagEM[4]: " << iLp_tagEM[4]
  		  << "\niLp_tagEM[5]: " << iLp_tagEM[5]
 		  << "\niLp_tagEM[6]: " << iLp_tagEM[6]
		  << "\niLp_tagEM[7]: " << iLp_tagEM[7]
		  << endl ;


      // Multiple photons associated to the same lepton: the lowest-ΔR(γ,l)/ETγ2 has to be selected.
      double min_deltaR_ET2=1000;
      int p_min_deltaR_ET2=-1;

      for(int l = 0; l < N_loose_mu; ++l){ // loop on muons
	if (fabs(RECOMU_SIP[iL_loose_mu[l]])>=4.) continue; //loose ID + SIP cut
	min_deltaR_ET2=1000;
	p_min_deltaR_ET2=-1;
	
	for( int p = 0; p < Nphotons; ++p ){
	  if( iLp_l[ p ] == iL_loose_mu[l] && iLp_tagEM[ p ] == 0 )  {
	    cout <<  "index muon" << iL_loose_mu[l] << endl;
	    double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[p]] , RECOMU_PHI[iL_loose_mu[l]] ),2) + pow(RECOPFPHOT_ETA[iLp[p]] - RECOMU_ETA[iL_loose_mu[l]],2) );
	    double deltaR_ET2 = deltaR/pow(RECOPFPHOT_PT[iLp[p]],2);
	    if (deltaR_ET2<min_deltaR_ET2) {
	      min_deltaR_ET2=deltaR_ET2;
	      RECOPFPHOT_DR[iLp[p]]=deltaR;
	      p_min_deltaR_ET2=p;
	    }
	  }
	}
	
	if (p_min_deltaR_ET2!=-1){
	  for( int p = 0; p < Nphotons; ++p ){
	    if( iLp_l[ p ] == iL_loose_mu[l] && iLp_tagEM[ p ] == 0 )  {
	      if (p!=p_min_deltaR_ET2){
		iLp_l[ p ] = -1;
		iLp_tagEM[ p ] = -1;
	      }
	    }
	  }
	}
	
      }

   
      
      //
      min_deltaR_ET2=1000;
      p_min_deltaR_ET2=-1;
      
      for(int l = 0; l < N_loose_e; ++l){ // loop on electrons
	if (fabs(RECOELE_SIP[iL_loose_e[l]])>=4.) continue; //loose ID + SIP cut
	min_deltaR_ET2=1000;
	p_min_deltaR_ET2=-1;
	
	for( int p = 0; p < Nphotons; ++p ){
	  if( iLp_l[ p ] == iL_loose_e[l] && iLp_tagEM[ p ] == 1 )  {
	    cout <<  "index electron" << iL_loose_e[l] << endl;
	    double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[p]] , RECOELE_PHI[iL_loose_e[l]] ),2) + pow(RECOPFPHOT_ETA[iLp[p]] - RECOELE_ETA[iL_loose_e[l]],2));
	    double deltaR_ET2 = deltaR/pow(RECOPFPHOT_PT[iLp[p]],2);
	    cout << " deltaR_ET2= " << deltaR_ET2 <<endl;
	    if (deltaR_ET2<min_deltaR_ET2){
	      min_deltaR_ET2=deltaR_ET2;
	      RECOPFPHOT_DR[iLp[p]]=deltaR;
	      p_min_deltaR_ET2=p;
	      cout << " p_min_deltaR_ET2= " << p_min_deltaR_ET2 <<endl;
	    }
	  }	  
	}
	
	if (p_min_deltaR_ET2!=-1){
	  for( int p = 0; p < Nphotons; ++p ){
	    if( iLp_l[ p ] == iL_loose_e[l] && iLp_tagEM[ p ] == 1 )  {
	      if (p!=p_min_deltaR_ET2){
		iLp_l[ p ] = -1;
		iLp_tagEM[ p ] = -1;
	      }
	    }
	  }	  
	}
	
      }	
     
      
      if( debug ) cout << "Indeces of loose leptons associated to the photon with lowest DeltaR/ET2: "
		       << "\niLp_l[0]: " << iLp_l[0]
		       << "\niLp_l[1]: " << iLp_l[1]
		       << "\niLp_l[2]: " << iLp_l[2]
		       << "\niLp_l[3]: " << iLp_l[3]
		       << "\niLp_l[4]: " << iLp_l[4]
		       << "\niLp_l[5]: " << iLp_l[5]
		       << "\niLp_l[6]: " << iLp_l[6]
		       << "\niLp_l[7]: " << iLp_l[7]
		       << endl ;
      
      if( debug ) cout << "Tag of leptons associated to the photon with lowest DetaR/ET2: (0: mu , 1:ele)"
		       << "\niLp_tagEM[0]: " << iLp_tagEM[0]
		       << "\niLp_tagEM[1]: " << iLp_tagEM[1]
		       << "\niLp_tagEM[2]: " << iLp_tagEM[2]
		       << "\niLp_tagEM[3]: " << iLp_tagEM[3]
		       << "\niLp_tagEM[4]: " << iLp_tagEM[4]
		       << "\niLp_tagEM[5]: " << iLp_tagEM[5]
		       << "\niLp_tagEM[6]: " << iLp_tagEM[6]
		       << "\niLp_tagEM[7]: " << iLp_tagEM[7]
		       << endl ;

      
      for(int i=0.;i<Nphotons;i++) {
	if (iLp_l[i]!=-1 && iLp_tagEM[i]==0) cout << "There is photon with pT= " << RECOPFPHOT_PT[iLp[i]] << " attached to a muon with pT= " << RECOMU_PT[iLp_l[i]] << endl;
	if (iLp_l[i]!=-1 && iLp_tagEM[i]==1) cout << "There is photon with pT= " << RECOPFPHOT_PT[iLp[i]] << " attached to an electron with pT= " << RECOELE_PT[iLp_l[i]] << endl;
      };

       // Exclude that photon from the isolation cone all leptons in the event passing loose ID + SIP cut if it was in the isolation cone and outside the isolation veto (ΔR>0.01 for muons and (ele->supercluster()->eta() < 1.479 || dR > 0.08) for electrons
      
      if(debug) cout << "Rho for electron pileup isolation correction is= " << RHO_ele << endl;
      double EffectiveArea=-9999.;

	    
      for(int i=0.;i<Nphotons;i++) {
	if (iLp_l[i]==-1) continue;
	
	for(int e = 0; e < N_loose_e; ++e){
	  //if(!( iLp_l[i] == iL_loose_e[e] && iLp_tagEM[i] == 1 ) ) continue;
	  if (fabs( RECOELE_SIP[iL_loose_e[e]])>=4.) continue;
	  //double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[i]] , RECOELE_scl_Phi[iL_loose_e[e]] ),2) + pow(RECOPFPHOT_ETA[iLp[i]] - RECOELE_scl_Eta[iL_loose_e[e]],2) );
	  double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[i]] , RECOELE_PHI[iL_loose_e[e]] ),2) + pow(RECOPFPHOT_ETA[iLp[i]] - RECOELE_ETA[iL_loose_e[e]],2) );
	  cout << "deltaR for photon subtraction= " << deltaR << endl;
	  if( deltaR<=0.3 && (RECOELE_scl_Eta[iL_loose_e[e]]< 1.479 || deltaR>0.08) ){ // 0.3 in 76x              
	    if( debug )cout << "Subtracting the photon isolation from the electron isolation value " << endl;
	    
	    EffectiveArea=EAele(iL_loose_e[e],tag_2011);
	    RECOELE_PFX_rho_new[iL_loose_e[e]]=
              (RECOELE_PFchHad[iL_loose_e[e]]+
               max(0.,RECOELE_PFneuHad[iL_loose_e[e]]+
                   (RECOELE_PFphoton[iL_loose_e[e]]-RECOPFPHOT_PT[iLp[i]] )-
                   max(RHO_ele,0.0)*(EffectiveArea)))/RECOELE_PT[iL_loose_e[e]];	    
	  }
	} // end loop on ele
	
	for(int l = 0; l < N_loose_mu; ++l){ // loop on muons
	  //if(!( iLp_l[i] == iL_loose_mu[l] && iLp_tagEM[i] == 0 ) ) continue;
          if (fabs(RECOMU_SIP[iL_loose_mu[l]])>=4.) continue;
          double deltaR = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[i]] , RECOMU_PHI[iL_loose_mu[l]] ),2) + pow(RECOPFPHOT_ETA[iLp[i]] - RECOMU_ETA[iL_loose_mu[l]],2) );
	  cout << "deltaR for photon subtraction= " << deltaR << endl;
	  if( deltaR<=0.3 && deltaR>0.01){ // 0.3 is the isolation cone for muons in 76x
	    if( debug )cout << "Subtracting the photon isolation from the muon isolation value " << endl;
	    
	    RECOMU_PFX_dB_new[iL_loose_mu[l]]=
              (RECOMU_PFchHad[iL_loose_mu[l]]+
               max(0.,RECOMU_PFneuHad[iL_loose_mu[l]]+
                   (RECOMU_PFphoton[iL_loose_mu[l]]-RECOPFPHOT_PT[iLp[i]] )-
                   0.5*RECOMU_PFPUchAllPart[iL_loose_mu[l]]))/RECOMU_PT[iL_loose_mu[l]];
	    
	  }
	} // end loop on mu
	
	
	
      }	
      
      
      // *** end FSR
      
      
      // **** Step 3:
      struct candidateZ {
	float massvalue;
	int ilept1;
	float pt1;
	float isol1;
	bool ilept1_FSR;
	float eta1;
	float phi1;
	int charge1;
	int charge2;
	int ilept2;
	float pt2;
	float isol2;
	bool ilept2_FSR;
	float eta2;
	float phi2;
	float pxZ;
	float pyZ;
	float pzZ;
	float EZ;
	bool withFSR;
	float ptFSR;
	int tag;
      };

      vector<candidateZ> Zcandvector;
      Zcandvector.clear();
      vector<candidateZ> Zcandisolvector;
      Zcandisolvector.clear();

      // a) pair #1: mass closest to Z1
      // b) mLL in ] 40,120 [
      if( debug ) cout  << "\nStep 3: Number of good leptons: " << N_good+Ne_good << endl;
 
      if( N_good + Ne_good < 2 ) continue ; 	
      ++N_2 ;  // fill counter
      N_2_w=N_2_w+newweight;

      int Zxx_tag = 0;    // 1: Zmumu  ,  2: Zee

      int i1 = -1; //index of the first lepton (from Z1)
      int j1 = -1; //index of the second lepton (from Z1)
      int pi1 = -1; 
      int pj1 = -1;
      
      bool has_FSR_Z1 = 0;
      TLorentzVector Lepton1,Lepton2,DiLepton,LeptonCorrection;

      for(int i = 0; i < N_good; ++i){
        for(int j = i + 1; j < N_good; ++j){
//	  if (fabs(RECOMU_SIP[iL[i]])>=4.) continue; // SIP cut (remove qier)
//	  if (fabs(RECOMU_SIP[iL[j]])>=4.) continue;
	  if (fabs(RECOMU_PFX_dB_new[iL[i]])>=0.20) continue; // Isolation
	  if (fabs(RECOMU_PFX_dB_new[iL[j]])>=0.20) continue;
	  
	  if(RECOMU_CHARGE[ iL[j] ] == RECOMU_CHARGE[ iL[i] ]) continue; // opposite charge

	  cout << "\n Pairing muons with pT= " << RECOMU_PT[ iL[i] ] << " and " <<  RECOMU_PT[ iL[j] ] << endl;
		  
	  // evaluate the mass &
	  double pxZ, pyZ, pzZ;
	  double EZ;
	  double massZ;
	  double massZ_noFSR = 0;
	  
	  int tempphotid=-1;
	  int templepid=-1;

	  float pTphot=-999.;
	  Lepton1.SetPtEtaPhiM(RECOMU_PT[iL[i]], RECOMU_ETA[iL[i]], RECOMU_PHI[iL[i]], 0.105);
	  Lepton2.SetPtEtaPhiM(RECOMU_PT[iL[j]], RECOMU_ETA[iL[j]], RECOMU_PHI[iL[j]], 0.105);
	  DiLepton=Lepton1+Lepton2;	  
	  massZ = DiLepton.M();	  
	  massZ_noFSR = massZ;
	  if (debug) cout << "Mass Z= " << massZ << endl;
	  pxZ=DiLepton.Px();
	  pyZ=DiLepton.Py();
	  pzZ=DiLepton.Pz();
	  EZ=DiLepton.E();	  
	 
	  Zxx_tag=1;	 

	  // ** Association of FSR to Z
	  if( debug ) cout  << "Step Z+FSR  " << endl;
	  
	  bool has_FSR_Z = 0;
	  int N_FSR_Z = 0;
	  double max_pt_FSR_Z = -1.;
	  int pi = -1; 
	  int pj = -1;
	  
	  
	  for( int p = 0; p < Nphotons; ++p ){
	    
	    if( iLp_l[ p ] == iL[i] && iLp_tagEM[ p ] == 0 )  {  // exists a photon associated to a lepton mu
	      cout << "Attaching a photon to muon and then to the Z" << endl;
	      // evaluate the mass
	      LeptonCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[p]],RECOPFPHOT_ETA[iLp[p]],RECOPFPHOT_PHI[iLp[p]],0);
	      Lepton1=Lepton1+LeptonCorrection;
	      DiLepton=Lepton1+Lepton2;
	      double mllp=DiLepton.M();
	      pxZ=DiLepton.Px();
	      pyZ=DiLepton.Py();
	      pzZ=DiLepton.Pz();
	      EZ=DiLepton.E();	      	    

	      //cout << mllp << " " << Zmass << " " << massZ << endl;
	      pi = p; 
	      has_FSR_Z = 1;
	      ++N_FSR_Z;
	      if( RECOPFPHOT_PT[iLp[p]] > max_pt_FSR_Z ) max_pt_FSR_Z = RECOPFPHOT_PT[iLp[p]];
	      massZ=mllp;

	      cout << "Mass Z with FSR= "<< massZ << endl;

	    }
	    if( iLp_l[ p ] == iL[j] && iLp_tagEM[ p ] == 0 )  { 
	      cout << "Attaching a photon to muon and then to the Z" << endl;
	      // evaluate the mass
	      LeptonCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[p]],RECOPFPHOT_ETA[iLp[p]],RECOPFPHOT_PHI[iLp[p]],0);
	      Lepton2=Lepton2+LeptonCorrection;
	      DiLepton=Lepton1+Lepton2;
	      double mllp=DiLepton.M();
	      pxZ=DiLepton.Px();
	      pyZ=DiLepton.Py();
	      pzZ=DiLepton.Pz();
	      EZ=DiLepton.E();

	      //cout << mllp << " " << Zmass << " " << massZ << endl;
	      pj = p;
	      has_FSR_Z = 1;
	      ++N_FSR_Z; 
	      if( RECOPFPHOT_PT[iLp[p]] > max_pt_FSR_Z ) max_pt_FSR_Z = RECOPFPHOT_PT[iLp[p]];
	      massZ=mllp;

	      cout << "Mass Z with FSR= "<< massZ << endl;

	    }
	  } // end loop on FSR photons

	 
	  
	  
	  if( debug && has_FSR_Z) {
	    cout  << " Z has FSR! " << endl;
	    cout  << "  N_FSR_Z " << N_FSR_Z << endl;
	    cout  << "  max_pt of photon FSR_Z " << max_pt_FSR_Z << endl;
	    if( pi > -1 ) cout  << "  pi " << pi << " --> index photon: " << iLp[pi] << " associated lepton: " << iLp_l[pi] << " (= "<< iL[i]<<" ? )  tag: " << iLp_tagEM[pi] << endl;
	    if( pj > -1 ) cout  << "  pj " << pj << " --> index photon: " << iLp[pj] << " associated lepton: " << iLp_l[pj] << " (= "<< iL[j]<<" ? )  tag: " << iLp_tagEM[pj] << endl;
	  }
	  else {
	    cout << "No FSR photon attached" << endl;
	  }
	  
	  
	  if( has_FSR_Z ){ // if Z has FSR
	    
	    ++N_3_FSR; // fill the counter
	    N_3_FSR_w=N_3_FSR_w+newweight;
	    	    
	    // do not recompute isolation here
	    if( debug ) cout  << "Z Isolation (not corrected for photon): "
                              << "\n RECOMU_PFX_dB[ iL[i] ] " << RECOMU_PFX_dB[ iL[i] ]
                              << "\n RECOMU_PFX_dB[ iL[j] ] " << RECOMU_PFX_dB[ iL[j] ]
                              << endl;
	    	   
	    if( pi != -1 ){
	      //double deltaR_i = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[pi]] , RECOMU_PHI[iL[i]] ),2) + pow(RECOPFPHOT_ETA[iLp[pi]] - RECOMU_ETA[iL[i]],2) );
              //if( deltaR_i < 0.4 && deltaR_i > 0.01 )
	      pTphot=RECOPFPHOT_PT[iLp[pi]];	      
	    }
	    else if( pj != -1 ){	      
              //double deltaR_j = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[pj]] , RECOMU_PHI[iL[j]] ),2) + pow(RECOPFPHOT_ETA[iLp[pj]] - RECOMU_ETA[iL[j]],2) );
              //if( deltaR_j < 0.4 && deltaR_j > 0.01 )
	      pTphot=RECOPFPHOT_PT[iLp[pj]];	      
	    }

 
	  } // end if has FSR
	  else{
	    if( debug ) cout  << "Z Isolation: "  
			      << "\n RECOMU_PFX_dB_new[ iL[i] ] " << RECOMU_PFX_dB_new[ iL[i] ]
			      << "\n RECOMU_PFX_dB_new[ iL[j] ] " << RECOMU_PFX_dB_new[ iL[j] ]
			      << endl;	    
	  }
	  // ** end association of FSR to Z
	  
	  //if( massZ == 0 || i1 == -1 || j1 == -1) continue;
	  
	  cout << "2mu2e: " << Zxx_tag << endl; 
	  
	  cout << "Filling a struct for Z" << endl; 
	  candidateZ *Z = new candidateZ;
	  Z->massvalue=massZ;
	  Z->ilept1=iL[i];
	  Z->ilept2=iL[j];
	  Z->pt1=RECOMU_PT[iL[i]];
	  Z->pt2=RECOMU_PT[iL[j]];
	  Z->eta1=RECOMU_ETA[iL[i]];
	  Z->eta2=RECOMU_ETA[iL[j]];
	  Z->phi1=RECOMU_PHI[iL[i]];
	  Z->phi2=RECOMU_PHI[iL[j]];
	  Z->charge1=RECOMU_CHARGE[iL[i]];
	  Z->charge2=RECOMU_CHARGE[iL[j]];
	  Z->isol1=RECOMU_PFX_dB_new[ iL[i] ];
	  Z->isol2=RECOMU_PFX_dB_new[ iL[j] ];
	  if( pi != -1 ) Z->ilept1_FSR=true;
	  if( pj != -1 ) Z->ilept2_FSR=true;
	  Z->pxZ=pxZ;
	  Z->pyZ=pyZ;
	  Z->pzZ=pzZ;
	  Z->EZ=EZ;
	  if( has_FSR_Z ) {
	    Z->withFSR=1;
	    Z->ptFSR=pTphot;	    
	  }	      
	  else {
	    Z->withFSR=0;
	    Z->ptFSR=0.;
	  }
	  Z->tag=Zxx_tag;
	  	 	  
	  Zcandvector.push_back(*Z);	  
	  
	}
      } // end loop on pairs

      // 2mu2e
      for(int i = 0; i < Ne_good; ++i){
        for(int j = i + 1; j < Ne_good; ++j){
//	  if (fabs(RECOELE_SIP[iLe[i]])>=4.) continue; // SIP cut
//	  if (fabs(RECOELE_SIP[iLe[j]])>=4.) continue;
	  if (fabs(RECOELE_PFX_rho_new[iLe[i]])>=0.20) continue; // Isolation cut
	  if (fabs(RECOELE_PFX_rho_new[iLe[j]])>=0.20) continue;
	  
	  if(RECOELE_CHARGE[ iLe[j] ] == RECOELE_CHARGE[ iLe[i] ]) continue; // opposite charge

	  cout << "\n Pairing electrons with pT= " << RECOELE_PT[ iLe[i] ] << " and " <<  RECOELE_PT[ iLe[j] ] << endl;
	  
	  // evaluate the mass &
	  double pxZ, pyZ, pzZ;
	  double EZ;
	  double massZ;
	  double massZ_noFSR = 0;
	  
	 
	  int tempphotid=-1;
	  int templepid=-1;
	  
	  float pTphot=-999.;
	  Lepton1.SetPtEtaPhiM(RECOELE_PT[iLe[i]], RECOELE_ETA[iLe[i]], RECOELE_PHI[iLe[i]], 0.000511);
	  Lepton2.SetPtEtaPhiM(RECOELE_PT[iLe[j]], RECOELE_ETA[iLe[j]], RECOELE_PHI[iLe[j]], 0.000511);
	  DiLepton=Lepton1+Lepton2;	  
	  massZ = DiLepton.M();	  
	  massZ_noFSR = massZ;
	  if (debug) cout << "Mass Z= " << massZ << endl;
	  pxZ=DiLepton.Px();
	  pyZ=DiLepton.Py();
	  pzZ=DiLepton.Pz();
	  EZ=DiLepton.E();
	  
	  Zxx_tag=2;
	
	  // ** Association of FSR to Z
	  if( debug ) cout  << "Step Z+FSR  " << endl;
	  
	  bool has_FSR_Z = 0;
	  int N_FSR_Z = 0;
	  double max_pt_FSR_Z = -1.;
	  int pi = -1; 
	  int pj = -1;
	  
	  
	  for( int p = 0; p < Nphotons; ++p ){
	    if( iLp_l[ p ] == iLe[i] && iLp_tagEM[ p ] == 1 )  {  // exist a photon associated to a lepton electron
	      
	      // evaluate the mass
	      LeptonCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[p]],RECOPFPHOT_ETA[iLp[p]],RECOPFPHOT_PHI[iLp[p]],0);
	      Lepton1=Lepton1+LeptonCorrection;
	      DiLepton=Lepton1+Lepton2;
	      double mllp=DiLepton.M();
	      pxZ=DiLepton.Px();
	      pyZ=DiLepton.Py();
	      pzZ=DiLepton.Pz();
	      EZ=DiLepton.E();	      	      	   
	      
	      has_FSR_Z = 1; 
	      pi = p; 
	      ++N_FSR_Z;
	      if( RECOPFPHOT_PT[iLp[p]] > max_pt_FSR_Z ) max_pt_FSR_Z = RECOPFPHOT_PT[iLp[p]];
	      massZ=mllp;

	      cout << "Mass Z with FSR= "<< massZ << endl;
		      
	    }
	    
	    if( iLp_l[ p ] == iLe[j] && iLp_tagEM[ p ] == 1 )  { 
	      
	      // evaluate the mass
	      LeptonCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[p]],RECOPFPHOT_ETA[iLp[p]],RECOPFPHOT_PHI[iLp[p]],0);
	      Lepton2=Lepton2+LeptonCorrection;
	      DiLepton=Lepton1+Lepton2;
	      double mllp=DiLepton.M();
	      pxZ=DiLepton.Px();
	      pyZ=DiLepton.Py();
	      pzZ=DiLepton.Pz();
	      EZ=DiLepton.E();
	      	    
	      pj = p;
	      has_FSR_Z = 1;
	      ++N_FSR_Z; 
	      if( RECOPFPHOT_PT[iLp[p]] > max_pt_FSR_Z ) max_pt_FSR_Z = RECOPFPHOT_PT[iLp[p]];
	      massZ=mllp;

	      cout << "Mass Z with FSR= "<< massZ << endl;

	    }
	  } // end loop on FSR photons
	  
	  
	  
	  //if( has_FSR_Z ) debug = 1;
	  
	  if( debug && has_FSR_Z) {
	    cout  << " Z has FSR! " << endl;
	    cout  << "  N_FSR_Z " << N_FSR_Z << endl;
	    cout  << "  max_pt of photon FSR_Z " << max_pt_FSR_Z << endl;
	    if( pi > -1 ) cout  << "  pi " << pi << " --> index photon: " << iLp[pi] << " associated lepton: " << iLp_l[pi] << " (= "<< iLe[i]<<" ? )  tag: " << iLp_tagEM[pi] << endl;
	    if( pj > -1 ) cout  << "  pj " << pj << " --> index photon: " << iLp[pj] << " associated lepton: " << iLp_l[pj] << " (= "<< iLe[j]<<" ? )  tag: " << iLp_tagEM[pj] << endl;
	  }
	  else {
	    cout << "No FSR photon attached" << endl;
	  }
	  
	  
	  if( has_FSR_Z ){ // if Z has FSR
	    
	    ++N_3_FSR; // fill the counter
	    N_3_FSR_w=N_3_FSR_w+newweight;	    
	    
	    // do not recompute isolation here
	    if( debug ) cout  << "Z Isolation (not corrected for photon): "
                              << "\n RECOELE_PFX_rho[ iLe[i] ] " << RECOELE_PFX_rho[ iLe[i] ]
                              << "\n RECOELE_PFX_rho[ iLe[j] ] " << RECOELE_PFX_rho[ iLe[j] ]
                              << endl;
	    
	    if( pi != -1 ){
	      //double deltaR_i = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[pi]] , RECOELE_PHI[iLe[i]] ),2) + pow(RECOPFPHOT_ETA[iLp[pi]] - RECOELE_ETA[iLe[i]],2) );
              //if( deltaR_i < 0.4 && deltaR_i > 0.01 )
	      pTphot=RECOPFPHOT_PT[iLp[pi]];	      
	    }
	    else if( pj != -1 ){	      
              //double deltaR_j = sqrt( pow( DELTAPHI( RECOPFPHOT_PHI[iLp[pj]] , RECOELE_PHI[iLe[j]] ),2) + pow(RECOPFPHOT_ETA[iLp[pj]] - RECOELE_ETA[iLe[j]],2) );
              //if( deltaR_j < 0.4 && deltaR_j > 0.01 )
	      pTphot=RECOPFPHOT_PT[iLp[pj]];	      
	    }
	    
	    
	  } // end if has FSR
	  else{
	    
	    if( debug ) cout  << "Z Isolation: "  
			      << "\n RECOELE_PFX_rho_new[ iLe[i] ] " << RECOELE_PFX_rho_new[ iLe[i] ]
			      << "\n RECOELE_PFX_rho_new[ iLe[j] ] " << RECOELE_PFX_rho_new[ iLe[j] ]
			      << endl;	    
	  }
	  // ** end association of FSR to Z
	  
	  //if( massZ == 0 || i1 == -1 || j1 == -1) continue;
	  
	  cout << "2e2mu: " << Zxx_tag << endl;
	   
	  cout << "Filling a struct for Z" << endl; 
	  candidateZ *Z = new candidateZ;
	  Z->massvalue=massZ;
	  Z->ilept1=iLe[i];
	  Z->ilept2=iLe[j];
	  Z->pt1=RECOELE_PT[iLe[i]];
	  Z->pt2=RECOELE_PT[iLe[j]];
	  Z->eta1=RECOELE_ETA[iLe[i]];
	  Z->eta2=RECOELE_ETA[iLe[j]];
	  Z->phi1=RECOELE_PHI[iLe[i]];
	  Z->phi2=RECOELE_PHI[iLe[j]];
	  Z->charge1=RECOELE_CHARGE[iLe[i]];
	  Z->charge2=RECOELE_CHARGE[iLe[j]];
	  Z->isol1=RECOELE_PFX_rho_new[ iLe[i] ];
	  Z->isol2=RECOELE_PFX_rho_new[ iLe[j] ];
	  if( pi != -1 ) Z->ilept1_FSR=true;
	  if( pj != -1 ) Z->ilept2_FSR=true;
	  Z->pxZ=pxZ;
	  Z->pyZ=pyZ;
	  Z->pzZ=pzZ;
	  Z->EZ=EZ;
	  if( has_FSR_Z ) {
	    Z->withFSR=1;
	    Z->ptFSR=pTphot;
	  }	      
	  else {
	    Z->withFSR=0;
	    Z->ptFSR=0.;
	  }
	  	 
	  Z->tag=Zxx_tag;
	  Zcandvector.push_back(*Z);	  
	  
	}
      } // end loop on couples
      
      
      if (Zcandvector.size()<1) {
	cout << "Less than two Z pairs with isolated leptons...exiting" << endl;
	continue; 
      }
      

      ++N_3a ;  // fill counter
      N_3a_w=N_3a_w+newweight;
      

      // Mass cut on Z
      vector<candidateZ> Zcandisolmassvector;
      Zcandisolmassvector.clear();

      for (int index=0; index<Zcandvector.size();index++){
	if (!(Zcandvector.at(index).massvalue > 60 && Zcandvector.at(index).massvalue < 120)) continue;
	cout << "Z passing the 60 < mll < 120 cut with mass= " << Zcandvector.at(index).massvalue<< endl;
	Zcandisolmassvector.push_back(Zcandvector.at(index));
      };
      
      if (Zcandisolmassvector.size()<1) {
	cout << "No Z passing the mass cut"<< endl;
	continue;
      }

      cout << "Number of Z passing the isolation and the 60 < mll < 120 cut is= " << Zcandisolmassvector.size() << endl;

      ++N_3b ;  // fill counter
      N_3b_w=N_3b_w+newweight;

/*       
      Double_t eff_weight_3;

      // MZ and PFMET
      for (int index=0; index<Zcandisolmassvector.size();index++){

	int ipt1_3;
	int ipt2_3;

	ipt1_3 = Zcandisolmassvector.at(index).ilept1; 
	ipt2_3  = Zcandisolmassvector.at(index).ilept2; 
	
	// Execute Efficiency Reweighting
	int z1lept[2]={ipt1_3,ipt2_3};
	
	if (Zcandisolmassvector.at(index).tag==1){ //Z->mumu
	  for(int i = 0; i < 2; ++i){
	    Double_t Pt = RECOMU_PT[ z1lept[i] ]; 
	    Double_t Eta = RECOMU_ETA[ z1lept[i] ]; 
	    
	    if( MC_type == "Spring16" && DATA_type == "NO"){
	      Int_t biny = mu_scale_2016->GetYaxis()->FindBin(Eta);
	      Int_t binx = mu_scale_2016->GetXaxis()->FindBin(Pt);
	      if (mu_scale_2016->GetBinContent(binx,biny)>0.) eff_weight_3*=mu_scale_2016->GetBinContent(binx,biny); 
	    }
	  }
	}
	else if (Zcandisolmassvector.at(index).tag==2){ //Z->ee
	  for(int i = 0; i < 2; ++i){
	    Double_t Pt = RECOELE_PT[ z1lept[i] ]; 
	    Double_t Eta = RECOELE_ETA[ z1lept[i] ]; 
	    
	    if( MC_type == "Spring16" && DATA_type == "NO"){
	      
	      if(RECOELE_isGap[ z1lept[i] ]==0){
		Int_t binx = ele_scale_factors2016->GetXaxis()->FindBin(Eta);
		Int_t biny = ele_scale_factors2016->GetYaxis()->FindBin(Pt);
		if (ele_scale_factors2016->GetBinContent(binx,biny)>0.) eff_weight_3*=ele_scale_factors2016->GetBinContent(binx,biny); 
	      }
	      else if(RECOELE_isGap[ z1lept[i] ]==1){
		Int_t binx = ele_scale_factors_gap2016->GetXaxis()->FindBin(Eta);
		Int_t biny = ele_scale_factors_gap2016->GetYaxis()->FindBin(Pt);
		if (ele_scale_factors_gap2016->GetBinContent(binx,biny)>0.) eff_weight_3*=ele_scale_factors_gap2016->GetBinContent(binx,biny); 
	      }
	      
	    }
	  }
	}
	
	// Changing the weight for pileup and efficiency
	if (DATA_type == "2016") eff_weight_3=1.; 
	if (eff_weight_3>0.) newweight=weight*pu_weight*eff_weight_3;
	
	
	
	hMZ_3->Fill(Zcandisolmassvector.at(index).massvalue,newweight );
	
      }
    */ 

     
      cout << "Starting weight + pileup + LineShape + efficiency= " << newweight << endl;
//      if(debug) cout << "Efficiency Weight for the Z1: " << eff_weight_3 << " Final weight for Z1= " << newweight << endl;


      hPFMET_3->Fill(RECO_PFMET,newweight);
      
      // **** Step 4:
       // a) 4 leptons
      // b) pair #2
      // c) highest pt
      // d) mZ2 in ] 4,120 [

      int issamesign = 0;

      //if( debug ) cout  << "\nStep 4: Number of good leptons: " << N_good << endl;

      int N_Z2_pairs = 0;

      int i2 = -1; //index of the first lepton (from Z1)
      int j2 = -1; //index of the second lepton (from Z1)
      int pi2 = -1; 
      int pj2 = -1; 
      
      bool has_FSR_Z2 = 0;


      
      
      // PT,20/10 for any di-lepton
      vector<candidateZ> firstpTcleanedgoodZ;    
      vector<float> leptonspTcleaned;
      
      for (int l=0;l<Zcandisolmassvector.size();l++){
        leptonspTcleaned.clear();
        leptonspTcleaned.push_back((Zcandisolmassvector.at(l)).pt1);
        leptonspTcleaned.push_back((Zcandisolmassvector.at(l)).pt2);
        std::sort(leptonspTcleaned.rbegin(),leptonspTcleaned.rend());

        if (leptonspTcleaned.at(0)>30. && leptonspTcleaned.at(1)>20.) {
          firstpTcleanedgoodZ.push_back(Zcandisolmassvector.at(l));
        }
      }

      vector<candidateZ> pTcleanedgoodZ;
      pTcleanedgoodZ=firstpTcleanedgoodZ;
            
     if (pTcleanedgoodZ.size()<1) {
        cout << "No Z(PT) passing the mass cut"<< endl;
        continue;
      } 
      // Z1 selection
      double pxZ1 = 0;  //Z1 kinematics
      double pyZ1 = 0;
      double pzZ1 = 0;
      double ptZ1 = 0;
      double EZ1 = 0;
      double Y_Z1 = -9;
      double massZ1 = 0;
      double massZ1_noFSR = 0;
      double sum_ptZ1 = 0.;
      int indexlep1Z1 = -1;
      int indexlep2Z1 = -1;
      int indexZ1= -1;
      int Z1tag=-999;
      
      // Choice of Z1 as the closest to the Z mass
      for (int i=0;i<pTcleanedgoodZ.size();++i){
	
	if( fabs(pTcleanedgoodZ.at(i).massvalue - Zmass) < fabs(massZ1 - Zmass) ){
	  
	  massZ1 = pTcleanedgoodZ.at(i).massvalue;
	  indexZ1=i;
	  
	  pxZ1 = pTcleanedgoodZ.at(i).pxZ;
	  pyZ1 = pTcleanedgoodZ.at(i).pyZ;
	  pzZ1 = pTcleanedgoodZ.at(i).pzZ;
	  EZ1  = pTcleanedgoodZ.at(i).EZ;
	  
	  ptZ1 = sqrt( pxZ1*pxZ1 + pyZ1*pyZ1 );
	  sum_ptZ1 = pTcleanedgoodZ.at(i).pt1+pTcleanedgoodZ.at(i).pt2;
	  
	  Y_Z1 = 0.5 * log ( (EZ1 + pzZ1)/(EZ1 - pzZ1) );
	  indexlep1Z1=pTcleanedgoodZ.at(i).ilept1;
	  indexlep2Z1=pTcleanedgoodZ.at(i).ilept2;
	  Z1tag=pTcleanedgoodZ.at(i).tag;
	}
      }
      
      if (massZ1 < 40.) {
	cout << "The mass of Z1 is < 40 GeV...exiting" << endl;
	continue;
      } 
      
      if( debug ) cout  << "\n Final Z1 properties: "
			<< "\n pxZ1 " << pxZ1
			<< "\n pyZ1 " << pyZ1
			<< "\n pzZ1 " << pzZ1
			<< "\n ptZ1 " << ptZ1
			<< "\n EZ1 "  << EZ1
			<< "\n Y_Z1 " << Y_Z1
			<< "\n massZ1 " << massZ1
			<< "\n indexlep1 " << indexlep1Z1
			<< "\n indexlep2 " << indexlep2Z1
			<< "\n indexZ1 " << indexZ1 
			<< "\n Z1 tag (1 for 2mu and 2 for 2e) " << Z1tag
		    
			<< endl;

      hMZ1->Fill( massZ1,newweight );
      hPtZ1->Fill( ptZ1,newweight );
      hYZ1->Fill( Y_Z1,newweight );
      
      
      
      
      ++N_4b ;  // fill counter
      N_4b_w=N_4b_w+newweight;

      
      // **** Step 5:

      
       // Execute Efficiency Reweighting
 
      int z1lept[2]={indexlep1Z1,indexlep2Z1};

      Double_t eff_weight = 1.;
     
      bool BB=false;
      bool EB=false;
      bool EE=false;   
 
      if (Z1tag==1){ 
          if(abs(RECOMU_ETA[ z1lept[0] ])<1.5 && abs(RECOMU_ETA[ z1lept[1] ])<1.5) BB=true;
          else if(abs(RECOMU_ETA[ z1lept[0] ])>1.5 && abs(RECOMU_ETA[ z1lept[1] ])>1.5) EE=true;
          else EB=true;	
        for(int i = 0; i < 2; ++i){
	  Double_t Pt = RECOMU_PT[ z1lept[i] ]; 
	  Double_t Eta = RECOMU_ETA[ z1lept[i] ]; 
	  if( MC_type == "Spring16" && DATA_type == "NO"){
/*	    Int_t biny = mu_scale_2016->GetYaxis()->FindBin(Pt);
	    Int_t binx = mu_scale_2016->GetXaxis()->FindBin(Eta);
           cout << "xbin= " << binx <<" ybin="<<  biny << endl;
            cout << "eff_weight test = " <<mu_scale_2016->GetBinContent(binx,biny)<< endl;
	    if (mu_scale_2016->GetBinContent(binx,biny)>0.) eff_weight*=mu_scale_2016->GetBinContent(binx,biny); 
*/

          int biny1 = mu_scale_factors_id_p1->GetYaxis()->FindBin(Pt);
          int binx1 = mu_scale_factors_id_p1->GetXaxis()->FindBin(abs(Eta));

          int biny12 = mu_scale_factors_id_p2->GetYaxis()->FindBin(Pt);
          int binx12 = mu_scale_factors_id_p2->GetXaxis()->FindBin(abs(Eta));
 //         double sf_id=mu_scale_factors_id_p1->GetBinContent(binx1,biny1)*19.666/35.812+mu_scale_factors_id_p2->GetBinContent(binx12,biny12)*16.146/35.812;
          double sf_id=mu_scale_factors_id_p2->GetBinContent(binx12,biny12); //just for GH
         if (sf_id>0.) eff_weight*=sf_id; 
  
          int biny2 = mu_scale_factors_iso_p1->GetYaxis()->FindBin(Pt);
          int binx2 = mu_scale_factors_iso_p1->GetXaxis()->FindBin(abs(Eta)); 

          int biny22 = mu_scale_factors_iso_p2->GetYaxis()->FindBin(Pt);
          int binx22 = mu_scale_factors_iso_p2->GetXaxis()->FindBin(abs(Eta));

//          double sf_iso = mu_scale_factors_iso_p1->GetBinContent(binx2,biny2)*19.666/35.812+mu_scale_factors_iso_p2->GetBinContent(binx22,biny22)*16.146/35.812;
          double sf_iso = mu_scale_factors_iso_p2->GetBinContent(binx22,biny22);  //just for GH
          if (sf_iso>0.)  eff_weight*=sf_iso; 
 
          double tk_sf = mu_scale_factors_tk->Eval(double(num_PU_vertices));    
          if(mu_scale_factors_tk->Eval(double(num_PU_vertices))>0) eff_weight*=tk_sf;

          cout << " id weight = " << sf_id << "\n iso weight = " << sf_iso << "\n tk weight = " << tk_sf << endl;

          if(RECOMU_PT_MuHLTMatch[ z1lept[i] ] > 0){
            int biny3 = mu_scale_factors_hlt_p1->GetYaxis()->FindBin(Pt);
            int binx3 = mu_scale_factors_hlt_p1->GetXaxis()->FindBin(abs(Eta));

            int biny32 = mu_scale_factors_hlt_p2->GetYaxis()->FindBin(Pt);
            int binx32 = mu_scale_factors_hlt_p2->GetXaxis()->FindBin(abs(Eta));
//            double sf_hlt = mu_scale_factors_hlt_p1->GetBinContent(binx3,biny3)*19.666/35.812+mu_scale_factors_hlt_p2->GetBinContent(binx32,biny32)*16.146/35.812;
            double sf_hlt = mu_scale_factors_hlt_p2->GetBinContent(binx32,biny32);
            if (sf_hlt>0.) eff_weight*=sf_hlt;
            cout << "l1trigger matching weight = " << sf_hlt << endl;
           }
/*
          int biny1 = mu_scale_factors_id_p2->GetYaxis()->FindBin(Pt);
          int binx1 = mu_scale_factors_id_p2->GetXaxis()->FindBin(abs(Eta));
          if (mu_scale_factors_id_p2->GetBinContent(binx1,biny1)>0.) eff_weight*=mu_scale_factors_id_p2->GetBinContent(binx1,biny1);

          int biny2 = mu_scale_factors_iso_p2->GetYaxis()->FindBin(Pt);
          int binx2 = mu_scale_factors_iso_p2->GetXaxis()->FindBin(abs(Eta));

          if (mu_scale_factors_iso_p2->GetBinContent(binx2,biny2)>0.) eff_weight*=mu_scale_factors_iso_p2->GetBinContent(binx2,biny2);

          double tk_sf = mu_scale_factors_tk_p2->Eval(double(num_PU_vertices));
          if(mu_scale_factors_tk_p2->Eval(double(num_PU_vertices))>0) eff_weight*=tk_sf;

          cout << " id weight = " << mu_scale_factors_id_p2->GetBinContent(binx1,biny1) << "\n iso weight = " << mu_scale_factors_iso_p2->GetBinContent(binx2,biny2)
          << "\n tk weight = " << tk_sf << endl;

          if(RECOMU_PT_MuHLTMatch[ z1lept[i] ] > 0){
            int biny3 = mu_scale_factors_hlt_p2->GetYaxis()->FindBin(Pt);
            int binx3 = mu_scale_factors_hlt_p2->GetXaxis()->FindBin(abs(Eta));
            if (mu_scale_factors_hlt_p2->GetBinContent(binx3,biny3)>0.) eff_weight*=mu_scale_factors_hlt_p2->GetBinContent(binx3,biny3);
            cout << "l1trigger matching weight = " << mu_scale_factors_hlt_p2->GetBinContent(binx3,biny3) << endl;
           }          
*/
	  }

	}
      }
      else if (Z1tag==2){
          if(abs(RECOELE_ETA[ z1lept[0] ])<1.5 && abs(RECOELE_ETA[ z1lept[1] ])<1.5) BB=true;
          else if(abs(RECOELE_ETA[ z1lept[0] ])>1.5 && abs(RECOELE_ETA[ z1lept[1] ])>1.5) EE=true;
          else EB=true; 
	for(int i = 0; i < 2; ++i){
	  Double_t Pt = RECOELE_PT[ z1lept[i] ]; 
	  Double_t Eta = RECOELE_scl_Eta[ z1lept[i] ]; 
	  
	  if( MC_type == "Spring16" && DATA_type == "NO"){
	  /*  
	    if(RECOELE_isGap[ z1lept[i] ]==0){
	      Int_t binx = ele_scale_factors2016->GetXaxis()->FindBin(Eta);
	      Int_t biny = ele_scale_factors2016->GetYaxis()->FindBin(Pt);
	      if (ele_scale_factors2016->GetBinContent(binx,biny)>0.) eff_weight*=ele_scale_factors2016->GetBinContent(binx,biny); 
	    }

	    else if(RECOELE_isGap[ z1lept[i] ]==1){
	      Int_t binx = ele_scale_factors_gap2016->GetXaxis()->FindBin(Eta);
	      Int_t biny = ele_scale_factors_gap2016->GetYaxis()->FindBin(Pt);
	      if (ele_scale_factors_gap2016->GetBinContent(binx,biny)>0.) eff_weight*=ele_scale_factors_gap2016->GetBinContent(binx,biny); 
	    }
	  */
  
            cout << "Pt= " << Pt << " Eta= " << Eta << endl;
            int biny4 = ele_scale_factors_reco->GetYaxis()->FindBin(Pt);
            int binx4 = ele_scale_factors_reco->GetXaxis()->FindBin(Eta);
            if (ele_scale_factors_reco->GetBinContent(binx4,biny4)>0.) eff_weight*=ele_scale_factors_reco->GetBinContent(binx4,biny4); 
            cout << "ele reco sf = " << ele_scale_factors_reco->GetBinContent(binx4,biny4) << endl;
            
            int biny5 = ele_scale_factors_wp90->GetYaxis()->FindBin(Pt);
            int binx5 = ele_scale_factors_wp90->GetXaxis()->FindBin(Eta);
            if (ele_scale_factors_wp90->GetBinContent(binx5,biny5)>0.) eff_weight*=ele_scale_factors_wp90->GetBinContent(binx5,biny5);
            cout << "ele wp90 sf = " << ele_scale_factors_wp90->GetBinContent(binx5,biny5) << endl;


	  }
	}
      }

      cout << "eff_weight" << eff_weight << endl;
      
      // // Changing the weight for pileup and efficiency
      if (eff_weight>0.) newweight=newweight*eff_weight;
      
      cout << "Starting weight + pileup + efficiency= " << newweight << endl;
      if(debug) cout << "Efficiency Weight for the 4l: " << eff_weight << " Final weight= " << newweight << endl;
      
      //only keep 2mu (qier) 
      if(Z1tag!=1) continue;

      TLorentzVector Z1P4;
      Z1P4.SetPxPyPzE(pxZ1,pyZ1,pzZ1,EZ1);

      //for met recoil correction
      double dphi=Z1P4.Phi()-RECO_PFMET_PHI;
      f_u2=-cos(dphi)*RECO_PFMET;
      f_u1=-sin(dphi)*RECO_PFMET;
      f_z1_pt = ptZ1;
      cout << "u1= " << f_u1 << " u2=" << f_u2 << " met=" << RECO_PFMET << endl;

      if(zptweight) {
        if(ptZ1<5) newweight=newweight*1.08;
        else if(ptZ1<10) newweight=newweight*1.10;
        else if(ptZ1>=10&&ptZ1<15) newweight=newweight*1.04;
        else if(ptZ1>=15&&ptZ1<20) newweight=newweight*1.0;
        else if(ptZ1>=20&&ptZ1<25) newweight=newweight*0.95;
        else if(ptZ1>=25&&ptZ1<30) newweight=newweight*0.92;
        else if(ptZ1>=30&&ptZ1<40) newweight=newweight*0.93;
        else if(ptZ1>=40&&ptZ1<50) newweight=newweight*0.96;
        else if(ptZ1>=50&&ptZ1<60) newweight=newweight*0.97;
      }

      hMZ1_5->Fill( massZ1,newweight );
      hPtZ1_5->Fill( ptZ1,newweight );
      hYZ1_5->Fill( Y_Z1,newweight );
      hPFMET_u1_5->Fill(f_u1,newweight);
      hPFMET_u2_5->Fill(f_u2,newweight);
 

 
      if(BB){
       hMZ1_BB_5->Fill( massZ1,newweight );
       hPtZ1_BB_5->Fill( ptZ1,newweight );
       hYZ1_BB_5->Fill( Y_Z1,newweight );
      }
      if(EB){
       hMZ1_EB_5->Fill( massZ1,newweight );
       hPtZ1_EB_5->Fill( ptZ1,newweight );
       hYZ1_EB_5->Fill( Y_Z1,newweight );
      }
      if(EE){
       hMZ1_EE_5->Fill( massZ1,newweight );
       hPtZ1_EE_5->Fill( ptZ1,newweight );
       hYZ1_EE_5->Fill( Y_Z1,newweight );
      }


      // sort index by pt (kinematics not corrected for FSR)
      int ipt[2] ;
      double tmp_pt[2];
      int tmp_type[2];
      int lep_type[2];
  

      int indexleptonfinal[2]={indexlep1Z1,indexlep2Z1};
      //cout << "PTs= " << RECOMU_PT[indexleptonfinal[0]] << " " << RECOMU_PT[indexleptonfinal[1]] << " " <<  RECOMU_PT[indexleptonfinal[2]] << " " << RECOMU_PT[indexleptonfinal[3]]<< endl;

      for(int i = 0; i < 2; ++i){ 
	if (Z1tag==1) {tmp_pt[i] =  RECOMU_PT[indexleptonfinal[i]]; tmp_type[i]=1;}
	if (Z1tag==2) {tmp_pt[i] =  RECOELE_PT[indexleptonfinal[i]]; tmp_type[i]=2;}
	cout << tmp_pt[i] << endl;
      }

      float sortedpT[2];
 
      for(int i = 0; i < 2; ++i){		
        double tmp_max_pt = 0;
      	int jj = i;
        int type = 0;
        for(int j = 0; j < 2; ++j){
      		if( tmp_pt[j] > tmp_max_pt ){
      			tmp_max_pt = tmp_pt[j];
      			jj  = j; 
                        type = tmp_type[j];
      		}
      	}
        sortedpT[i]=tmp_max_pt;
      	ipt[i] = indexleptonfinal[jj];
        lep_type[i]=type;
      	tmp_pt[jj] = 0;	
      }
      //end sorting
     

      // Format lepton syncronization                                                                                                                                      
      // {run}:{lumi}:{event}:{pdgId}:{pT:.2f}:{eta:.2f}:{phi:.2f}{SIP:.2f}:{PFChargedHadIso:.2f}:{PFNeutralHadIso:.2f}:{PFPhotonIso:.2f}:{PUCorr:.2f}:{combRelIsoPF:.3f}:{eleBDT:.3f}:{photpT:.2f}:{photDR:.2f}:{photRelIso:.2f}          
      
      Char_t leptformat[20000];

      for(int i = 0; i < 2; ++i){      
	bool ismuon=false,iselectron=false;
	float dummy=0.;
	int flagFSR_tag=-999;
	int pfsr=-999;
	
	for (int j=0;j<RECO_NMU;j++) {	    
	  if (RECOMU_PT[j]==sortedpT[i]) {
	    ismuon=true;
	    break;
	  }
	  else {
	    for (int j=0;j<RECO_NELE;j++) {	    
	      if (RECOELE_PT[j]==sortedpT[i]) {
		iselectron=true;
		break;
	      }
	    }
	  }
	}
	
	/*for (int j=0;j<RECO_NELE;j++) {	    
	  if (RECOELE_PT[j]==sortedpT[i]) iselectron=true;
	}
	*/
	
	cout << "isMuon= " << ismuon << " and isElectron= " << iselectron << endl;

	if (ismuon){
	  for( int p = 0; p < Nphotons; ++p ){
	    if( iLp_l[ p ] == ipt[i] && iLp_tagEM[ p ] == 0 )  {
	      cout << "Muon with pT= " << RECOMU_PT[ipt[i]] << " has associated a photon with pT= " << RECOPFPHOT_PT[iLp[p]] <<  endl;
	      flagFSR_tag=0;
	      pfsr=p;
	      break;
	    }
	  }
	}
	    
	else if (iselectron){
	  for( int p = 0; p < Nphotons; ++p ){
	    if( iLp_l[ p ] == ipt[i] && iLp_tagEM[ p ] == 1 )  {
	      cout << "Electron with pT= " << RECOELE_PT[ipt[i]] << " has associated a photon with pT= " << RECOPFPHOT_PT[iLp[p]] <<  endl;
	      flagFSR_tag=1;
	      pfsr=p;
	      break;
	    }
	  }
	}
	

	if (ismuon && flagFSR_tag==0){
	  sprintf (leptformat,"FormatLept=%d:%d:%d:%d:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.3f:%.3f:%.2f:%.2f:%.2f",
		   Run,LumiSection,Event,
		   int(-13*RECOMU_CHARGE[ipt[i]]),
		   RECOMU_PT[ipt[i]],RECOMU_ETA[ipt[i]],RECOMU_PHI[ipt[i]],RECOMU_SIP[ipt[i]],
		   RECOMU_PFchHad[ipt[i]],RECOMU_PFneuHad[ipt[i]],RECOMU_PFphoton[ipt[i]],RECOMU_PFPUchAllPart[ipt[i]],RECOMU_PFX_dB[ipt[i]],dummy,
		   RECOPFPHOT_PT[iLp[pfsr]],RECOPFPHOT_DR[iLp[pfsr]],RECOPFPHOT_PFX_rho[iLp[pfsr]]
		   );
	}
	else if (iselectron && flagFSR_tag==1){
	  sprintf (leptformat,"FormatLept=%d:%d:%d:%d:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.3f:%.3f:%.2f:%.2f:%.2f",
		   Run,LumiSection,Event,
		   int(-11*RECOELE_CHARGE[ipt[i]]),
		   RECOELE_PT[ipt[i]],RECOELE_ETA[ipt[i]],RECOELE_PHI[ipt[i]],RECOELE_SIP[ipt[i]],
		   RECOELE_PFchHad[ipt[i]],RECOELE_PFneuHad[ipt[i]],RECOELE_PFphoton[ipt[i]],RHO_ele,RECOELE_PFX_rho[ipt[i]],RECOELE_mvaNonTrigV0[ipt[i]],
		   RECOPFPHOT_PT[iLp[pfsr]],RECOPFPHOT_DR[iLp[pfsr]],RECOPFPHOT_PFX_rho[iLp[pfsr]]
		   );
	}	
	else if (ismuon){	  	  	      
	  sprintf (leptformat,"FormatLept=%d:%d:%d:%d:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.3f:%.3f",
		   Run,LumiSection,Event,
		   int(-13*RECOMU_CHARGE[ipt[i]]),
		   RECOMU_PT[ipt[i]],RECOMU_ETA[ipt[i]],RECOMU_PHI[ipt[i]],RECOMU_SIP[ipt[i]],
		   RECOMU_PFchHad[ipt[i]],RECOMU_PFneuHad[ipt[i]],RECOMU_PFphoton[ipt[i]],RECOMU_PFPUchAllPart[ipt[i]],RECOMU_PFX_dB[ipt[i]],dummy
		   );
	}
	else if (iselectron){
	  sprintf (leptformat,"FormatLept=%d:%d:%d:%d:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.2f:%.3f:%.3f",
		   Run,LumiSection,Event,
		   int(-11*RECOELE_CHARGE[ipt[i]]),
		   RECOELE_PT[ipt[i]],RECOELE_ETA[ipt[i]],RECOELE_PHI[ipt[i]],RECOELE_SIP[ipt[i]],
		   RECOELE_PFchHad[ipt[i]],RECOELE_PFneuHad[ipt[i]],RECOELE_PFphoton[ipt[i]],RHO_ele,RECOELE_PFX_rho[ipt[i]],RECOELE_mvaNonTrigV0[ipt[i]]
		   );
	}	  
	  
	output_txt  << leptformat << endl;

       
      }//end fill leptons
      
      
      
      //hIso_5->Fill( Iso_max,newweight ) ;
      //hSip_5->Fill( Sip_max,newweight ) ;
      //hIp_5->Fill( Ip_max,newweight ) ;

      // N.B. Do NOT Update the Isolation values and correct the 4 momenta of leptons for FSR
      for(int i = 0; i < N_good; ++i){
	int flagFSR=0;
	int pfsr=-999;
	
	for( int p = 0; p < Nphotons; ++p ){
	  if (iLp[p]==-1) continue;
	  if (iLp_l[p]==-1) continue;
	  
	  cout << "Index of lepton with photon ISR= " << iLp_l[ p ] << " and final lepton index= " << iL[i] << endl;
	  if( iLp_l[ p ] == iL[i] && iLp_tagEM[ p ] == 0 )  {
	    cout << "Muon with pT= " << RECOMU_PT[iL[i]] << " has associated a photon with pT= " << RECOPFPHOT_PT[iLp[p]] <<  endl;
	    
	    flagFSR=1;
	    pfsr=p;
	  }
	}
	
	
	if (flagFSR==1){
	  cout << "Before correcting for FSR; muon pT= " << RECOMU_PT[iL[i]] << " Eta= " << RECOMU_ETA[iL[i]] << " Phi= " << RECOMU_PHI[iL[i]] << endl;
	  TLorentzVector Lept,LeptCorrection;
	  Lept.SetPtEtaPhiM(RECOMU_PT[iL[i]], RECOMU_ETA[iL[i]], RECOMU_PHI[iL[i]], 0.105);
	  LeptCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[pfsr]],RECOPFPHOT_ETA[iLp[pfsr]],RECOPFPHOT_PHI[iLp[pfsr]],0);
	  Lept+=LeptCorrection;
	  RECOMU_PT[iL[i]]=Lept.Pt();
	  RECOMU_ETA[iL[i]]=Lept.Eta();
	  RECOMU_PHI[iL[i]]=Lept.Phi();
	  cout << "After correcting for FSR; muon pT= " << RECOMU_PT[iL[i]] << " Eta= " << RECOMU_ETA[iL[i]] << " Phi= " << RECOMU_PHI[iL[i]] << endl;
	}
      }
      
      // N.B. DO NOT Update the Isolation values and correct the 4 momenta of leptons for FSR
      for(int i = 0; i < Ne_good; ++i){
	int flagFSR=0;
	int pfsr=-999;
	
	for( int p = 0; p < Nphotons; ++p ){
	  if (iLp[p]==-1) continue;
	  if (iLp_l[p]==-1) continue;
	  
	  cout << "Index of lepton with photon ISR= " << iLp_l[ p ] << " and final lepton index= " << iLe[i] << endl;
	  if( iLp_l[ p ] == iLe[i] && iLp_tagEM[ p ] == 1 )  {
	    cout << "Electron with pT= " << RECOELE_PT[iLe[i]] << " has associated a photon with pT= " << RECOPFPHOT_PT[iLp[p]] <<  endl;
	    // RECOELE_PFX_rho_new[iLe[i]]=
	    //   (RECOELE_PFchHad[iLe[i]]+
	    //    max(0.,RECOELE_PFneuHad[iLe[i]]+
	    // 	   (RECOELE_PFphoton[iLe[i]]-RECOPFPHOT_PT[iLp[p]] )-
	    // 	   max(RHO_ele,0.0)*(EffectiveArea)))/RECOELE_PT[iLe[i]];	    
	    flagFSR=1;
	    pfsr=p;
	  }
	}
	
	if (flagFSR==1){
	  cout << "Before correcting for FSR; electron pT= " << RECOELE_PT[iLe[i]] << " Eta= " << RECOELE_ETA[iLe[i]] << " Phi= " << RECOELE_PHI[iLe[i]] << endl;
	  TLorentzVector Lept,LeptCorrection;
	  Lept.SetPtEtaPhiM(RECOELE_PT[iLe[i]], RECOELE_ETA[iLe[i]], RECOELE_PHI[iLe[i]], 0.105);
	  LeptCorrection.SetPtEtaPhiM(RECOPFPHOT_PT[iLp[pfsr]],RECOPFPHOT_ETA[iLp[pfsr]],RECOPFPHOT_PHI[iLp[pfsr]],0);
	  Lept+=LeptCorrection;
	  RECOELE_PT[iLe[i]]=Lept.Pt();
	  RECOELE_ETA[iLe[i]]=Lept.Eta();
	  RECOELE_PHI[iLe[i]]=Lept.Phi();
	  cout << "After correcting for FSR; muon pT= " << RECOELE_PT[iLe[i]] << " Eta= " << RECOELE_ETA[iLe[i]] << " Phi= " << RECOELE_PHI[iLe[i]] << endl;
	}
      }
      
      cout << "Kinematics of leptons corrected for FSR photons (if existing)" << endl;
      
      
      // // **** Step 6:
      //  // QCD suppression: mll>4 GeV cut on all OS-SF pairs (4/4)           
     //if( min_mass_2L <= 4 ) continue ;
     
     ++N_6 ;  // fill counter
     N_6_w=N_6_w+newweight;

     // **** Step 7:
     // mass4l > 70 


     
     // Leptons PT, ETA, Phi, Isol corrected for FSR
     for(int i = 0; i < 2; ++i){
       
       if( i == 0 && lep_type[i]==1){
	 hPtLep1_7->Fill( RECOMU_PT[ ipt[i] ],newweight ) ;
	 hYLep1_7->Fill(  RECOMU_ETA[ ipt[i] ],newweight ) ;
         hPhiLep1_7->Fill(  RECOMU_PHI[ ipt[i] ],newweight ) ;
	 hIsoLep1_7->Fill( RECOMU_PFX_dB_new[ ipt[i] ],newweight ) ;
	 hSipLep1_7->Fill( RECOMU_SIP[ ipt[i] ],newweight ) ;
	 hIpLep1_7->Fill( RECOMU_IP[ ipt[i] ],newweight ) ;
	 hIpErLep1_7->Fill( RECOMU_IPERROR[ ipt[i] ],newweight ) ;
       }
       if( i == 1 && lep_type[i]==1){
	 hPtLep2_7->Fill( RECOMU_PT[ ipt[i] ],newweight ) ;
	 hYLep2_7->Fill(  RECOMU_ETA[ ipt[i] ],newweight ) ;
         hPhiLep2_7->Fill(  RECOMU_PHI[ ipt[i] ],newweight ) ;
	 hIsoLep2_7->Fill( RECOMU_PFX_dB_new[ ipt[i] ],newweight ) ;
	 hSipLep2_7->Fill( RECOMU_SIP[ ipt[i] ],newweight ) ;
	 hIpLep2_7->Fill( RECOMU_IP[ ipt[i] ],newweight ) ;
	 hIpErLep2_7->Fill( RECOMU_IPERROR[ ipt[i] ],newweight ) ;
       }
       if( i == 0 && lep_type[i]==2){
         hPtLep1_7->Fill( RECOELE_PT[ ipt[i] ],newweight ) ;
         hYLep1_7->Fill(  RECOELE_ETA[ ipt[i] ],newweight ) ;
         hPhiLep1_7->Fill(  RECOELE_PHI[ ipt[i] ],newweight ) ;
         hIsoLep1_7->Fill( RECOELE_PFX_rho_new[ ipt[i] ],newweight ) ;
         hSipLep1_7->Fill( RECOELE_SIP[ ipt[i] ],newweight ) ;
         hIpLep1_7->Fill( RECOELE_IP[ ipt[i] ],newweight ) ;
         hIpErLep1_7->Fill( RECOELE_IPERROR[ ipt[i] ],newweight ) ;
       }
       if( i == 1 && lep_type[i]==2){
         hPtLep2_7->Fill( RECOELE_PT[ ipt[i] ],newweight ) ;
         hYLep2_7->Fill(  RECOELE_ETA[ ipt[i] ],newweight ) ;
         hPhiLep1_7->Fill(  RECOELE_PHI[ ipt[i] ],newweight ) ;
         hIsoLep2_7->Fill( RECOELE_PFX_rho_new[ ipt[i] ],newweight ) ;
         hSipLep2_7->Fill( RECOELE_SIP[ ipt[i] ],newweight ) ;
         hIpLep2_7->Fill( RECOELE_IP[ ipt[i] ],newweight ) ;
         hIpErLep2_7->Fill( RECOELE_IPERROR[ ipt[i] ],newweight ) ;
       }

     }//end fill leptons
     
     //hIso_7->Fill( Iso_max,newweight ) ;
     //hSip_7->Fill( Sip_max,newweight ) ;
     //hIp_7->Fill( Ip_max,newweight ) ;
     
     
     
     
     
     ++N_8_PFMET;
     N_8_PFMET_w=N_8_PFMET_w+newweight;
     
     hPFMET_8->Fill(RECO_PFMET,newweight);
     
     
     
     //Basic cuts to jets AND delta R section
     int njets_pass=0;
     int nbtag_pass=0;
     bool lead_jet=false;
     TLorentzVector JET1,JET2,BOT1,BOT2;
     int jet1=-999,jet2=-999,bot1=-999,bot2=-999;      
     int jetfail[100];
     float GOOD_JET_PT_MAX = 0.;
     float JET_PHI_PT_MAX = 0.;
     float max_dphi_jet_met = 0.;
     float min_dphi_jet_met = 999.;
     vector <int>  v_good_jets_index;

     for(int i=0;i<100;i++) jetfail[i]=0;
     
     for(int i=0;i<RECO_PFJET_N;i++){

       if(RECO_PFJET_PT[i]<-100) continue;     
       
       cout<<i<<" Jet with pt= "<<RECO_PFJET_PT[i]<<" ETA "<<RECO_PFJET_ETA[i]<<" PUID "<<RECO_PFJET_PUID[i] << " PUID_MVA "<< RECO_PFJET_PUID_MVA[i]<<endl;
 
       hPtJet_7->Fill(RECO_PFJET_PT[i],newweight);
       hYJet_7->Fill(RECO_PFJET_ETA[i],newweight);


       float dphi_jet_met=0.;
       dphi_jet_met=RECO_PFJET_PHI[i]-RECO_PFMET_PHI;
       cout <<" The dphi_jet_met for jet "<< i <<" is: "<< dphi_jet_met <<endl;
       cout <<" The RECO_PFMET_PHI is: "<< RECO_PFMET_PHI  <<endl;
       if (dphi_jet_met > 0. && fabs(dphi_jet_met)>mPI) dphi_jet_met-=float(2*mPI);
       if (dphi_jet_met < 0. && fabs(dphi_jet_met)>mPI) dphi_jet_met+=float(2*mPI);
       cout <<" The dphi_jet_met for jet "<< i <<" after removing 2mPI is: "<< dphi_jet_met <<endl;
       cout <<" The ABSOLUTE VALUE of dphi_jet_met for jet "<< i <<" after removing 2mPI is: "<< fabs(dphi_jet_met) <<endl;
       if (fabs(dphi_jet_met) >  max_dphi_jet_met)  max_dphi_jet_met=fabs(dphi_jet_met);
       cout <<"The value of the maximum dphi is: "<< max_dphi_jet_met<<endl;
       if (fabs(dphi_jet_met) <  min_dphi_jet_met)  min_dphi_jet_met=fabs(dphi_jet_met);
       cout <<"The value of the minimum dphi is: "<< min_dphi_jet_met<<endl;

       // JET smearing

       double jercorr = 1.0; double jercorrup = 1.0; double jercorrdn = 1.0;
/*
       if (MC_type == "Spring16" || MC_type== "Moriond17") {
         cout << "test1" << endl;
	 jetparameters.setJetPt(RECO_PFJET_PT[i]);
	 jetparameters.setJetEta(RECO_PFJET_ETA[i]);
	 //jetparameters.setRho(RHO_mu);
	 
         cout << "test2" << endl;
	 float relpterr = jetresolution.getResolution(jetparameters); // jet pt resolution
	 	 
	 cout << "test21" << endl; 
	 JME::JetParameters sf_parameters = {{JME::Binning::JetEta, RECO_PFJET_ETA[i]}, {JME::Binning::Rho, RHO_mu}};
         cout << "test22" << endl;
	 float factor = jetresolution_sf.getScaleFactor(sf_parameters);
         cout << "test23" << endl;
	 float factorup = jetresolution_sf.getScaleFactor(sf_parameters, Variation::UP);
	 float factordn = jetresolution_sf.getScaleFactor(sf_parameters, Variation::DOWN);
	 double pt_jer, pt_jerup, pt_jerdn;

         cout << "test3" << endl;	 
	 bool onegenjet=false;
	 for(int ijet=0;ijet<100;ijet++){
	   if (MC_GENJET_PT[ijet]>-999.){
	     double deltaPhi = DELTAPHI(RECO_PFJET_PHI[i],MC_GENJET_PHI[ijet]) ;
	     double deltaEta = fabs( RECO_PFJET_ETA[i] - MC_GENJET_ETA[ijet] );
	     double deltaR =sqrt( pow(deltaPhi,2) + pow(deltaEta,2));
	     if (deltaR<0.2
		 && (abs(RECO_PFJET_PT[i]-MC_GENJET_PT[ijet])<3*relpterr*RECO_PFJET_PT[i])) {
	       pt_jer = max(0.0,double(MC_GENJET_PT[ijet]+factor*(RECO_PFJET_PT[i]-MC_GENJET_PT[ijet])));
	       pt_jerup = max(0.0,double(MC_GENJET_PT[ijet]+factorup*(RECO_PFJET_PT[i]-MC_GENJET_PT[ijet])));
	       pt_jerdn = max(0.0,double(MC_GENJET_PT[ijet]+factordn*(RECO_PFJET_PT[i]-MC_GENJET_PT[ijet])));
	     }
	     onegenjet=true;
	   }
	 } 
	
         cout << "test3" << endl; 
	 if (onegenjet==false){
	   TRandom3 rand;
	   rand.SetSeed(abs(static_cast<int>(sin(RECO_PFJET_PHI[i])*100000)));
	   float smear = rand.Gaus(0,1.0);
	   float sigma = sqrt(factor*factor-1.0)*relpterr*RECO_PFJET_PT[i];
	   float sigmaup = sqrt(factorup*factorup-1.0)*relpterr*RECO_PFJET_PT[i];
	   float sigmadn = sqrt(factordn*factordn-1.0)*relpterr*RECO_PFJET_PT[i];
	   pt_jer = max(0.0,double(smear*sigma+RECO_PFJET_PT[i]));
	   pt_jerup = max(0.0,double(smear*sigmaup+RECO_PFJET_PT[i]));
	   pt_jerdn = max(0.0,double(smear*sigmadn+RECO_PFJET_PT[i]));
	 }
	 
	 jercorr = pt_jer/RECO_PFJET_PT[i];
	 jercorrup = pt_jerup/RECO_PFJET_PT[i];
	 jercorrdn = pt_jerdn/RECO_PFJET_PT[i];
	 
       }
       
       
       // re-definition of the jet 4 momentum
       TLorentzVector jet_jer_tmp,jet_jer;
       jet_jer_tmp.SetPtEtaPhiE(RECO_PFJET_PT[i],RECO_PFJET_ETA[i],RECO_PFJET_PHI[i],RECO_PFJET_ET[i]*TMath::CosH(RECO_PFJET_ETA[i]));
       jet_jer.SetPxPyPzE(jercorr*jet_jer_tmp.Px(),jercorr*jet_jer_tmp.Py(),jercorr*jet_jer_tmp.Pz(),jercorr*jet_jer_tmp.E());
       RECO_PFJET_PT[i]=jet_jer.Perp(); // pt jet corrected
       RECO_PFJET_ETA[i]=jet_jer.Eta();
       RECO_PFJET_PHI[i]=jet_jer.Phi();
       RECO_PFJET_ET[i]=jet_jer.Et();
   */   
       bool goodjet = RECO_PFJET_NHF[i] < 0.99 &&
                      RECO_PFJET_NEF[i] < 0.99 &&
                      RECO_PFJET_CHF[i] < 0.99 &&
                      RECO_PFJET_CEF[i] < 0.99 &&
                      RECO_PFJET_nconstituents[i] > 1 &&
                      RECO_PFJET_NCH[i] > 0;
       
 
       if(RECO_PFJET_PT[i]>30. && fabs(RECO_PFJET_ETA[i])<2.4 && goodjet==1){
       
      	 //Check that jet has deltaR>0.4 away from any tight lepton corrected for FSR
	 for(int mu = 0; mu < N_good; ++mu){
//	   if (fabs(RECOMU_SIP[iL[mu]])>=4.) continue;  //qier
    	   if (RECOMU_PFX_dB_new[iL[mu]]>=0.20) continue;
	   double deltaR = sqrt( pow(DELTAPHI(RECO_PFJET_PHI[i],RECOMU_PHI[iL[mu]]),2) + pow(RECO_PFJET_ETA[i] - RECOMU_ETA[iL[mu]],2));
	   cout << "1st lepton muon: " << " pT=" << RECOMU_PT[iL[mu]] <<" deltaR "<< deltaR <<endl;	   
	   if (deltaR<0.4){
	     jetfail[i]=1;
     	     cout << " jetfail " << jetfail[i] <<endl;
	     break;
     	   }
     	 }
	 
      	 for(int ele = 0; ele < Ne_good; ++ele){
      	//   if (fabs(RECOELE_SIP[iLe[ele]])>=4.) continue;
	   if (RECOELE_PFX_rho_new[iLe[ele]]>=0.20) continue;
      	   double deltaR = sqrt( pow(DELTAPHI(RECO_PFJET_PHI[i],RECOELE_PHI[iLe[ele]]),2) + pow(RECO_PFJET_ETA[i] - RECOELE_ETA[iLe[ele]],2));
     	   cout << "1st lepton electron: " << " pT=" << RECOELE_PT[iLe[ele]] <<" deltaR "<< deltaR <<endl;
	   if (deltaR<0.4){
     	     jetfail[i]=1;
     	     cout << " jetfail " << jetfail[i] <<endl;
	     break;
     	   }
     	 }
	 
	 // cleaning w.r.t FSR photons attached to leptons
	 for(int j=0.;j<Nphotons;j++) {
           if (iLp_l[j]!=-1 && (iLp_tagEM[j]==0 || iLp_tagEM[j]==1) ) {
	     if (iLp_tagEM[j]==0) cout << "There is photon with pT= " << RECOPFPHOT_PT[iLp[j]] << " attached to a muon with pT= " << RECOMU_PT[iLp_l[j]] << endl;
	     if (iLp_tagEM[j]==1) cout << "There is photon with pT= " << RECOPFPHOT_PT[iLp[j]] << " attached to a electron with pT= " << RECOELE_PT[iLp_l[j]] << endl;
	     double deltaR = sqrt( pow(DELTAPHI(RECO_PFJET_PHI[i],RECOPFPHOT_PHI[iLp[j]]),2) + pow(RECO_PFJET_ETA[i] - RECOPFPHOT_ETA[iLp[j]],2));
	     if (deltaR<0.4){
	       jetfail[i]=1;
	       cout << " jetfail " << jetfail[i] <<endl;
	       break;
	     }
	   }
         }
	 // 


	 if (jetfail[i]==0){
	   cout<< " PASS jet " <<i<<" PT= "<<RECO_PFJET_PT[i]<<" ETA= "<<RECO_PFJET_ETA[i]<<" PUID= "<<RECO_PFJET_PUID[i]<<endl;
	   njets_pass++;
           if(RECO_PFJET_PT[i]>50) lead_jet = true;
           hPtJet_8->Fill(RECO_PFJET_PT[i],newweight);
           hYJet_8->Fill(RECO_PFJET_ETA[i],newweight);
           //b-tagging
           if(cSV_BTagJet_DISCR[i]> 0.89) nbtag_pass++;
	   if (njets_pass==1){
	     jet1=i;
	     JET1.SetPtEtaPhiE(RECO_PFJET_PT[i],RECO_PFJET_ETA[i],RECO_PFJET_PHI[i],RECO_PFJET_ET[i]*TMath::CosH(RECO_PFJET_ETA[i]));
	     GOOD_JET_PT_MAX=RECO_PFJET_PT[i];
	     JET_PHI_PT_MAX=RECO_PFJET_PHI[i];
             bdiscr_5_lead->Fill(cSV_BTagJet_DISCR[i],newweight);
	     cout<<"Among the jets that pass the jet with the highet pt is the jet of index "<< i <<". It has pt "<<GOOD_JET_PT_MAX<<". The corresponding value of phi is " << JET_PHI_PT_MAX <<endl;
	   }
	   if (njets_pass==2){
	     jet2=i;
	     JET2.SetPtEtaPhiE(RECO_PFJET_PT[i],RECO_PFJET_ETA[i],RECO_PFJET_PHI[i],RECO_PFJET_ET[i]*TMath::CosH(RECO_PFJET_ETA[i]));
             bdiscr_5_sub->Fill(cSV_BTagJet_DISCR[i],newweight);
	   }
           //b-tagging
           if (nbtag_pass==1){
             bot1=i;
             BOT1.SetPtEtaPhiE(RECO_PFJET_PT[i],RECO_PFJET_ETA[i],RECO_PFJET_PHI[i],RECO_PFJET_ET[i]*TMath::CosH(RECO_PFJET_ETA[i]));
           }
           if (nbtag_pass==2){
             bot2=i;
             BOT2.SetPtEtaPhiE(RECO_PFJET_PT[i],RECO_PFJET_ETA[i],RECO_PFJET_PHI[i],RECO_PFJET_ET[i]*TMath::CosH(RECO_PFJET_ETA[i]));
           }
	 }

       }
       else{
      	 jetfail[i]=1;
       }
       //cout<<" JETFAIL "<<jetfail[i]<<endl;
     }


     hNjets_8->Fill(njets_pass,newweight);
     ff_weight = newweight;
     f_Njets = njets_pass;
     mettree->Fill();  
  
     if(njets_pass<2) continue;
     double Mjj = (JET1+JET2).M();

     Mjj_6->Fill(Mjj,newweight);

//     if(Mjj>200){
// Plot non-jet distribution
     for(int i = 0; i < 2; ++i){

       if( i == 0 && Z1tag==1){
         hPtLep1_8->Fill( RECOMU_PT[ ipt[i] ],newweight ) ;
         hYLep1_8->Fill(  RECOMU_ETA[ ipt[i] ],newweight ) ;
         hIsoLep1_8->Fill( RECOMU_PFX_dB_new[ ipt[i] ],newweight ) ;
         hSipLep1_8->Fill( RECOMU_SIP[ ipt[i] ],newweight ) ;
         hIpLep1_8->Fill( RECOMU_IP[ ipt[i] ],newweight ) ;
         hIpErLep1_8->Fill( RECOMU_IPERROR[ ipt[i] ],newweight ) ;
       }
       if( i == 1 && Z1tag==1){
         hPtLep2_8->Fill( RECOMU_PT[ ipt[i] ],newweight ) ;
         hYLep2_8->Fill(  RECOMU_ETA[ ipt[i] ],newweight ) ;
         hIsoLep2_8->Fill( RECOMU_PFX_dB_new[ ipt[i] ],newweight ) ;
         hSipLep2_8->Fill( RECOMU_SIP[ ipt[i] ],newweight ) ;
         hIpLep2_8->Fill( RECOMU_IP[ ipt[i] ],newweight ) ;
         hIpErLep2_8->Fill( RECOMU_IPERROR[ ipt[i] ],newweight ) ;
       }

       if( i == 0 && Z1tag==2){
         hPtLep1_8->Fill( RECOELE_PT[ ipt[i] ],newweight ) ;
         hYLep1_8->Fill(  RECOELE_ETA[ ipt[i] ],newweight ) ;
         hIsoLep1_8->Fill( RECOELE_PFX_rho_new[ ipt[i] ],newweight ) ;
         hSipLep1_8->Fill( RECOELE_SIP[ ipt[i] ],newweight ) ;
         hIpLep1_8->Fill( RECOELE_IP[ ipt[i] ],newweight ) ;
         hIpErLep1_8->Fill( RECOELE_IPERROR[ ipt[i] ],newweight ) ;
       }
       if( i == 1 && Z1tag==2){
         hPtLep2_8->Fill( RECOELE_PT[ ipt[i] ],newweight ) ;
         hYLep2_8->Fill(  RECOELE_ETA[ ipt[i] ],newweight ) ;
         hIsoLep2_8->Fill( RECOELE_PFX_rho_new[ ipt[i] ],newweight ) ;
         hSipLep2_8->Fill( RECOELE_SIP[ ipt[i] ],newweight ) ;
         hIpLep2_8->Fill( RECOELE_IP[ ipt[i] ],newweight ) ;
         hIpErLep2_8->Fill( RECOELE_IPERROR[ ipt[i] ],newweight ) ;
       }

     }//end fill leptons
//}
     if(nbtag_pass!=2) continue;

     cout <<"GOOD BOT PT MAX is: "<< GOOD_JET_PT_MAX << endl;
     cout << "The max value of Deltaphi(jet,MET) among all jets in the event is "<<max_dphi_jet_met<< endl;
     cout << "The min value of Deltaphi(jet,MET) among all jets in the event is "<<min_dphi_jet_met<< endl;
     
//     hDPHI_MIN_JET_MET_8->Fill(min_dphi_jet_met, newweight); 
//     hDPHI_MAX_JET_MET_8->Fill(max_dphi_jet_met, newweight); 

     double Mbb = (BOT1+BOT2).M();
     double PTbb = (BOT1+BOT2).Pt();

     Mbb_6->Fill(Mbb,newweight);
     ptbb_6->Fill(PTbb,newweight);
     hMZ1_7->Fill(massZ1,newweight);
     hPtZ1_7->Fill( ptZ1,newweight );
     hYZ1_7->Fill( Y_Z1,newweight );
     //Number of jets and mJJ,delta eta cuts // categories
    //}
     

     //  exactly 4 leptons + at least 2 jets with Djet>0.5 + at most 1 b-tag jet in the event  - category 2


     // filling branches in the reduced tree
     f_weight = newweight;
     
     f_int_weight = -1;
     
     f_pu_weight = pu_weight;
     f_eff_weight = eff_weight;

     f_run = Run;
     f_event = Event;
     f_lumi = LumiSection;

     if (Z1tag==1){
       f_lept1_pt  = RECOMU_PT[indexleptonfinal[0]] ;
       f_lept1_eta = RECOMU_ETA[indexleptonfinal[0]] ;
       f_lept1_phi = RECOMU_PHI[indexleptonfinal[0]];
       f_lept1_charge = RECOMU_CHARGE[indexleptonfinal[0]];
       f_lept1_pfx = RECOMU_PFX_dB_new[indexleptonfinal[0]];
       f_lept1_sip = RECOMU_SIP[indexleptonfinal[0]];
       //    f_lept1_mvaid = RECOMU_mvaNonTrigV0[indexleptonfinal[0]];
       f_lept2_pt  = RECOMU_PT[indexleptonfinal[1]] ;
       f_lept2_eta = RECOMU_ETA[indexleptonfinal[1]] ;
       f_lept2_phi = RECOMU_PHI[indexleptonfinal[1]];
       f_lept2_charge = RECOMU_CHARGE[indexleptonfinal[1]];
       f_lept2_pfx = RECOMU_PFX_dB_new[indexleptonfinal[1]];
       f_lept2_sip = RECOMU_SIP[indexleptonfinal[1]];
       //    f_lept2_mvaid = RECOMU_mvaNonTrigV0[indexleptonfinal[1]];
     }
     else if (Z1tag==2) {
       f_lept1_pt = RECOELE_PT[indexleptonfinal[0]] ;
       f_lept1_eta = RECOELE_ETA[indexleptonfinal[0]] ;
       f_lept1_phi = RECOELE_PHI[indexleptonfinal[0]];
       f_lept1_charge = RECOELE_CHARGE[indexleptonfinal[0]];
       f_lept1_pfx = RECOELE_PFX_rho_new[indexleptonfinal[0]];
       f_lept1_sip = RECOELE_SIP[indexleptonfinal[0]];
       f_lept1_mvaid = RECOELE_mvaNonTrigV0[indexleptonfinal[0]];
       f_lept2_pt = RECOELE_PT[indexleptonfinal[1]] ;
       f_lept2_eta = RECOELE_ETA[indexleptonfinal[1]] ;
       f_lept2_phi = RECOELE_PHI[indexleptonfinal[1]];
       f_lept2_charge = RECOELE_CHARGE[indexleptonfinal[1]];
       f_lept2_pfx = RECOELE_PFX_rho_new[indexleptonfinal[1]];
       f_lept2_sip = RECOELE_SIP[indexleptonfinal[1]];
       f_lept2_mvaid = RECOELE_mvaNonTrigV0[indexleptonfinal[1]];

     }
     
     //f_iso_max = Iso_max;
     //f_sip_max = Sip_max;
     f_Z1mass = massZ1;
     f_angle_costhetastar = -99.;
     f_angle_costheta1 = -99.;
     f_angle_costheta2 = -99.;
     f_angle_phi = -99.;
     f_angle_phistar1 = -99.;
     f_njets_pass = njets_pass;
     f_deltajj = -999.;
     f_massjj = -999.;
     f_D_jet = -999.;
     
     
     ++N_8; 
     // fill final tree
//     finaltree->Fill();
     newtree->Fill();
     cout << "filling tree" << endl;
     

   } // end loop on entries

   // write on output txt file:

   
   output_txt << "N_0 "  << N_0  << " \n" 
	      << "N_01 " << N_01 << " \n"	
	      << "N_02 " << N_02 << " \n"	
	      << "N_1 "  << N_1  << " \n"	
	      << "N_2 "  << N_2  << " \n"	
	      << "N_3a " << N_3a << " \n"	
	      << "N_3_FSR " << N_3_FSR << " \n"	
	      << "N_3b " << N_3b << " \n"	
	      << "N_4a " << N_4a << " \n"	
	      << "N_4b " << N_4b << " \n"	
	      << "N_4c " << N_4c << " \n"	
	      << "N_4d " << N_4d << " \n"	
	      << "N_5 "  << N_5  << " \n"	
	      << "N_6 "  << N_6  << " \n"	
	      << "N_7 "  << N_7  << " \n"	
	      << "N_8 "  << N_8  << " \n"
	      << "N_8_a "<< N_8_a<< " \n"
      	      << "N_9 "  << N_9  << " \n"
      	      << "N_9_1FSR " << N_9_1FSR  << " \n" 
	      << "N_9_2FSR " << N_9_2FSR  << " \n" 
	      << "N_9PS "    << N_9PS << " \n"
              << "N_9GRAV"   << N_9GRAV << "\n"
	      << "N_9a_VBF " << N_9a_VBF << " \n"
              << "N_9b_VBF " << N_9b_VBF << "\n"
	      << "N_VBF "    << N_VBF << " \n"
	      << "N_9_PFMET "<< N_9_PFMET << " \n";

   output_txt_vbf
              << "N_0 "  << N_0  << " \n" 
	      << "N_01 " << N_01 << " \n"	
	      << "N_02 " << N_02 << " \n"	
	      << "N_1 "  << N_1  << " \n"	
	      << "N_2 "  << N_2  << " \n"	
	      << "N_3a " << N_3a << " \n"	
	      << "N_3_FSR " << N_3_FSR << " \n"	
	      << "N_3b " << N_3b << " \n"	
	      << "N_4a " << N_4a << " \n"	
	      << "N_4b " << N_4b << " \n"	
	      << "N_4c " << N_4c << " \n"	
	      << "N_4d " << N_4d << " \n"	
	      << "N_5 "  << N_5  << " \n"	
	      << "N_6 "  << N_6  << " \n"	
	      << "N_7 "  << N_7  << " \n"	
	      << "N_8 "  << N_8  << " \n"
	      << "N_8_a "<< N_8_a<< " \n"
      	      << "N_9 "  << N_9  << " \n"
      	      << "N_9_1FSR " << N_9_1FSR  << " \n" 
	      << "N_9_2FSR " << N_9_2FSR  << " \n" 
	      << "N_9PS "    << N_9PS << " \n"
              << "N_9GRAV"   << N_9GRAV << "\n"
	      << "N_9a_VBF " << N_9a_VBF << " \n"
              << "N_9b_VBF " << N_9b_VBF << "\n"
	      << "N_VBF "    << N_VBF << " \n"
	      << "N_9_PFMET "<< N_9_PFMET << " \n";

   bnn_file.close();
   output_txt.close();
   output_txt_vbf.close();
   


   cout << "N_0 "  << N_0  << " \n" 
	      << "N_01 " << N_01 << " \n"	
	      << "N_02 " << N_02 << " \n"	
	      << "N_1 "  << N_1  << " \n"	
	      << "N_2 "  << N_2  << " \n"	
	      << "N_3a " << N_3a << " \n"	
	      << "N_3_FSR " << N_3_FSR << " \n"	
	      << "N_3b " << N_3b << " \n"	
	      << "N_4a " << N_4a << " \n"	
	      << "N_4b " << N_4b << " \n"	
	      << "N_4c " << N_4c << " \n"	
	      << "N_4d " << N_4d << " \n"	
	      << "N_5 "  << N_5  << " \n"	
	      << "N_6 "  << N_6  << " \n"	
	      << "N_7 "  << N_7  << " \n"	
	      << "N_8 "  << N_8  << " \n"
	      << "N_8_a "<< N_8_a<< " \n"
      	      << "N_9 "  << N_9  << " \n"
      	      << "N_9_1FSR "  << N_9_1FSR  << " \n" 
	      << "N_9_2FSR "  << N_9_2FSR  << " \n" 
	      << "N_9PS "     << N_9PS << " \n"
	      << "N_9GRAV"    << N_9GRAV << "\n"
	      << "N_9a_VBF "  << N_9a_VBF << " \n"
              << "N_9b_VBF "  << N_9b_VBF << "\n"
	      << "N_VBF "     << N_VBF << " \n"
	      << "N_9_PFMET "<< N_9_PFMET << " \n";

   
   nEvent_4l->GetXaxis()->SetBinLabel(1,"Init.");
   nEvent_4l->GetXaxis()->SetBinLabel(2,"MCTruth: 4mu");
   nEvent_4l->GetXaxis()->SetBinLabel(3,"MCTruth: Acc");
   nEvent_4l->GetXaxis()->SetBinLabel(4,"Init");
   nEvent_4l->GetXaxis()->SetBinLabel(5,"At least 2 tight lept.");
   nEvent_4l->GetXaxis()->SetBinLabel(6,"Z+#gamma");
   nEvent_4l->GetXaxis()->SetBinLabel(7,"Z candidate");
   nEvent_4l->GetXaxis()->SetBinLabel(8,"m_{Z}");
   nEvent_4l->GetXaxis()->SetBinLabel(9,"Z_{1} and Z_{2}");
   nEvent_4l->GetXaxis()->SetBinLabel(10,"Z_{2} pairs > 1");
   nEvent_4l->GetXaxis()->SetBinLabel(11,"m4l > 70");
   nEvent_4l->GetXaxis()->SetBinLabel(12,"MELA KD > 0.1 and mH>100");
   nEvent_4l->GetXaxis()->SetBinLabel(13,"MET>100");
   nEvent_4l->GetXaxis()->SetBinLabel(14,"one Z+#gamma");
   nEvent_4l->GetXaxis()->SetBinLabel(15,"two Z+#gamma");

   nEvent_4l_w->GetXaxis()->SetBinLabel(1,"Init.");
   nEvent_4l_w->GetXaxis()->SetBinLabel(2,"MCTruth: 4mu");
   nEvent_4l_w->GetXaxis()->SetBinLabel(3,"MCTruth: Acc");
   nEvent_4l_w->GetXaxis()->SetBinLabel(4,"Init");
   nEvent_4l_w->GetXaxis()->SetBinLabel(5,"At least 2 tight lept.");
   nEvent_4l_w->GetXaxis()->SetBinLabel(6,"Z+#gamma");
   nEvent_4l_w->GetXaxis()->SetBinLabel(7,"Z candidate");
   nEvent_4l_w->GetXaxis()->SetBinLabel(8,"m_{Z}");
   nEvent_4l_w->GetXaxis()->SetBinLabel(9,"Z_{1} and Z_{2}");
   nEvent_4l_w->GetXaxis()->SetBinLabel(10,"Z_{2} pairs > 1");
   nEvent_4l_w->GetXaxis()->SetBinLabel(11,"m4l > 70");
   nEvent_4l_w->GetXaxis()->SetBinLabel(12,"MELA KD > 0.1 and mH>100");
   nEvent_4l_w->GetXaxis()->SetBinLabel(13,"MET>100");
   nEvent_4l_w->GetXaxis()->SetBinLabel(14,"one Z+#gamma");
   nEvent_4l_w->GetXaxis()->SetBinLabel(15,"two Z+#gamma");

   nEvent_4l->SetBinContent(1,N_0);
   nEvent_4l->SetBinContent(2,N_01);
   nEvent_4l->SetBinContent(3,N_02);
   nEvent_4l->SetBinContent(4,N_1);
   nEvent_4l->SetBinContent(5,N_2);
   nEvent_4l->SetBinContent(6,N_3_FSR);
   nEvent_4l->SetBinContent(7,N_3a);
   nEvent_4l->SetBinContent(8,N_3b);
   nEvent_4l->SetBinContent(9,N_4b);
   nEvent_4l->SetBinContent(10,N_4c);
   nEvent_4l->SetBinContent(11,N_7);
   nEvent_4l->SetBinContent(12,N_9);
   nEvent_4l->SetBinContent(13,N_9_PFMET);
   nEvent_4l->SetBinContent(14,N_9_1FSR);
   nEvent_4l->SetBinContent(15,N_9_2FSR);nEvent_4l_w->SetBinContent(1,N_0_w);
   nEvent_4l_w->SetBinContent(2,N_01_w);
   nEvent_4l_w->SetBinContent(3,N_02_w);
   nEvent_4l_w->SetBinContent(4,N_1_w);
   nEvent_4l_w->SetBinContent(5,N_2_w);
   nEvent_4l_w->SetBinContent(6,N_3_FSR_w);
   nEvent_4l_w->SetBinContent(7,N_3a_w);
   nEvent_4l_w->SetBinContent(8,N_3b_w);
   nEvent_4l_w->SetBinContent(9,N_4b_w);
   nEvent_4l_w->SetBinContent(10,N_4c_w);
   nEvent_4l_w->SetBinContent(11,N_7_w);
   nEvent_4l_w->SetBinContent(12,N_9_w);
   nEvent_4l_w->SetBinContent(13,N_9_PFMET_w);
   nEvent_4l_w->SetBinContent(14,N_9_1FSR_w);
   nEvent_4l_w->SetBinContent(15,N_9_2FSR_w);

   // for(int i=0; i<61; i++){
   //   Char_t PFMET_cut_char[500];
   //   sprintf (PFMET_cut_char,"%s",cut_PFMET.at(i));
   //   nEvent_CUT->GetXaxis()->SetBinLabel(i+1,PFMET_cut_char);
   //   //cout<<PFMET_cut_char<<endl;
   // }

   // for(int i=0; i<61; i++){
   //   Char_t PFMET_cut_char[500];
   //   sprintf (PFMET_cut_char,"%s",cut_PFMET.at(i));
   //   nEvent_CUT_w->GetXaxis()->SetBinLabel(i+1,PFMET_cut_char);
   //   //cout<<PFMET_cut_char<<endl;
   // }

   nEvent_CUT->GetXaxis()->SetBinLabel(1,"N>0");
   nEvent_CUT->GetXaxis()->SetBinLabel(2,"N>5");
   nEvent_CUT->GetXaxis()->SetBinLabel(3,"N>10");
   nEvent_CUT->GetXaxis()->SetBinLabel(4,"N>15");
   nEvent_CUT->GetXaxis()->SetBinLabel(5,"N>20");
   nEvent_CUT->GetXaxis()->SetBinLabel(6,"N>25");
   nEvent_CUT->GetXaxis()->SetBinLabel(7,"N>30");
   nEvent_CUT->GetXaxis()->SetBinLabel(8,"N>35");
   nEvent_CUT->GetXaxis()->SetBinLabel(9,"N>40");
   nEvent_CUT->GetXaxis()->SetBinLabel(10,"N>45");
   nEvent_CUT->GetXaxis()->SetBinLabel(11,"N>50");
   nEvent_CUT->GetXaxis()->SetBinLabel(12,"N>55");
   nEvent_CUT->GetXaxis()->SetBinLabel(13,"N>60");
   nEvent_CUT->GetXaxis()->SetBinLabel(14,"N>65");
   nEvent_CUT->GetXaxis()->SetBinLabel(15,"N>70");
   nEvent_CUT->GetXaxis()->SetBinLabel(16,"N>75");
   nEvent_CUT->GetXaxis()->SetBinLabel(17,"N>80");
   nEvent_CUT->GetXaxis()->SetBinLabel(18,"N>85");
   nEvent_CUT->GetXaxis()->SetBinLabel(19,"N>90");
   nEvent_CUT->GetXaxis()->SetBinLabel(20,"N>95");
   nEvent_CUT->GetXaxis()->SetBinLabel(21,"N>100");
   nEvent_CUT->GetXaxis()->SetBinLabel(22,"N>105");
   nEvent_CUT->GetXaxis()->SetBinLabel(23,"N>110");
   nEvent_CUT->GetXaxis()->SetBinLabel(24,"N>115");
   nEvent_CUT->GetXaxis()->SetBinLabel(25,"N>120");
   nEvent_CUT->GetXaxis()->SetBinLabel(26,"N>125");
   nEvent_CUT->GetXaxis()->SetBinLabel(27,"N>130");
   nEvent_CUT->GetXaxis()->SetBinLabel(28,"N>135");
   nEvent_CUT->GetXaxis()->SetBinLabel(29,"N>140");
   nEvent_CUT->GetXaxis()->SetBinLabel(30,"N>145");
   nEvent_CUT->GetXaxis()->SetBinLabel(31,"N>150");
   nEvent_CUT->GetXaxis()->SetBinLabel(32,"N>155");
   nEvent_CUT->GetXaxis()->SetBinLabel(33,"N>160");
   nEvent_CUT->GetXaxis()->SetBinLabel(34,"N>165");
   nEvent_CUT->GetXaxis()->SetBinLabel(35,"N>170");
   nEvent_CUT->GetXaxis()->SetBinLabel(36,"N>175");
   nEvent_CUT->GetXaxis()->SetBinLabel(37,"N>180");
   nEvent_CUT->GetXaxis()->SetBinLabel(38,"N>185");
   nEvent_CUT->GetXaxis()->SetBinLabel(39,"N>190");
   nEvent_CUT->GetXaxis()->SetBinLabel(40,"N>195");
   nEvent_CUT->GetXaxis()->SetBinLabel(41,"N>200");
   nEvent_CUT->GetXaxis()->SetBinLabel(42,"N>205");
   nEvent_CUT->GetXaxis()->SetBinLabel(43,"N>210");
   nEvent_CUT->GetXaxis()->SetBinLabel(44,"N>215");
   nEvent_CUT->GetXaxis()->SetBinLabel(45,"N>220");
   nEvent_CUT->GetXaxis()->SetBinLabel(46,"N>225");
   nEvent_CUT->GetXaxis()->SetBinLabel(47,"N>230");
   nEvent_CUT->GetXaxis()->SetBinLabel(48,"N>235");
   nEvent_CUT->GetXaxis()->SetBinLabel(49,"N>240");
   nEvent_CUT->GetXaxis()->SetBinLabel(50,"N>245");
   nEvent_CUT->GetXaxis()->SetBinLabel(51,"N>250");
   nEvent_CUT->GetXaxis()->SetBinLabel(52,"N>255");
   nEvent_CUT->GetXaxis()->SetBinLabel(53,"N>260");
   nEvent_CUT->GetXaxis()->SetBinLabel(54,"N>265");
   nEvent_CUT->GetXaxis()->SetBinLabel(55,"N>270");
   nEvent_CUT->GetXaxis()->SetBinLabel(56,"N>275");
   nEvent_CUT->GetXaxis()->SetBinLabel(57,"N>280");
   nEvent_CUT->GetXaxis()->SetBinLabel(58,"N>285");
   nEvent_CUT->GetXaxis()->SetBinLabel(59,"N>290");
   nEvent_CUT->GetXaxis()->SetBinLabel(60,"N>295");
   nEvent_CUT->GetXaxis()->SetBinLabel(61,"N>300");


   nEvent_CUT_w->GetXaxis()->SetBinLabel(1,"N>0");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(2,"N>5");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(3,"N>10");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(4,"N>15");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(5,"N>20");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(6,"N>25");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(7,"N>30");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(8,"N>35");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(9,"N>40");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(10,"N>45");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(11,"N>50");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(12,"N>55");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(13,"N>60");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(14,"N>65");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(15,"N>70");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(16,"N>75");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(17,"N>80");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(18,"N>85");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(19,"N>90");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(20,"N>95");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(21,"N>100");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(22,"N>105");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(23,"N>110");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(24,"N>115");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(25,"N>120");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(26,"N>125");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(27,"N>130");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(28,"N>135");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(29,"N>140");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(30,"N>145");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(31,"N>150");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(32,"N>155");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(33,"N>160");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(34,"N>165");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(35,"N>170");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(36,"N>175");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(37,"N>180");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(38,"N>185");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(39,"N>190");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(40,"N>195");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(41,"N>200");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(42,"N>205");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(43,"N>210");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(44,"N>215");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(45,"N>220");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(46,"N>225");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(47,"N>230");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(48,"N>235");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(49,"N>240");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(50,"N>245");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(51,"N>250");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(52,"N>255");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(53,"N>260");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(54,"N>265");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(55,"N>270");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(56,"N>275");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(57,"N>280");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(58,"N>285");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(59,"N>290");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(60,"N>295");
   nEvent_CUT_w->GetXaxis()->SetBinLabel(61,"N>300");
   
   for(int i= 0; i<counter_cut_PFMET.size(); i++){
     nEvent_CUT->SetBinContent(i+1,counter_cut_PFMET.at(i));
   }
   
   
   for(int i= 0; i<counter_cut_PFMET_w.size(); i++){
     nEvent_CUT_w->SetBinContent(i+1,counter_cut_PFMET_w.at(i));
   }   
   
   

   // write on output root file:
   _filePU->Close();
   theFile->cd();
   //z1tree->Write();
   newtree->Write();
   mettree->Write();
   theFile->Write();
   theFile->Close();
   skimfile->cd();
  // finaltree->Write();
   skimfile->Write();
   skimfile->Close();
} // end main


double HZZ4LeptonsAnalysis::EAele(int index,bool use2011EA){
  
  double EffectiveArea=0.;
  if (use2011EA){
    if (fabs(RECOELE_scl_Eta[index]) >= 0.0   && fabs(RECOELE_scl_Eta[index]) < 1.0 )   EffectiveArea = 0.18;
    if (fabs(RECOELE_scl_Eta[index]) >= 1.0   && fabs(RECOELE_scl_Eta[index]) < 1.479 ) EffectiveArea = 0.20;
    if (fabs(RECOELE_scl_Eta[index]) >= 1.479 && fabs(RECOELE_scl_Eta[index]) < 2.0 )   EffectiveArea = 0.15;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.0   && fabs(RECOELE_scl_Eta[index]) < 2.2 )   EffectiveArea = 0.19;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.2   && fabs(RECOELE_scl_Eta[index]) < 2.3 )   EffectiveArea = 0.21;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.3   && fabs(RECOELE_scl_Eta[index]) < 2.4 )   EffectiveArea = 0.22;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.4 )                                           EffectiveArea = 0.29;
  }
  //else { // 7_4_x use eta
  // if (fabs(RECOELE_ETA[index]) >= 0.0   && fabs(RECOELE_ETA[index]) < 0.8 )   EffectiveArea = 0.1830;
  // if (fabs(RECOELE_ETA[index]) >= 0.8   && fabs(RECOELE_ETA[index]) < 1.3 )   EffectiveArea = 0.1734;
  // if (fabs(RECOELE_ETA[index]) >= 1.3   && fabs(RECOELE_ETA[index]) < 2.0 )   EffectiveArea = 0.1077;
  // if (fabs(RECOELE_ETA[index]) >= 2.0   && fabs(RECOELE_ETA[index]) < 2.2 )   EffectiveArea = 0.1565;
  // if (fabs(RECOELE_ETA[index]) >= 2.2 )                                       EffectiveArea = 0.2680;
    //}                                                                                                                                                                             
  else { // 7_6_X use eta supercluster                                                                                                                                             
    if (fabs(RECOELE_scl_Eta[index]) >= 0.0   && fabs(RECOELE_scl_Eta[index]) < 1.0 )   EffectiveArea = 0.1752;
    if (fabs(RECOELE_scl_Eta[index]) >= 1.0   && fabs(RECOELE_scl_Eta[index]) < 1.479 ) EffectiveArea = 0.1862;
    if (fabs(RECOELE_scl_Eta[index]) >= 1.479 && fabs(RECOELE_scl_Eta[index]) < 2.0 )   EffectiveArea = 0.1411;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.0   && fabs(RECOELE_scl_Eta[index]) < 2.2 )   EffectiveArea = 0.1534;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.2   && fabs(RECOELE_scl_Eta[index]) < 2.3 )   EffectiveArea = 0.1903;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.3   && fabs(RECOELE_scl_Eta[index]) < 2.4 )   EffectiveArea = 0.2243;
    if (fabs(RECOELE_scl_Eta[index]) >= 2.4   && fabs(RECOELE_scl_Eta[index]) < 5.0  )  EffectiveArea = 0.2687;
  }
  
  return EffectiveArea;
  
}

double DELTAPHI( double phi1, double phi2 ){

	if( phi1 > mPI || phi1 < -mPI || phi2 > mPI || phi2 < -mPI) {
	  // cout << "Angles out of range!!! " << endl;
	  // cout << " phi1 " << phi1 << endl;
	  // cout << " phi2 " << phi2 << endl;
	  return -999;
	}
	float dp=std::abs(phi1-phi2);
	if (dp>mPI) dp-=float(2*mPI);
	return dp;
	//return  min( fabs( phi1 - phi2 ) , 2*mPI - fabs( phi1 - phi2 ) ) ;

}

double invmass (float M1, float PT1, float ETA1, float PHI1, float M2, float PT2, float ETA2, float PHI2 ){ 
 float phi1=PHI1; 
 float eta1=ETA1; 
 float pt1=PT1; 
 float m1=M1; 

 float px1=pt1*cos(phi1); 
 float py1=pt1*sin(phi1); 
 float pz1=pt1/(2.*(exp(-1*eta1))/(1.0-exp(-2.*eta1))); 

 float phi2=PHI2; 
 float eta2=ETA2; 
 float pt2=PT2; 
 float m2=M2;

 float px2=pt2*cos(phi2); 
 float py2=pt2*sin(phi2); 
 float pz2=pt2/(2.*(exp(-1*eta2))/(1.0-exp(-2.*eta2))); 

 float e1sqr=pz1*pz1+pt1*pt1+m1*m1; 
 float e2sqr=pz2*pz2+pt2*pt2+m2*m2; 
 float e1e2=sqrt(e1sqr*e2sqr); 
 float p1dotp2=px1*px2+py1*py2+pz1*pz2; 

 float m=sqrt(m1*m1+m2*m2+2.*(e1e2-p1dotp2)); 
 //cout << "Invariant mass= " << m << endl;  
 return m;
} // float invmass closed

double HZZ4LeptonsAnalysis::masserror( std::vector<TLorentzVector> Lep, std::vector<double> pterr){ 

  //	if(Lep.size()!=4 or pterr.size()!=4) {std::cout<<" Lepsize="<<Lep.size()<<", "<<pterr.size()<<std::endl;}
  int debug_ = 0;
  TLorentzVector compositeParticle ;
  for(unsigned int i=0; i<Lep.size(); i++){
    compositeParticle+=Lep[i];
    if(debug_) std::cout<<" in mass error :  add lep  "<<i<<endl;
  }
  double mass  =  compositeParticle.M();
  
  if(debug_) std::cout<<" in mass error :  mass "<<mass<<endl;
  double masserr = 0;
  
  for(unsigned int i=0; i<Lep.size(); i++){
    if(debug_) std::cout<<" in mass error :  varying lep "<<i<<endl;
    TLorentzVector variedLep; // = Lep[i];
    
    if(debug_) std::cout<<" in mass error : pterr = "<<pterr[i]<<endl;
    variedLep.SetPtEtaPhiM(Lep[i].Pt()+ pterr[i], Lep[i].Eta(), Lep[i].Phi(), Lep[i].M());
    TLorentzVector compositeParticleVariation ;
    for(unsigned int j=0; j<Lep.size(); j++){
      if(i!=j)compositeParticleVariation+=Lep[j];
      else compositeParticleVariation+=variedLep;
    }
    
    masserr += (compositeParticleVariation.M()-mass)*(compositeParticleVariation.M()-mass);
    if(debug_) std::cout<<" in mass error :  intermediate masserr "<<masserr<<endl;
  }
  return sqrt(masserr);
}

float HZZ4LeptonsAnalysis::kfactor_qqZZ_qcd_dPhi(float GENdPhiZZ, int finalState)
{

    // finalState=1 : 4e/4mu/4tau
    // finalState=2 : 2e2mu/2mutau/2e2tau

    float k=0.0;

    if (finalState==1) {        
        k+=1.515838921760*(abs(GENdPhiZZ)>0.0&&abs(GENdPhiZZ)<=0.1);
        k+=1.496256665410*(abs(GENdPhiZZ)>0.1&&abs(GENdPhiZZ)<=0.2);
        k+=1.495522061910*(abs(GENdPhiZZ)>0.2&&abs(GENdPhiZZ)<=0.3);
        k+=1.483273154250*(abs(GENdPhiZZ)>0.3&&abs(GENdPhiZZ)<=0.4);
        k+=1.465589701130*(abs(GENdPhiZZ)>0.4&&abs(GENdPhiZZ)<=0.5);
        k+=1.491500887510*(abs(GENdPhiZZ)>0.5&&abs(GENdPhiZZ)<=0.6);
        k+=1.441183580450*(abs(GENdPhiZZ)>0.6&&abs(GENdPhiZZ)<=0.7);
        k+=1.440830603990*(abs(GENdPhiZZ)>0.7&&abs(GENdPhiZZ)<=0.8);
        k+=1.414339019120*(abs(GENdPhiZZ)>0.8&&abs(GENdPhiZZ)<=0.9);
        k+=1.422534218560*(abs(GENdPhiZZ)>0.9&&abs(GENdPhiZZ)<=1.0);
        k+=1.401037066000*(abs(GENdPhiZZ)>1.0&&abs(GENdPhiZZ)<=1.1);
        k+=1.408539428810*(abs(GENdPhiZZ)>1.1&&abs(GENdPhiZZ)<=1.2);
        k+=1.381247744080*(abs(GENdPhiZZ)>1.2&&abs(GENdPhiZZ)<=1.3);
        k+=1.370553357430*(abs(GENdPhiZZ)>1.3&&abs(GENdPhiZZ)<=1.4);
        k+=1.347323316000*(abs(GENdPhiZZ)>1.4&&abs(GENdPhiZZ)<=1.5);
        k+=1.340113437450*(abs(GENdPhiZZ)>1.5&&abs(GENdPhiZZ)<=1.6);
        k+=1.312661036510*(abs(GENdPhiZZ)>1.6&&abs(GENdPhiZZ)<=1.7);
        k+=1.290055062010*(abs(GENdPhiZZ)>1.7&&abs(GENdPhiZZ)<=1.8);
        k+=1.255322614790*(abs(GENdPhiZZ)>1.8&&abs(GENdPhiZZ)<=1.9);
        k+=1.254455642450*(abs(GENdPhiZZ)>1.9&&abs(GENdPhiZZ)<=2.0);
        k+=1.224047664420*(abs(GENdPhiZZ)>2.0&&abs(GENdPhiZZ)<=2.1);
        k+=1.178816782670*(abs(GENdPhiZZ)>2.1&&abs(GENdPhiZZ)<=2.2);
        k+=1.162624827140*(abs(GENdPhiZZ)>2.2&&abs(GENdPhiZZ)<=2.3);
        k+=1.105401140940*(abs(GENdPhiZZ)>2.3&&abs(GENdPhiZZ)<=2.4);
        k+=1.074749265690*(abs(GENdPhiZZ)>2.4&&abs(GENdPhiZZ)<=2.5);
        k+=1.021864599380*(abs(GENdPhiZZ)>2.5&&abs(GENdPhiZZ)<=2.6);
        k+=0.946334793286*(abs(GENdPhiZZ)>2.6&&abs(GENdPhiZZ)<=2.7);
        k+=0.857458082628*(abs(GENdPhiZZ)>2.7&&abs(GENdPhiZZ)<=2.8);
        k+=0.716607670482*(abs(GENdPhiZZ)>2.8&&abs(GENdPhiZZ)<=2.9);
        k+=1.132841784840*(abs(GENdPhiZZ)>2.9&&abs(GENdPhiZZ)<=3.1416);
    }

    if (finalState==2) {
       k+=1.513834489150*(abs(GENdPhiZZ)>0.0&&abs(GENdPhiZZ)<=0.1);
       k+=1.541738780180*(abs(GENdPhiZZ)>0.1&&abs(GENdPhiZZ)<=0.2);
       k+=1.497829632510*(abs(GENdPhiZZ)>0.2&&abs(GENdPhiZZ)<=0.3);
       k+=1.534956782920*(abs(GENdPhiZZ)>0.3&&abs(GENdPhiZZ)<=0.4);
       k+=1.478217033060*(abs(GENdPhiZZ)>0.4&&abs(GENdPhiZZ)<=0.5);
       k+=1.504330859290*(abs(GENdPhiZZ)>0.5&&abs(GENdPhiZZ)<=0.6);
       k+=1.520626246850*(abs(GENdPhiZZ)>0.6&&abs(GENdPhiZZ)<=0.7);
       k+=1.507013090030*(abs(GENdPhiZZ)>0.7&&abs(GENdPhiZZ)<=0.8);
       k+=1.494243156250*(abs(GENdPhiZZ)>0.8&&abs(GENdPhiZZ)<=0.9);
       k+=1.450536096150*(abs(GENdPhiZZ)>0.9&&abs(GENdPhiZZ)<=1.0);
       k+=1.460812521660*(abs(GENdPhiZZ)>1.0&&abs(GENdPhiZZ)<=1.1);
       k+=1.471603622200*(abs(GENdPhiZZ)>1.1&&abs(GENdPhiZZ)<=1.2);
       k+=1.467700038200*(abs(GENdPhiZZ)>1.2&&abs(GENdPhiZZ)<=1.3);
       k+=1.422408690640*(abs(GENdPhiZZ)>1.3&&abs(GENdPhiZZ)<=1.4);
       k+=1.397184022730*(abs(GENdPhiZZ)>1.4&&abs(GENdPhiZZ)<=1.5);
       k+=1.375593447520*(abs(GENdPhiZZ)>1.5&&abs(GENdPhiZZ)<=1.6);
       k+=1.391901318370*(abs(GENdPhiZZ)>1.6&&abs(GENdPhiZZ)<=1.7);
       k+=1.368564350560*(abs(GENdPhiZZ)>1.7&&abs(GENdPhiZZ)<=1.8);
       k+=1.317884804290*(abs(GENdPhiZZ)>1.8&&abs(GENdPhiZZ)<=1.9);
       k+=1.314019950800*(abs(GENdPhiZZ)>1.9&&abs(GENdPhiZZ)<=2.0);
       k+=1.274641749910*(abs(GENdPhiZZ)>2.0&&abs(GENdPhiZZ)<=2.1);
       k+=1.242346606820*(abs(GENdPhiZZ)>2.1&&abs(GENdPhiZZ)<=2.2);
       k+=1.244727403840*(abs(GENdPhiZZ)>2.2&&abs(GENdPhiZZ)<=2.3);
       k+=1.146259351670*(abs(GENdPhiZZ)>2.3&&abs(GENdPhiZZ)<=2.4);
       k+=1.107804993520*(abs(GENdPhiZZ)>2.4&&abs(GENdPhiZZ)<=2.5);
       k+=1.042053646740*(abs(GENdPhiZZ)>2.5&&abs(GENdPhiZZ)<=2.6);
       k+=0.973608545141*(abs(GENdPhiZZ)>2.6&&abs(GENdPhiZZ)<=2.7);
       k+=0.872169942668*(abs(GENdPhiZZ)>2.7&&abs(GENdPhiZZ)<=2.8);
       k+=0.734505279177*(abs(GENdPhiZZ)>2.8&&abs(GENdPhiZZ)<=2.9);
       k+=1.163152837230*(abs(GENdPhiZZ)>2.9&&abs(GENdPhiZZ)<=3.1416);       
    }
    if (k==0.0) return 1.1; // if something goes wrong return inclusive k-factor
    else return k;

}

float HZZ4LeptonsAnalysis::kfactor_qqZZ_qcd_M(float GENmassZZ, int finalState)
{

    // finalState=1 : 4e/4mu/4tau
    // finalState=2 : 2e2mu/2mutau/2e2tau

    float k=0.0;

    if (finalState==1) {
        k+=1.23613311013*(abs(GENmassZZ)>0.0&&abs(GENmassZZ)<=25.0);
        k+=1.17550314639*(abs(GENmassZZ)>25.0&&abs(GENmassZZ)<=50.0);
        k+=1.17044565911*(abs(GENmassZZ)>50.0&&abs(GENmassZZ)<=75.0);
        k+=1.03141209689*(abs(GENmassZZ)>75.0&&abs(GENmassZZ)<=100.0);
        k+=1.05285574912*(abs(GENmassZZ)>100.0&&abs(GENmassZZ)<=125.0);
        k+=1.11287217794*(abs(GENmassZZ)>125.0&&abs(GENmassZZ)<=150.0);
        k+=1.13361441158*(abs(GENmassZZ)>150.0&&abs(GENmassZZ)<=175.0);
        k+=1.10355603327*(abs(GENmassZZ)>175.0&&abs(GENmassZZ)<=200.0);
        k+=1.10053981637*(abs(GENmassZZ)>200.0&&abs(GENmassZZ)<=225.0);
        k+=1.10972676811*(abs(GENmassZZ)>225.0&&abs(GENmassZZ)<=250.0);
        k+=1.12069120525*(abs(GENmassZZ)>250.0&&abs(GENmassZZ)<=275.0);
        k+=1.11589101635*(abs(GENmassZZ)>275.0&&abs(GENmassZZ)<=300.0);
        k+=1.13906170314*(abs(GENmassZZ)>300.0&&abs(GENmassZZ)<=325.0);
        k+=1.14854594271*(abs(GENmassZZ)>325.0&&abs(GENmassZZ)<=350.0);
        k+=1.14616229031*(abs(GENmassZZ)>350.0&&abs(GENmassZZ)<=375.0);
        k+=1.14573157789*(abs(GENmassZZ)>375.0&&abs(GENmassZZ)<=400.0);
        k+=1.13829430515*(abs(GENmassZZ)>400.0&&abs(GENmassZZ)<=425.0);
        k+=1.15521193686*(abs(GENmassZZ)>425.0&&abs(GENmassZZ)<=450.0);
        k+=1.13679822698*(abs(GENmassZZ)>450.0&&abs(GENmassZZ)<=475.0);
        k+=1.13223956942*(abs(GENmassZZ)>475.0);
    }

    if (finalState==2) {
        k+=1.25094466582*(abs(GENmassZZ)>0.0&&abs(GENmassZZ)<=25.0);
        k+=1.22459455362*(abs(GENmassZZ)>25.0&&abs(GENmassZZ)<=50.0);
        k+=1.19287368979*(abs(GENmassZZ)>50.0&&abs(GENmassZZ)<=75.0);
        k+=1.04597506451*(abs(GENmassZZ)>75.0&&abs(GENmassZZ)<=100.0);
        k+=1.08323413771*(abs(GENmassZZ)>100.0&&abs(GENmassZZ)<=125.0);
        k+=1.09994968030*(abs(GENmassZZ)>125.0&&abs(GENmassZZ)<=150.0);
        k+=1.16698455800*(abs(GENmassZZ)>150.0&&abs(GENmassZZ)<=175.0);
        k+=1.10399053155*(abs(GENmassZZ)>175.0&&abs(GENmassZZ)<=200.0);
        k+=1.10592664340*(abs(GENmassZZ)>200.0&&abs(GENmassZZ)<=225.0);
        k+=1.10690381480*(abs(GENmassZZ)>225.0&&abs(GENmassZZ)<=250.0);
        k+=1.11194928918*(abs(GENmassZZ)>250.0&&abs(GENmassZZ)<=275.0);
        k+=1.13522586553*(abs(GENmassZZ)>275.0&&abs(GENmassZZ)<=300.0);
        k+=1.11895090244*(abs(GENmassZZ)>300.0&&abs(GENmassZZ)<=325.0);
        k+=1.13898508615*(abs(GENmassZZ)>325.0&&abs(GENmassZZ)<=350.0);
        k+=1.15463977506*(abs(GENmassZZ)>350.0&&abs(GENmassZZ)<=375.0);
        k+=1.17341664594*(abs(GENmassZZ)>375.0&&abs(GENmassZZ)<=400.0);
        k+=1.20093349763*(abs(GENmassZZ)>400.0&&abs(GENmassZZ)<=425.0);
        k+=1.18915554919*(abs(GENmassZZ)>425.0&&abs(GENmassZZ)<=450.0);
        k+=1.18546007375*(abs(GENmassZZ)>450.0&&abs(GENmassZZ)<=475.0);
        k+=1.12864505708*(abs(GENmassZZ)>475.0);
    }

    if (k==0.0) return 1.1;
    else return k; // if something goes wrong return inclusive k-factor

}

float HZZ4LeptonsAnalysis::kfactor_qqZZ_qcd_Pt(float GENpTZZ, int finalState)
{

    // finalState=1 : 4e/4mu/4tau
    // finalState=2 : 2e2mu/2mutau/2e2tau

    float k=0.0;

    if (finalState==1) {
        k+=0.64155491983*(abs(GENpTZZ)>0.0&&abs(GENpTZZ)<=5.0);
        k+=1.09985240531*(abs(GENpTZZ)>5.0&&abs(GENpTZZ)<=10.0);
        k+=1.29390628654*(abs(GENpTZZ)>10.0&&abs(GENpTZZ)<=15.0);
        k+=1.37859998571*(abs(GENpTZZ)>15.0&&abs(GENpTZZ)<=20.0);
        k+=1.42430263312*(abs(GENpTZZ)>20.0&&abs(GENpTZZ)<=25.0);
        k+=1.45038493266*(abs(GENpTZZ)>25.0&&abs(GENpTZZ)<=30.0);
        k+=1.47015377651*(abs(GENpTZZ)>30.0&&abs(GENpTZZ)<=35.0);
        k+=1.48828685748*(abs(GENpTZZ)>35.0&&abs(GENpTZZ)<=40.0);
        k+=1.50573440448*(abs(GENpTZZ)>40.0&&abs(GENpTZZ)<=45.0);
        k+=1.50211655928*(abs(GENpTZZ)>45.0&&abs(GENpTZZ)<=50.0);
        k+=1.50918720827*(abs(GENpTZZ)>50.0&&abs(GENpTZZ)<=55.0);
        k+=1.52463089491*(abs(GENpTZZ)>55.0&&abs(GENpTZZ)<=60.0);
        k+=1.52400838378*(abs(GENpTZZ)>60.0&&abs(GENpTZZ)<=65.0);
        k+=1.52418067701*(abs(GENpTZZ)>65.0&&abs(GENpTZZ)<=70.0);
        k+=1.55424382578*(abs(GENpTZZ)>70.0&&abs(GENpTZZ)<=75.0);
        k+=1.52544284222*(abs(GENpTZZ)>75.0&&abs(GENpTZZ)<=80.0);
        k+=1.57896384602*(abs(GENpTZZ)>80.0&&abs(GENpTZZ)<=85.0);
        k+=1.53034682567*(abs(GENpTZZ)>85.0&&abs(GENpTZZ)<=90.0);
        k+=1.56147329708*(abs(GENpTZZ)>90.0&&abs(GENpTZZ)<=95.0);
        k+=1.54468169268*(abs(GENpTZZ)>95.0&&abs(GENpTZZ)<=100.0);
        k+=1.57222952415*(abs(GENpTZZ)>100.0);
    }

    if (finalState==2) {
        k+=0.743602533303*(abs(GENpTZZ)>0.0&&abs(GENpTZZ)<=5.0);
        k+=1.14789453219*(abs(GENpTZZ)>5.0&&abs(GENpTZZ)<=10.0);
        k+=1.33815867892*(abs(GENpTZZ)>10.0&&abs(GENpTZZ)<=15.0);
        k+=1.41420044104*(abs(GENpTZZ)>15.0&&abs(GENpTZZ)<=20.0);
        k+=1.45511318916*(abs(GENpTZZ)>20.0&&abs(GENpTZZ)<=25.0);
        k+=1.47569225244*(abs(GENpTZZ)>25.0&&abs(GENpTZZ)<=30.0);
        k+=1.49053003693*(abs(GENpTZZ)>30.0&&abs(GENpTZZ)<=35.0);
        k+=1.50622827695*(abs(GENpTZZ)>35.0&&abs(GENpTZZ)<=40.0);
        k+=1.50328889799*(abs(GENpTZZ)>40.0&&abs(GENpTZZ)<=45.0);
        k+=1.52186945281*(abs(GENpTZZ)>45.0&&abs(GENpTZZ)<=50.0);
        k+=1.52043468754*(abs(GENpTZZ)>50.0&&abs(GENpTZZ)<=55.0);
        k+=1.53977869986*(abs(GENpTZZ)>55.0&&abs(GENpTZZ)<=60.0);
        k+=1.53491994434*(abs(GENpTZZ)>60.0&&abs(GENpTZZ)<=65.0);
        k+=1.51772882172*(abs(GENpTZZ)>65.0&&abs(GENpTZZ)<=70.0);
        k+=1.54494489131*(abs(GENpTZZ)>70.0&&abs(GENpTZZ)<=75.0);
        k+=1.57762411697*(abs(GENpTZZ)>75.0&&abs(GENpTZZ)<=80.0);
        k+=1.55078339014*(abs(GENpTZZ)>80.0&&abs(GENpTZZ)<=85.0);
        k+=1.57078191891*(abs(GENpTZZ)>85.0&&abs(GENpTZZ)<=90.0);
        k+=1.56162666568*(abs(GENpTZZ)>90.0&&abs(GENpTZZ)<=95.0);
        k+=1.54183774627*(abs(GENpTZZ)>95.0&&abs(GENpTZZ)<=100.0);
        k+=1.58485762205*(abs(GENpTZZ)>100.0);
    }

    if (k==0.0) return 1.1;
    else return k; // if something goes wrong return inclusive k-factor

}


